"use strict";
(self["webpackChunkapp"] = self["webpackChunkapp"] || []).push([["node_modules_ionic_core_dist_esm_ion-input-otp_entry_js"],{

/***/ 381:
/*!******************************************************************!*\
  !*** ./node_modules/@ionic/core/dist/esm/ion-input-otp.entry.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ion_input_otp: () => (/* binding */ InputOTP)
/* harmony export */ });
/* harmony import */ var C_Users_Faizan_Desktop_Desktop_Projects_tactical_trap_app_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js */ 9204);
/* harmony import */ var _index_B_U9CtaY_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./index-B_U9CtaY.js */ 4917);
/* harmony import */ var _helpers_1O4D2b7y_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./helpers-1O4D2b7y.js */ 450);
/* harmony import */ var _dir_C53feagD_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./dir-C53feagD.js */ 1008);
/* harmony import */ var _theme_DiVJyqlX_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./theme-DiVJyqlX.js */ 247);

/*!
 * (C) Ionic http://ionicframework.com - MIT License
 */




const inputOtpIosCss = ".sc-ion-input-otp-ios-h{--margin-top:0;--margin-end:0;--margin-bottom:0;--margin-start:0;--padding-top:16px;--padding-end:0;--padding-bottom:16px;--padding-start:0;--color:initial;--min-width:40px;--separator-width:8px;--separator-height:var(--separator-width);--separator-border-radius:999px;--separator-color:var(--ion-color-step-150, var(--ion-background-color-step-150, #d9d9d9));--highlight-color-focused:var(--ion-color-primary, #0054e9);--highlight-color-valid:var(--ion-color-success, #2dd55b);--highlight-color-invalid:var(--ion-color-danger, #c5000f);--highlight-color:var(--highlight-color-focused);display:block;position:relative;font-size:0.875rem}.input-otp-group.sc-ion-input-otp-ios{-webkit-margin-start:var(--margin-start);margin-inline-start:var(--margin-start);-webkit-margin-end:var(--margin-end);margin-inline-end:var(--margin-end);margin-top:var(--margin-top);margin-bottom:var(--margin-bottom);-webkit-padding-start:var(--padding-start);padding-inline-start:var(--padding-start);-webkit-padding-end:var(--padding-end);padding-inline-end:var(--padding-end);padding-top:var(--padding-top);padding-bottom:var(--padding-bottom);display:-ms-flexbox;display:flex;-ms-flex-align:center;align-items:center;-ms-flex-pack:center;justify-content:center}.native-wrapper.sc-ion-input-otp-ios{display:-ms-flexbox;display:flex;-ms-flex-align:center;align-items:center;-ms-flex-pack:center;justify-content:center;min-width:var(--min-width)}.native-input.sc-ion-input-otp-ios{border-radius:var(--border-radius);width:var(--width);min-width:inherit;height:var(--height);border-width:var(--border-width);border-style:solid;border-color:var(--border-color);background:var(--background);color:var(--color);font-size:inherit;text-align:center;-webkit-appearance:none;-moz-appearance:none;appearance:none}.has-focus.sc-ion-input-otp-ios-h .native-input.sc-ion-input-otp-ios{caret-color:var(--highlight-color)}.input-otp-description.sc-ion-input-otp-ios{color:var(--ion-color-step-700, var(--ion-text-color-step-300, #4d4d4d));font-size:0.75rem;line-height:1.25rem;text-align:center}.input-otp-description-hidden.sc-ion-input-otp-ios{display:none}.input-otp-separator.sc-ion-input-otp-ios{border-radius:var(--separator-border-radius);-ms-flex-negative:0;flex-shrink:0;width:var(--separator-width);height:var(--separator-height);background:var(--separator-color)}.input-otp-size-small.sc-ion-input-otp-ios-h{--width:40px;--height:40px}.input-otp-size-small.sc-ion-input-otp-ios-h .input-otp-group.sc-ion-input-otp-ios{gap:8px}.input-otp-size-medium.sc-ion-input-otp-ios-h{--width:48px;--height:48px}.input-otp-size-large.sc-ion-input-otp-ios-h{--width:56px;--height:56px}.input-otp-size-medium.sc-ion-input-otp-ios-h .input-otp-group.sc-ion-input-otp-ios,.input-otp-size-large.sc-ion-input-otp-ios-h .input-otp-group.sc-ion-input-otp-ios{gap:12px}.input-otp-shape-round.sc-ion-input-otp-ios-h{--border-radius:16px}.input-otp-shape-soft.sc-ion-input-otp-ios-h{--border-radius:8px}.input-otp-shape-rectangular.sc-ion-input-otp-ios-h{--border-radius:0}.input-otp-fill-outline.sc-ion-input-otp-ios-h{--background:none}.input-otp-fill-solid.sc-ion-input-otp-ios-h{--border-color:var(--ion-color-step-50, var(--ion-background-color-step-50, #f2f2f2));--background:var(--ion-color-step-50, var(--ion-background-color-step-50, #f2f2f2))}.input-otp-disabled.sc-ion-input-otp-ios-h{--color:var(--ion-color-step-350, var(--ion-text-color-step-650, #a6a6a6))}.input-otp-fill-outline.input-otp-disabled.sc-ion-input-otp-ios-h{--background:var(--ion-color-step-50, var(--ion-background-color-step-50, #f2f2f2));--border-color:var(--ion-color-step-100, var(--ion-background-color-step-100, #e6e6e6))}.input-otp-disabled.sc-ion-input-otp-ios-h,.input-otp-disabled.sc-ion-input-otp-ios-h .native-input.sc-ion-input-otp-ios:disabled{cursor:not-allowed}.has-focus.sc-ion-input-otp-ios-h .native-input.sc-ion-input-otp-ios:focus{--border-color:var(--highlight-color);outline:none}.input-otp-fill-outline.input-otp-readonly.sc-ion-input-otp-ios-h{--background:var(--ion-color-step-50, var(--ion-background-color-step-50, #f2f2f2))}.input-otp-fill-solid.input-otp-disabled.sc-ion-input-otp-ios-h,.input-otp-fill-solid.input-otp-readonly.sc-ion-input-otp-ios-h{--border-color:var(--ion-color-step-100, var(--ion-background-color-step-100, #e6e6e6));--background:var(--ion-color-step-100, var(--ion-background-color-step-100, #e6e6e6))}.ion-touched.ion-invalid.sc-ion-input-otp-ios-h{--highlight-color:var(--highlight-color-invalid)}.ion-valid.sc-ion-input-otp-ios-h{--highlight-color:var(--highlight-color-valid)}.has-focus.ion-valid.sc-ion-input-otp-ios-h,.ion-touched.ion-invalid.sc-ion-input-otp-ios-h{--border-color:var(--highlight-color)}.ion-color.sc-ion-input-otp-ios-h{--highlight-color-focused:var(--ion-color-base)}.input-otp-fill-outline.ion-color.sc-ion-input-otp-ios-h .native-input.sc-ion-input-otp-ios,.input-otp-fill-solid.ion-color.sc-ion-input-otp-ios-h .native-input.sc-ion-input-otp-ios:focus{border-color:rgba(var(--ion-color-base-rgb), 0.6)}.input-otp-fill-outline.ion-color.ion-invalid.sc-ion-input-otp-ios-h .native-input.sc-ion-input-otp-ios,.input-otp-fill-solid.ion-color.ion-invalid.sc-ion-input-otp-ios-h .native-input.sc-ion-input-otp-ios,.input-otp-fill-outline.ion-color.has-focus.ion-invalid.sc-ion-input-otp-ios-h .native-input.sc-ion-input-otp-ios,.input-otp-fill-solid.ion-color.has-focus.ion-invalid.sc-ion-input-otp-ios-h .native-input.sc-ion-input-otp-ios{border-color:var(--ion-color-danger, #c5000f)}.input-otp-fill-outline.ion-color.ion-valid.sc-ion-input-otp-ios-h .native-input.sc-ion-input-otp-ios,.input-otp-fill-solid.ion-color.ion-valid.sc-ion-input-otp-ios-h .native-input.sc-ion-input-otp-ios,.input-otp-fill-outline.ion-color.has-focus.ion-valid.sc-ion-input-otp-ios-h .native-input.sc-ion-input-otp-ios,.input-otp-fill-solid.ion-color.has-focus.ion-valid.sc-ion-input-otp-ios-h .native-input.sc-ion-input-otp-ios{border-color:var(--ion-color-success, #2dd55b)}.input-otp-fill-outline.input-otp-disabled.ion-color.sc-ion-input-otp-ios-h .native-input.sc-ion-input-otp-ios{border-color:rgba(var(--ion-color-base-rgb), 0.3)}.sc-ion-input-otp-ios-h{--border-width:0.55px}.has-focus.sc-ion-input-otp-ios-h .native-input.sc-ion-input-otp-ios:focus{--border-width:1px}.input-otp-fill-outline.sc-ion-input-otp-ios-h{--border-color:var(--ion-item-border-color, var(--ion-border-color, var(--ion-color-step-250, var(--ion-background-color-step-250, #c8c7cc))))}";
const inputOtpMdCss = ".sc-ion-input-otp-md-h{--margin-top:0;--margin-end:0;--margin-bottom:0;--margin-start:0;--padding-top:16px;--padding-end:0;--padding-bottom:16px;--padding-start:0;--color:initial;--min-width:40px;--separator-width:8px;--separator-height:var(--separator-width);--separator-border-radius:999px;--separator-color:var(--ion-color-step-150, var(--ion-background-color-step-150, #d9d9d9));--highlight-color-focused:var(--ion-color-primary, #0054e9);--highlight-color-valid:var(--ion-color-success, #2dd55b);--highlight-color-invalid:var(--ion-color-danger, #c5000f);--highlight-color:var(--highlight-color-focused);display:block;position:relative;font-size:0.875rem}.input-otp-group.sc-ion-input-otp-md{-webkit-margin-start:var(--margin-start);margin-inline-start:var(--margin-start);-webkit-margin-end:var(--margin-end);margin-inline-end:var(--margin-end);margin-top:var(--margin-top);margin-bottom:var(--margin-bottom);-webkit-padding-start:var(--padding-start);padding-inline-start:var(--padding-start);-webkit-padding-end:var(--padding-end);padding-inline-end:var(--padding-end);padding-top:var(--padding-top);padding-bottom:var(--padding-bottom);display:-ms-flexbox;display:flex;-ms-flex-align:center;align-items:center;-ms-flex-pack:center;justify-content:center}.native-wrapper.sc-ion-input-otp-md{display:-ms-flexbox;display:flex;-ms-flex-align:center;align-items:center;-ms-flex-pack:center;justify-content:center;min-width:var(--min-width)}.native-input.sc-ion-input-otp-md{border-radius:var(--border-radius);width:var(--width);min-width:inherit;height:var(--height);border-width:var(--border-width);border-style:solid;border-color:var(--border-color);background:var(--background);color:var(--color);font-size:inherit;text-align:center;-webkit-appearance:none;-moz-appearance:none;appearance:none}.has-focus.sc-ion-input-otp-md-h .native-input.sc-ion-input-otp-md{caret-color:var(--highlight-color)}.input-otp-description.sc-ion-input-otp-md{color:var(--ion-color-step-700, var(--ion-text-color-step-300, #4d4d4d));font-size:0.75rem;line-height:1.25rem;text-align:center}.input-otp-description-hidden.sc-ion-input-otp-md{display:none}.input-otp-separator.sc-ion-input-otp-md{border-radius:var(--separator-border-radius);-ms-flex-negative:0;flex-shrink:0;width:var(--separator-width);height:var(--separator-height);background:var(--separator-color)}.input-otp-size-small.sc-ion-input-otp-md-h{--width:40px;--height:40px}.input-otp-size-small.sc-ion-input-otp-md-h .input-otp-group.sc-ion-input-otp-md{gap:8px}.input-otp-size-medium.sc-ion-input-otp-md-h{--width:48px;--height:48px}.input-otp-size-large.sc-ion-input-otp-md-h{--width:56px;--height:56px}.input-otp-size-medium.sc-ion-input-otp-md-h .input-otp-group.sc-ion-input-otp-md,.input-otp-size-large.sc-ion-input-otp-md-h .input-otp-group.sc-ion-input-otp-md{gap:12px}.input-otp-shape-round.sc-ion-input-otp-md-h{--border-radius:16px}.input-otp-shape-soft.sc-ion-input-otp-md-h{--border-radius:8px}.input-otp-shape-rectangular.sc-ion-input-otp-md-h{--border-radius:0}.input-otp-fill-outline.sc-ion-input-otp-md-h{--background:none}.input-otp-fill-solid.sc-ion-input-otp-md-h{--border-color:var(--ion-color-step-50, var(--ion-background-color-step-50, #f2f2f2));--background:var(--ion-color-step-50, var(--ion-background-color-step-50, #f2f2f2))}.input-otp-disabled.sc-ion-input-otp-md-h{--color:var(--ion-color-step-350, var(--ion-text-color-step-650, #a6a6a6))}.input-otp-fill-outline.input-otp-disabled.sc-ion-input-otp-md-h{--background:var(--ion-color-step-50, var(--ion-background-color-step-50, #f2f2f2));--border-color:var(--ion-color-step-100, var(--ion-background-color-step-100, #e6e6e6))}.input-otp-disabled.sc-ion-input-otp-md-h,.input-otp-disabled.sc-ion-input-otp-md-h .native-input.sc-ion-input-otp-md:disabled{cursor:not-allowed}.has-focus.sc-ion-input-otp-md-h .native-input.sc-ion-input-otp-md:focus{--border-color:var(--highlight-color);outline:none}.input-otp-fill-outline.input-otp-readonly.sc-ion-input-otp-md-h{--background:var(--ion-color-step-50, var(--ion-background-color-step-50, #f2f2f2))}.input-otp-fill-solid.input-otp-disabled.sc-ion-input-otp-md-h,.input-otp-fill-solid.input-otp-readonly.sc-ion-input-otp-md-h{--border-color:var(--ion-color-step-100, var(--ion-background-color-step-100, #e6e6e6));--background:var(--ion-color-step-100, var(--ion-background-color-step-100, #e6e6e6))}.ion-touched.ion-invalid.sc-ion-input-otp-md-h{--highlight-color:var(--highlight-color-invalid)}.ion-valid.sc-ion-input-otp-md-h{--highlight-color:var(--highlight-color-valid)}.has-focus.ion-valid.sc-ion-input-otp-md-h,.ion-touched.ion-invalid.sc-ion-input-otp-md-h{--border-color:var(--highlight-color)}.ion-color.sc-ion-input-otp-md-h{--highlight-color-focused:var(--ion-color-base)}.input-otp-fill-outline.ion-color.sc-ion-input-otp-md-h .native-input.sc-ion-input-otp-md,.input-otp-fill-solid.ion-color.sc-ion-input-otp-md-h .native-input.sc-ion-input-otp-md:focus{border-color:rgba(var(--ion-color-base-rgb), 0.6)}.input-otp-fill-outline.ion-color.ion-invalid.sc-ion-input-otp-md-h .native-input.sc-ion-input-otp-md,.input-otp-fill-solid.ion-color.ion-invalid.sc-ion-input-otp-md-h .native-input.sc-ion-input-otp-md,.input-otp-fill-outline.ion-color.has-focus.ion-invalid.sc-ion-input-otp-md-h .native-input.sc-ion-input-otp-md,.input-otp-fill-solid.ion-color.has-focus.ion-invalid.sc-ion-input-otp-md-h .native-input.sc-ion-input-otp-md{border-color:var(--ion-color-danger, #c5000f)}.input-otp-fill-outline.ion-color.ion-valid.sc-ion-input-otp-md-h .native-input.sc-ion-input-otp-md,.input-otp-fill-solid.ion-color.ion-valid.sc-ion-input-otp-md-h .native-input.sc-ion-input-otp-md,.input-otp-fill-outline.ion-color.has-focus.ion-valid.sc-ion-input-otp-md-h .native-input.sc-ion-input-otp-md,.input-otp-fill-solid.ion-color.has-focus.ion-valid.sc-ion-input-otp-md-h .native-input.sc-ion-input-otp-md{border-color:var(--ion-color-success, #2dd55b)}.input-otp-fill-outline.input-otp-disabled.ion-color.sc-ion-input-otp-md-h .native-input.sc-ion-input-otp-md{border-color:rgba(var(--ion-color-base-rgb), 0.3)}.sc-ion-input-otp-md-h{--border-width:1px}.has-focus.sc-ion-input-otp-md-h .native-input.sc-ion-input-otp-md:focus{--border-width:2px}.input-otp-fill-outline.sc-ion-input-otp-md-h{--border-color:var(--ion-color-step-300, var(--ion-background-color-step-300, #b3b3b3))}";
const InputOTP = class {
  constructor(hostRef) {
    (0,_index_B_U9CtaY_js__WEBPACK_IMPORTED_MODULE_1__.r)(this, hostRef);
    this.ionInput = (0,_index_B_U9CtaY_js__WEBPACK_IMPORTED_MODULE_1__.d)(this, "ionInput", 7);
    this.ionChange = (0,_index_B_U9CtaY_js__WEBPACK_IMPORTED_MODULE_1__.d)(this, "ionChange", 7);
    this.ionComplete = (0,_index_B_U9CtaY_js__WEBPACK_IMPORTED_MODULE_1__.d)(this, "ionComplete", 7);
    this.ionBlur = (0,_index_B_U9CtaY_js__WEBPACK_IMPORTED_MODULE_1__.d)(this, "ionBlur", 7);
    this.ionFocus = (0,_index_B_U9CtaY_js__WEBPACK_IMPORTED_MODULE_1__.d)(this, "ionFocus", 7);
    this.inheritedAttributes = {};
    this.inputRefs = [];
    this.inputId = `ion-input-otp-${inputIds++}`;
    this.parsedSeparators = [];
    /**
     * Tracks whether the user is navigating through input boxes using keyboard navigation
     * (arrow keys, tab) versus mouse clicks. This is used to determine the appropriate
     * focus behavior when an input box is focused.
     */
    this.isKeyboardNavigation = false;
    this.inputValues = [];
    this.hasFocus = false;
    /**
     * Indicates whether and how the text value should be automatically capitalized as it is entered/edited by the user.
     * Available options: `"off"`, `"none"`, `"on"`, `"sentences"`, `"words"`, `"characters"`.
     */
    this.autocapitalize = 'off';
    /**
     * If `true`, the user cannot interact with the input.
     */
    this.disabled = false;
    /**
     * The fill for the input boxes. If `"solid"` the input boxes will have a background. If
     * `"outline"` the input boxes will be transparent with a border.
     */
    this.fill = 'outline';
    /**
     * The number of input boxes to display.
     */
    this.length = 4;
    /**
     * If `true`, the user cannot modify the value.
     */
    this.readonly = false;
    /**
     * The shape of the input boxes.
     * If "round" they will have an increased border radius.
     * If "rectangular" they will have no border radius.
     * If "soft" they will have a soft border radius.
     */
    this.shape = 'round';
    /**
     * The size of the input boxes.
     */
    this.size = 'medium';
    /**
     * The type of input allowed in the input boxes.
     */
    this.type = 'number';
    /**
     * The value of the input group.
     */
    this.value = '';
    /**
     * Handles the focus behavior for the input OTP component.
     *
     * Focus behavior:
     * 1. Keyboard navigation: Allow normal focus movement
     * 2. Mouse click:
     *    - If clicked box has value: Focus that box
     *    - If clicked box is empty: Focus first empty box
     *
     * Emits the `ionFocus` event when the input group gains focus.
     */
    this.onFocus = index => event => {
      var _a;
      const {
        inputRefs
      } = this;
      // Only emit ionFocus and set the focusedValue when the
      // component first gains focus
      if (!this.hasFocus) {
        this.ionFocus.emit(event);
        this.focusedValue = this.value;
      }
      this.hasFocus = true;
      let finalIndex = index;
      if (!this.isKeyboardNavigation) {
        // If the clicked box has a value, focus it
        // Otherwise focus the first empty box
        const targetIndex = this.inputValues[index] ? index : this.getFirstEmptyIndex();
        finalIndex = targetIndex === -1 ? this.length - 1 : targetIndex;
        // Focus the target box
        (_a = this.inputRefs[finalIndex]) === null || _a === void 0 ? void 0 : _a.focus();
      }
      // Update tabIndexes to match the focused box
      inputRefs.forEach((input, i) => {
        input.tabIndex = i === finalIndex ? 0 : -1;
      });
      // Reset the keyboard navigation flag
      this.isKeyboardNavigation = false;
    };
    /**
     * Handles the blur behavior for the input OTP component.
     * Emits the `ionBlur` event when the input group loses focus.
     */
    this.onBlur = event => {
      const {
        inputRefs
      } = this;
      const relatedTarget = event.relatedTarget;
      // Do not emit blur if we're moving to another input box in the same component
      const isInternalFocus = relatedTarget != null && inputRefs.includes(relatedTarget);
      if (!isInternalFocus) {
        this.hasFocus = false;
        // Reset tabIndexes when focus leaves the component
        this.updateTabIndexes();
        // Always emit ionBlur when focus leaves the component
        this.ionBlur.emit(event);
        // Only emit ionChange if the value has actually changed
        if (this.focusedValue !== this.value) {
          this.emitIonChange(event);
        }
      }
    };
    /**
     * Handles keyboard navigation and input for the OTP component.
     *
     * Navigation:
     * - Backspace: Clears current input and moves to previous box if empty
     * - Arrow Left/Right: Moves focus between input boxes
     * - Tab: Allows normal tab navigation between components
     *
     * Input Behavior:
     * - Validates input against the allowed pattern
     * - When entering a key in a filled box:
     *   - Shifts existing values right if there is room
     *   - Updates the value of the input group
     *   - Prevents default behavior to avoid automatic focus shift
     */
    this.onKeyDown = index => event => {
      const {
        length
      } = this;
      const rtl = (0,_dir_C53feagD_js__WEBPACK_IMPORTED_MODULE_3__.i)(this.el);
      const input = event.target;
      // Meta shortcuts are used to copy, paste, and select text
      // We don't want to handle these keys here
      const metaShortcuts = ['a', 'c', 'v', 'x', 'r', 'z', 'y'];
      const isTextSelection = input.selectionStart !== input.selectionEnd;
      // Return if the key is a meta shortcut or the input value
      // text is selected and let the onPaste / onInput handler manage it
      if (isTextSelection || (event.metaKey || event.ctrlKey) && metaShortcuts.includes(event.key.toLowerCase())) {
        return;
      }
      if (event.key === 'Backspace') {
        if (this.inputValues[index]) {
          // Shift all values to the right of the current index left by one
          for (let i = index; i < length - 1; i++) {
            this.inputValues[i] = this.inputValues[i + 1];
          }
          // Clear the last box
          this.inputValues[length - 1] = '';
          // Update all inputRefs to match inputValues
          for (let i = 0; i < length; i++) {
            this.inputRefs[i].value = this.inputValues[i] || '';
          }
          this.updateValue(event);
          event.preventDefault();
        } else if (!this.inputValues[index] && index > 0) {
          // If current input is empty, move to previous input
          this.focusPrevious(index);
        }
      } else if (event.key === 'ArrowLeft' || event.key === 'ArrowRight') {
        this.isKeyboardNavigation = true;
        event.preventDefault();
        const isLeft = event.key === 'ArrowLeft';
        const shouldMoveNext = isLeft && rtl || !isLeft && !rtl;
        // Only allow moving to the next input if the current has a value
        if (shouldMoveNext) {
          if (this.inputValues[index] && index < length - 1) {
            this.focusNext(index);
          }
        } else {
          this.focusPrevious(index);
        }
      } else if (event.key === 'Tab') {
        this.isKeyboardNavigation = true;
        // Let all tab events proceed normally
        return;
      }
      // If the input box contains a value and the key being
      // entered is a valid key for the input box update the value
      // and shift the values to the right if there is room.
      if (this.inputValues[index] && this.validKeyPattern.test(event.key)) {
        if (!this.inputValues[length - 1]) {
          for (let i = length - 1; i > index; i--) {
            this.inputValues[i] = this.inputValues[i - 1];
            this.inputRefs[i].value = this.inputValues[i] || '';
          }
        }
        this.inputValues[index] = event.key;
        this.inputRefs[index].value = event.key;
        this.updateValue(event);
        // Prevent default to avoid the browser from
        // automatically moving the focus to the next input
        event.preventDefault();
      }
    };
    this.onInput = index => event => {
      const {
        length,
        validKeyPattern
      } = this;
      const value = event.target.value;
      // If the value is longer than 1 character (autofill), split it into
      // characters and filter out invalid ones
      if (value.length > 1) {
        const validChars = value.split('').filter(char => validKeyPattern.test(char)).slice(0, length);
        // If there are no valid characters coming from the
        // autofill, all input refs have to be cleared after the
        // browser has finished the autofill behavior
        if (validChars.length === 0) {
          requestAnimationFrame(() => {
            this.inputRefs.forEach(input => {
              input.value = '';
            });
          });
        }
        // Update the value of the input group and emit the input change event
        this.value = validChars.join('');
        this.updateValue(event);
        // Focus the first empty input box or the last input box if all boxes
        // are filled after a small delay to ensure the input boxes have been
        // updated before moving the focus
        setTimeout(() => {
          var _a;
          const nextIndex = validChars.length < length ? validChars.length : length - 1;
          (_a = this.inputRefs[nextIndex]) === null || _a === void 0 ? void 0 : _a.focus();
        }, 20);
        return;
      }
      // Only allow input if it matches the pattern
      if (value.length > 0 && !validKeyPattern.test(value)) {
        this.inputRefs[index].value = '';
        this.inputValues[index] = '';
        return;
      }
      // For single character input, fill the current box
      this.inputValues[index] = value;
      this.updateValue(event);
      if (value.length > 0) {
        this.focusNext(index);
      }
    };
    /**
     * Handles pasting text into the input OTP component.
     * This function prevents the default paste behavior and
     * validates the pasted text against the allowed pattern.
     * It then updates the value of the input group and focuses
     * the next empty input after pasting.
     */
    this.onPaste = event => {
      var _a, _b, _c;
      const {
        inputRefs,
        length,
        validKeyPattern
      } = this;
      event.preventDefault();
      const pastedText = (_a = event.clipboardData) === null || _a === void 0 ? void 0 : _a.getData('text');
      // If there is no pasted text, still emit the input change event
      // because this is how the native input element behaves
      // but return early because there is nothing to paste.
      if (!pastedText) {
        this.emitIonInput(event);
        return;
      }
      const validChars = pastedText.split('').filter(char => validKeyPattern.test(char)).slice(0, length);
      // Always paste starting at the first box
      validChars.forEach((char, index) => {
        if (index < length) {
          this.inputRefs[index].value = char;
          this.inputValues[index] = char;
        }
      });
      // Update the value so that all input boxes are updated
      this.value = validChars.join('');
      this.updateValue(event);
      // Focus the next empty input after pasting
      // If all boxes are filled, focus the last input
      const nextEmptyIndex = validChars.length;
      if (nextEmptyIndex < length) {
        (_b = inputRefs[nextEmptyIndex]) === null || _b === void 0 ? void 0 : _b.focus();
      } else {
        (_c = inputRefs[length - 1]) === null || _c === void 0 ? void 0 : _c.focus();
      }
    };
  }
  /**
   * Sets focus to an input box.
   * @param index - The index of the input box to focus (0-based).
   * If provided and the input box has a value, the input box at that index will be focused.
   * Otherwise, the first empty input box or the last input if all are filled will be focused.
   */
  setFocus(index) {
    var _this = this;
    return (0,C_Users_Faizan_Desktop_Desktop_Projects_tactical_trap_app_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      var _a, _b;
      if (typeof index === 'number') {
        const validIndex = Math.max(0, Math.min(index, _this.length - 1));
        (_a = _this.inputRefs[validIndex]) === null || _a === void 0 ? void 0 : _a.focus();
      } else {
        const tabbableIndex = _this.getTabbableIndex();
        (_b = _this.inputRefs[tabbableIndex]) === null || _b === void 0 ? void 0 : _b.focus();
      }
    })();
  }
  valueChanged() {
    this.initializeValues();
    this.updateTabIndexes();
  }
  /**
   * Processes the separators prop into an array of numbers.
   *
   * If the separators prop is not provided, returns an empty array.
   * If the separators prop is 'all', returns an array of all valid positions (1 to length-1).
   * If the separators prop is an array, returns it as is.
   * If the separators prop is a string, splits it by commas and parses each part as a number.
   *
   * If the separators are greater than the input length, it will warn and ignore the separators.
   */
  processSeparators() {
    const {
      separators,
      length
    } = this;
    if (separators === undefined) {
      this.parsedSeparators = [];
      return;
    }
    if (typeof separators === 'string' && separators !== 'all') {
      const isValidFormat = /^(\d+)(,\d+)*$/.test(separators);
      if (!isValidFormat) {
        (0,_index_B_U9CtaY_js__WEBPACK_IMPORTED_MODULE_1__.m)(`[ion-input-otp] - Invalid separators format. Expected a comma-separated list of numbers, an array of numbers, or "all". Received: ${separators}`, this.el);
        this.parsedSeparators = [];
        return;
      }
    }
    let separatorValues;
    if (separators === 'all') {
      separatorValues = Array.from({
        length: length - 1
      }, (_, i) => i + 1);
    } else if (Array.isArray(separators)) {
      separatorValues = separators;
    } else {
      separatorValues = separators.split(',').map(pos => parseInt(pos, 10)).filter(pos => !isNaN(pos));
    }
    // Check for duplicate separator positions
    const duplicates = separatorValues.filter((pos, index) => separatorValues.indexOf(pos) !== index);
    if (duplicates.length > 0) {
      (0,_index_B_U9CtaY_js__WEBPACK_IMPORTED_MODULE_1__.m)(`[ion-input-otp] - Duplicate separator positions are not allowed. Received: ${separators}`, this.el);
    }
    const invalidSeparators = separatorValues.filter(pos => pos > length);
    if (invalidSeparators.length > 0) {
      (0,_index_B_U9CtaY_js__WEBPACK_IMPORTED_MODULE_1__.m)(`[ion-input-otp] - The following separator positions are greater than the input length (${length}): ${invalidSeparators.join(', ')}. These separators will be ignored.`, this.el);
    }
    this.parsedSeparators = separatorValues.filter(pos => pos <= length);
  }
  componentWillLoad() {
    this.inheritedAttributes = (0,_helpers_1O4D2b7y_js__WEBPACK_IMPORTED_MODULE_2__.i)(this.el);
    this.processSeparators();
    this.initializeValues();
  }
  componentDidLoad() {
    this.updateTabIndexes();
  }
  /**
   * Get the regex pattern for allowed characters.
   * If a pattern is provided, use it to create a regex pattern
   * Otherwise, use the default regex pattern based on type
   */
  get validKeyPattern() {
    return new RegExp(`^${this.getPattern()}$`, 'u');
  }
  /**
   * Gets the string pattern to pass to the input element
   * and use in the regex for allowed characters.
   */
  getPattern() {
    const {
      pattern,
      type
    } = this;
    if (pattern) {
      return pattern;
    }
    return type === 'number' ? '[\\p{N}]' : '[\\p{L}\\p{N}]';
  }
  /**
   * Get the default value for inputmode.
   * If inputmode is provided, use it.
   * Otherwise, use the default inputmode based on type
   */
  getInputmode() {
    const {
      inputmode
    } = this;
    if (inputmode) {
      return inputmode;
    }
    if (this.type == 'number') {
      return 'numeric';
    } else {
      return 'text';
    }
  }
  /**
   * Initializes the input values array based on the current value prop.
   * This splits the value into individual characters and validates them against
   * the allowed pattern. The values are then used as the values in the native
   * input boxes and the value of the input group is updated.
   */
  initializeValues() {
    // Clear all input values
    this.inputValues = Array(this.length).fill('');
    // If the value is null, undefined, or an empty string, return
    if (this.value == null || String(this.value).length === 0) {
      return;
    }
    // Split the value into individual characters and validate
    // them against the allowed pattern
    const chars = String(this.value).split('').slice(0, this.length);
    chars.forEach((char, index) => {
      if (this.validKeyPattern.test(char)) {
        this.inputValues[index] = char;
      }
    });
    // Update the value without emitting events
    this.value = this.inputValues.join('');
  }
  /**
   * Updates the value of the input group.
   * This updates the value of the input group and emits an `ionChange` event.
   * If all of the input boxes are filled, it emits an `ionComplete` event.
   */
  updateValue(event) {
    const {
      inputValues,
      length
    } = this;
    const newValue = inputValues.join('');
    this.value = newValue;
    this.emitIonInput(event);
    if (newValue.length === length) {
      this.ionComplete.emit({
        value: newValue
      });
    }
  }
  /**
   * Emits an `ionChange` event.
   * This API should be called for user committed changes.
   * This API should not be used for external value changes.
   */
  emitIonChange(event) {
    const {
      value
    } = this;
    // Checks for both null and undefined values
    const newValue = value == null ? value : value.toString();
    this.ionChange.emit({
      value: newValue,
      event
    });
  }
  /**
   * Emits an `ionInput` event.
   * This is used to emit the input value when the user types,
   * backspaces, or pastes.
   */
  emitIonInput(event) {
    const {
      value
    } = this;
    // Checks for both null and undefined values
    const newValue = value == null ? value : value.toString();
    this.ionInput.emit({
      value: newValue,
      event
    });
  }
  /**
   * Focuses the next input box.
   */
  focusNext(currentIndex) {
    var _a;
    const {
      inputRefs,
      length
    } = this;
    if (currentIndex < length - 1) {
      (_a = inputRefs[currentIndex + 1]) === null || _a === void 0 ? void 0 : _a.focus();
    }
  }
  /**
   * Focuses the previous input box.
   */
  focusPrevious(currentIndex) {
    var _a;
    const {
      inputRefs
    } = this;
    if (currentIndex > 0) {
      (_a = inputRefs[currentIndex - 1]) === null || _a === void 0 ? void 0 : _a.focus();
    }
  }
  /**
   * Searches through the input values and returns the index
   * of the first empty input.
   * Returns -1 if all inputs are filled.
   */
  getFirstEmptyIndex() {
    var _a;
    const {
      inputValues,
      length
    } = this;
    // Create an array of the same length as the input OTP
    // and fill it with the input values
    const values = Array.from({
      length
    }, (_, i) => inputValues[i] || '');
    return (_a = values.findIndex(value => !value || value === '')) !== null && _a !== void 0 ? _a : -1;
  }
  /**
   * Returns the index of the input that should be tabbed to.
   * If all inputs are filled, returns the last input's index.
   * Otherwise, returns the index of the first empty input.
   */
  getTabbableIndex() {
    const {
      length
    } = this;
    const firstEmptyIndex = this.getFirstEmptyIndex();
    return firstEmptyIndex === -1 ? length - 1 : firstEmptyIndex;
  }
  /**
   * Updates the tabIndexes for the input boxes.
   * This is used to ensure that the correct input is
   * focused when the user navigates using the tab key.
   */
  updateTabIndexes() {
    const {
      inputRefs,
      inputValues,
      length
    } = this;
    // Find first empty index after any filled boxes
    let firstEmptyIndex = -1;
    for (let i = 0; i < length; i++) {
      if (!inputValues[i] || inputValues[i] === '') {
        firstEmptyIndex = i;
        break;
      }
    }
    // Update tabIndex and aria-hidden for all inputs
    inputRefs.forEach((input, index) => {
      const shouldBeTabbable = firstEmptyIndex === -1 ? index === length - 1 : firstEmptyIndex === index;
      input.tabIndex = shouldBeTabbable ? 0 : -1;
      // If the input is empty and not the first empty input,
      // it should be hidden from screen readers.
      const isEmpty = !inputValues[index] || inputValues[index] === '';
      input.setAttribute('aria-hidden', isEmpty && !shouldBeTabbable ? 'true' : 'false');
    });
  }
  /**
   * Determines if a separator should be shown for a given index by
   * checking if the index is included in the parsed separators array.
   */
  showSeparator(index) {
    const {
      length
    } = this;
    return this.parsedSeparators.includes(index + 1) && index < length - 1;
  }
  render() {
    var _a, _b;
    const {
      autocapitalize,
      color,
      disabled,
      el,
      fill,
      hasFocus,
      inheritedAttributes,
      inputId,
      inputRefs,
      inputValues,
      length,
      readonly,
      shape,
      size
    } = this;
    const mode = (0,_index_B_U9CtaY_js__WEBPACK_IMPORTED_MODULE_1__.e)(this);
    const inputmode = this.getInputmode();
    const tabbableIndex = this.getTabbableIndex();
    const pattern = this.getPattern();
    const hasDescription = ((_b = (_a = el.querySelector('.input-otp-description')) === null || _a === void 0 ? void 0 : _a.textContent) === null || _b === void 0 ? void 0 : _b.trim()) !== '';
    return (0,_index_B_U9CtaY_js__WEBPACK_IMPORTED_MODULE_1__.h)(_index_B_U9CtaY_js__WEBPACK_IMPORTED_MODULE_1__.j, {
      key: 'df8fca036cedea0812185a02e3b655d7d76285e0',
      class: (0,_theme_DiVJyqlX_js__WEBPACK_IMPORTED_MODULE_4__.c)(color, {
        [mode]: true,
        'has-focus': hasFocus,
        [`input-otp-size-${size}`]: true,
        [`input-otp-shape-${shape}`]: true,
        [`input-otp-fill-${fill}`]: true,
        'input-otp-disabled': disabled,
        'input-otp-readonly': readonly
      })
    }, (0,_index_B_U9CtaY_js__WEBPACK_IMPORTED_MODULE_1__.h)("div", Object.assign({
      key: '831be3f939cf037f0eb8d7e37e0afd4ef9a3c2c5',
      role: "group",
      "aria-label": "One-time password input",
      class: "input-otp-group"
    }, inheritedAttributes), Array.from({
      length
    }).map((_, index) => (0,_index_B_U9CtaY_js__WEBPACK_IMPORTED_MODULE_1__.h)(_index_B_U9CtaY_js__WEBPACK_IMPORTED_MODULE_1__.F, null, (0,_index_B_U9CtaY_js__WEBPACK_IMPORTED_MODULE_1__.h)("div", {
      class: "native-wrapper"
    }, (0,_index_B_U9CtaY_js__WEBPACK_IMPORTED_MODULE_1__.h)("input", {
      class: "native-input",
      id: `${inputId}-${index}`,
      "aria-label": `Input ${index + 1} of ${length}`,
      type: "text",
      autoCapitalize: autocapitalize,
      inputmode: inputmode,
      pattern: pattern,
      disabled: disabled,
      readOnly: readonly,
      tabIndex: index === tabbableIndex ? 0 : -1,
      value: inputValues[index] || '',
      autocomplete: "one-time-code",
      ref: el => inputRefs[index] = el,
      onInput: this.onInput(index),
      onBlur: this.onBlur,
      onFocus: this.onFocus(index),
      onKeyDown: this.onKeyDown(index),
      onPaste: this.onPaste
    })), this.showSeparator(index) && (0,_index_B_U9CtaY_js__WEBPACK_IMPORTED_MODULE_1__.h)("div", {
      class: "input-otp-separator"
    })))), (0,_index_B_U9CtaY_js__WEBPACK_IMPORTED_MODULE_1__.h)("div", {
      key: '5311fedc34f7af3efd5f69e5a3d768055119c4f1',
      class: {
        'input-otp-description': true,
        'input-otp-description-hidden': !hasDescription
      }
    }, (0,_index_B_U9CtaY_js__WEBPACK_IMPORTED_MODULE_1__.h)("slot", {
      key: '9e8afa2f7fa76c3092582dc27770fdf565a1b9ba'
    })));
  }
  get el() {
    return (0,_index_B_U9CtaY_js__WEBPACK_IMPORTED_MODULE_1__.k)(this);
  }
  static get watchers() {
    return {
      "value": ["valueChanged"],
      "separators": ["processSeparators"],
      "length": ["processSeparators"]
    };
  }
};
let inputIds = 0;
InputOTP.style = {
  ios: inputOtpIosCss,
  md: inputOtpMdCss
};


/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibm9kZV9tb2R1bGVzX2lvbmljX2NvcmVfZGlzdF9lc21faW9uLWlucHV0LW90cF9lbnRyeV9qcy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ21LO0FBQ2hHO0FBQ3BCO0FBQ2U7QUFFOUQsTUFBTW9CLGNBQWMsR0FBRyxnMU1BQWcxTTtBQUV2Mk0sTUFBTUMsYUFBYSxHQUFHLHN0TUFBc3RNO0FBRTV1TSxNQUFNQyxRQUFRLEdBQUcsTUFBTTtFQUNuQkMsV0FBV0EsQ0FBQ0MsT0FBTyxFQUFFO0lBQ2pCdkIscURBQWdCLENBQUMsSUFBSSxFQUFFdUIsT0FBTyxDQUFDO0lBQy9CLElBQUksQ0FBQ0MsUUFBUSxHQUFHdEIscURBQVcsQ0FBQyxJQUFJLEVBQUUsVUFBVSxFQUFFLENBQUMsQ0FBQztJQUNoRCxJQUFJLENBQUN1QixTQUFTLEdBQUd2QixxREFBVyxDQUFDLElBQUksRUFBRSxXQUFXLEVBQUUsQ0FBQyxDQUFDO0lBQ2xELElBQUksQ0FBQ3dCLFdBQVcsR0FBR3hCLHFEQUFXLENBQUMsSUFBSSxFQUFFLGFBQWEsRUFBRSxDQUFDLENBQUM7SUFDdEQsSUFBSSxDQUFDeUIsT0FBTyxHQUFHekIscURBQVcsQ0FBQyxJQUFJLEVBQUUsU0FBUyxFQUFFLENBQUMsQ0FBQztJQUM5QyxJQUFJLENBQUMwQixRQUFRLEdBQUcxQixxREFBVyxDQUFDLElBQUksRUFBRSxVQUFVLEVBQUUsQ0FBQyxDQUFDO0lBQ2hELElBQUksQ0FBQzJCLG1CQUFtQixHQUFHLENBQUMsQ0FBQztJQUM3QixJQUFJLENBQUNDLFNBQVMsR0FBRyxFQUFFO0lBQ25CLElBQUksQ0FBQ0MsT0FBTyxHQUFHLGlCQUFpQkMsUUFBUSxFQUFFLEVBQUU7SUFDNUMsSUFBSSxDQUFDQyxnQkFBZ0IsR0FBRyxFQUFFO0lBQzFCO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7SUFDUSxJQUFJLENBQUNDLG9CQUFvQixHQUFHLEtBQUs7SUFDakMsSUFBSSxDQUFDQyxX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T0FBTyxFQUFFLElBQUksQ0FBQ0E7SUFBUSxDQUFDLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQ3FELGFBQWEsQ0FBQ3JHLEtBQUssQ0FBQyxJQUFJeEMscURBQUMsQ0FBQyxLQUFLLEVBQUU7TUFBRXFKLEtBQUssRUFBRTtJQUFzQixDQUFDLENBQUMsQ0FBRSxDQUFDLENBQUMsRUFBRXJKLHFEQUFDLENBQUMsS0FBSyxFQUFFO01BQUVvRSxHQUFHLEVBQUUsMENBQTBDO01BQUVpRixLQUFLLEVBQUU7UUFDdDdCLHVCQUF1QixFQUFFLElBQUk7UUFDN0IsOEJBQThCLEVBQUUsQ0FBQ0o7TUFDckM7SUFBRSxDQUFDLEVBQUVqSixxREFBQyxDQUFDLE1BQU0sRUFBRTtNQUFFb0UsR0FBRyxFQUFFO0lBQTJDLENBQUMsQ0FBQyxDQUFDLENBQUM7RUFDN0U7RUFDQSxJQUFJUixFQUFFQSxDQUFBLEVBQUc7SUFBRSxPQUFPdEQscURBQVUsQ0FBQyxJQUFJLENBQUM7RUFBRTtFQUNwQyxXQUFXd0osUUFBUUEsQ0FBQSxFQUFHO0lBQUUsT0FBTztNQUMzQixPQUFPLEVBQUUsQ0FBQyxjQUFjLENBQUM7TUFDekIsWUFBWSxFQUFFLENBQUMsbUJBQW1CLENBQUM7TUFDbkMsUUFBUSxFQUFFLENBQUMsbUJBQW1CO0lBQ2xDLENBQUM7RUFBRTtBQUNQLENBQUM7QUFDRCxJQUFJckksUUFBUSxHQUFHLENBQUM7QUFDaEJYLFFBQVEsQ0FBQ2lKLEtBQUssR0FBRztFQUNiQyxHQUFHLEVBQUVwSixjQUFjO0VBQ25CcUosRUFBRSxFQUFFcEo7QUFDUixDQUFDIiwic291cmNlcyI6WyIuL25vZGVfbW9kdWxlcy9AaW9uaWMvY29yZS9kaXN0L2VzbS9pb24taW5wdXQtb3RwLmVudHJ5LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qIVxuICogKEMpIElvbmljIGh0dHA6Ly9pb25pY2ZyYW1ld29yay5jb20gLSBNSVQgTGljZW5zZVxuICovXG5pbXBvcnQgeyByIGFzIHJlZ2lzdGVySW5zdGFuY2UsIGQgYXMgY3JlYXRlRXZlbnQsIG0gYXMgcHJpbnRJb25XYXJuaW5nLCBlIGFzIGdldElvbk1vZGUsIGgsIEYgYXMgRnJhZ21lbnQsIGogYXMgSG9zdCwgayBhcyBnZXRFbGVtZW50IH0gZnJvbSAnLi9pbmRleC1CX1U5Q3RhWS5qcyc7XG5pbXBvcnQgeyBpIGFzIGluaGVyaXRBcmlhQXR0cmlidXRlcyB9IGZyb20gJy4vaGVscGVycy0xTzREMmI3eS5qcyc7XG5pbXBvcnQgeyBpIGFzIGlzUlRMIH0gZnJvbSAnLi9kaXItQzUzZmVhZ0QuanMnO1xuaW1wb3J0IHsgYyBhcyBjcmVhdGVDb2xvckNsYXNzZXMgfSBmcm9tICcuL3RoZW1lLURpVkp5cWxYLmpzJztcblxuY29uc3QgaW5wdXRPdHBJb3NDc3MgPSBcIi5zYy1pb24taW5wdXQtb3RwLWlvcy1oey0tbWFyZ2luLXRvcDowOy0tbWFyZ2luLWVuZDowOy0tbWFyZ2luLWJvdHRvbTowOy0tbWFyZ2luLXN0YXJ0OjA7LS1wYWRkaW5nLXRvcDoxNnB4Oy0tcGFkZGluZy1lbmQ6MDstLXBhZGRpbmctYm90dG9tOjE2cHg7LS1wYWRkaW5nLXN0YXJ0OjA7LS1jb2xvcjppbml0aWFsOy0tbWluLXdpZHRoOjQwcHg7LS1zZXBhcmF0b3Itd2lkdGg6OHB4Oy0tc2VwYXJhdG9yLWhlaWdodDp2YXIoLS1zZXBhcmF0b3Itd2lkdGgpOy0tc2VwYXJhdG9yLWJvcmRlci1yYWRpdXM6OTk5cHg7LS1zZXBhcmF0b3ItY29sb3I6dmFyKC0taW9uLWNvbG9yLXN0ZXAtMTUwLCB2YXIoLS1pb24tYmFja2dyb3VuZC1jb2xvci1zdGVwLTE1MCwgI2Q5ZDlkOSkpOy0taGlnaGxpZ2h0LWNvbG9yLWZvY3VzZWQ6dmFyKC0taW9uLWNvbG9yLXByaW1hcnksICMwMDU0ZTkpOy0taGlnaGxpZ2h0LWNvbG9yLXZhbGlkOnZhcigtLWlvbi1jb2xvci1zdWNjZXNzLCAjMmRkNTViKTstLWhpZ2hsaWdodC1jb2xvci1pbnZhbGlkOnZhcigtLWlvbi1jb2xvci1kYW5nZXIsICNjNTAwMGYpOy0taGlnaGxpZ2h0LWNvbG9yOnZhcigtLWhpZ2hsaWdodC1jb2xvci1mb2N1c2VkKTtkaXNwbGF5OmJsb2NrO3Bvc2l0aW9uOnJlbGF0aXZlO2ZvbnQtc2l6ZTowLjg3NXJlbX0uaW5wdXQtb3RwLWdyb3VwLnNjLWlvbi1pbnB1dC1vdHAtaW9zey13ZWJraXQtbWFyZ2luLXN0YXJ0OnZhcigtLW1hcmdpbi1zdGFydCk7bWFyZ2luLWlubGluZS1zdGFydDp2YXIoLS1tYXJnaW4tc3RhcnQpOy13ZWJraXQtbWFyZ2luLWVuZDp2YXIoLS1tYXJnaW4tZW5kKTttYXJnaW4taW5saW5lLWVuZDp2YXIoLS1tYXJnaW4tZW5kKTttYXJnaW4tdG9wOnZhcigtLW1hcmdpbi10b3ApO21hcmdpbi1ib3R0b206dmFyKC0tbWFyZ2luLWJvdHRvbSk7LXdlYmtpdC1wYWRkaW5nLXN0YXJ0OnZhcigtLXBhZGRpbmctc3RhcnQpO3BhZGRpbmctaW5saW5lLXN0YXJ0OnZhcigtLXBhZGRpbmctc3RhcnQpOy13ZWJraXQtcGFkZGluZy1lbmQ6dmFyKC0tcGFkZGluZy1lbmQpO3BhZGRpbmctaW5saW5lLWVuZDp2YXIoLS1wYWRkaW5nLWVuZCk7cGFkZGluZy10b3A6dmFyKC0tcGFkZGluZy10b3ApO3BhZGRpbmctYm90dG9tOnZhcigtLXBhZGRpbmctYm90dG9tKTtkaXNwbGF5Oi1tcy1mbGV4Ym94O2Rpc3BsYXk6ZmxleDstbXMtZmxleC1hbGlnbjpjZW50ZXI7YWxpZ24taXRlbXM6Y2VudGVyOy1tcy1mbGV4LXBhY2s6Y2VudGVyO2p1c3RpZnktY29udGVudDpjZW50ZXJ9Lm5hdGl2ZS13cmFwcGVyLnNjLWlvbi1pbnB1dC1vdHAtaW9ze2Rpc3BsYXk6LW1zLWZsZXhib3g7ZGlzcGxheTpmbGV4Oy1tcy1mbGV4LWFsaWduOmNlbnRlcjthbGlnbi1pdGVtczpjZW50ZXI7LW1zLWZsZXgtcGFjazpjZW50ZXI7anVzdGlmeS1jb250ZW50OmNlbnRlcjttaW4td2lkdGg6dmFyKC0tbWluLXdpZHRoKX0ubmF0aXZlLWlucHV0LnNjLWlvbi1pbnB1dC1vdHAtaW9ze2JvcmRlci1yYWRpdXM6dmFyKC0tYm9yZGVyLXJhZGl1cyk7d2lkdGg6dmFyKC0td2lkdGgpO21pbi13aWR0aDppbmhlcml0O2hlaWdodDp2YXIoLS1oZWlnaHQpO2JvcmRlci13aWR0aDp2YXIoLS1ib3JkZXItd2lkdGgpO2JvcmRlci1zdHlsZTpzb2xpZDtib3JkZXItY29sb3I6dmFyKC0tYm9yZGVyLWNvbG9yKTtiYWNrZ3JvdW5kOnZhcigtLWJhY2tncm91bmQpO2NvbG9yOnZhcigtLWNvbG9yKTtmb250LXNpemU6aW5oZXJpdDt0ZXh0LWFsaWduOmNlbnRlcjstd2Via2l0LWFwcGVhcmFuY2U6bm9uZTstbW96LWFwcGVhcmFuY2U6bm9uZTthcHBlYXJhbmNlOm5vbmV9Lmhhcy1mb2N1cy5zYy1pb24taW5wdXQtb3RwLWlvcy1oIC5uYXRpdmUtaW5wdXQuc2MtaW9uLWlucHV0LW90cC1pb3N7Y2FyZXQtY29sb3I6dmFyKC0taGlnaGxpZ2h0LWNvbG9yKX0uaW5wdXQtb3RwLWRlc2NyaXB0aW9uLnNjLWlvbi1pbnB1dC1vdHAtaW9ze2NvbG9yOnZhcigtLWlvbi1jb2xvci1zdGVwLTcwMCwgdmFyKC0taW9uLXRleHQtY29sb3Itc3RlcC0zMDAsICM0ZDRkNGQpKTtmb250LXNpemU6MC43NXJlbTtsaW5lLWhlaWdodDoxLjI1cmVtO3RleHQtYWxpZ246Y2VudGVyfS5pbnB1dC1vdHAtZGVzY3JpcHRpb24taGlkZGVuLnNjLWlvbi1pbnB1dC1vdHAtaW9ze2Rpc3BsYXk6bm9uZX0uaW5wdXQtb3RwLXNlcGFyYXRvci5zYy1pb24taW5wdXQtb3RwLWlvc3tib3JkZXItcmFkaXVzOnZhcigtLXNlcGFyYXRvci1ib3JkZXItcmFkaXVzKTstbXMtZmxleC1uZWdhdGl2ZTowO2ZsZXgtc2hyaW5rOjA7d2lkdGg6dmFyKC0tc2VwYXJhdG9yLXdpZHRoKTtoZWlnaHQ6dmFyKC0tc2VwYXJhdG9yLWhlaWdodCk7YmFja2dyb3VuZDp2YXIoLS1zZXBhcmF0b3ItY29sb3IpfS5pbnB1dC1vdHAtc2l6ZS1zbWFsbC5zYy1pb24taW5wdXQtb3RwLWlvcy1oey0td2lkdGg6NDBweDstLWhlaWdodDo0MHB4fS5pbnB1dC1vdHAtc2l6ZS1zbWFsbC5zYy1pb24taW5wdXQtb3RwLWlvcy1oIC5pbnB1dC1vdHAtZ3JvdXAuc2MtaW9uLWlucHV0LW90cC1pb3N7Z2FwOjhweH0uaW5wdXQtb3RwLXNpemUtbWVkaXVtLnNjLWlvbi1pbnB1dC1vdHAtaW9zLWh7LS13aWR0aDo0OHB4Oy0taGVpZ2h0OjQ4cHh9LmlucHV0LW90cC1zaXplLWxhcmdlLnNjLWlvbi1pbnB1dC1vdHAtaW9zLWh7LS13aWR0aDo1NnB4Oy0taGVpZ2h0OjU2cHh9LmlucHV0LW90cC1zaXplLW1lZGl1bS5zYy1pb24taW5wdXQtb3RwLWlvcy1oIC5pbnB1dC1vdHAtZ3JvdXAuc2MtaW9uLWlucHV0LW90cC1pb3MsLmlucHV0LW90cC1zaXplLWxhcmdlLnNjLWlvbi1pbnB1dC1vdHAtaW9zLWggLmlucHV0LW90cC1ncm91cC5zYy1pb24taW5wdXQtb3RwLWlvc3tnYXA6MTJweH0uaW5wdXQtb3RwLXNoYXBlLXJvdW5kLnNjLWlvbi1pbnB1dC1vdHAtaW9zLWh7LS1ib3JkZXItcmFkaXVzOjE2cHh9LmlucHV0LW90cC1zaGFwZS1zb2Z0LnNjLWlvbi1pbnB1dC1vdHAtaW9zLWh7LS1ib3JkZXItcmFkaXVzOjhweH0uaW5wdXQtb3RwLXNoYXBlLXJlY3Rhbmd1bGFyLnNjLWlvbi1pbnB1dC1vdHAtaW9zLWh7LS1ib3JkZXItcmFkaXVzOjB9LmlucHV0LW90cC1maWxsLW91dGxpbmUuc2MtaW9uLWlucHV0LW90cC1pb3MtaHstLWJhY2tncm91bmQ6bm9uZX0uaW5wdXQtb3RwLWZpbGwtc29saWQuc2MtaW9uLWlucHV0LW90cC1pb3MtaHstLWJvcmRlci1jb2xvcjp2YXIoLS1pb24tY29sb3Itc3RlcC01MCwgdmFyKC0taW9uLWJhY2tncm91bmQtY29sb3Itc3RlcC01MCwgI2YyZjJmMikpOy0tYmFja2dyb3VuZDp2YXIoLS1pb24tY29sb3Itc3RlcC01MCwgdmFyKC0taW9uLWJhY2tncm91bmQtY29sb3Itc3RlcC01MCwgI2YyZjJmMikpfS5pbnB1dC1vdHAtZGlzYWJsZWQuc2MtaW9uLWlucHV0LW90cC1pb3MtaHstLWNvbG9yOnZhcigtLWlvbi1jb2xvci1zdGVwLTM1MCwgdmFyKC0taW9uLXRleHQtY29sb3Itc3RlcC02NTAsICNhNmE2YTYpKX0uaW5wdXQtb3RwLWZpbGwtb3V0bGluZS5pbnB1dC1vdHAtZGlzYWJsZWQuc2MtaW9uLWlucHV0LW90cC1pb3MtaHstLWJhY2tncm91bmQ6dmFyKC0taW9uLWNvbG9yLXN0ZXAtNTAsIHZhcigtLWlvbi1iYWNrZ3JvdW5kLWNvbG9yLXN0ZXAtNTAsICNmMmYyZjIpKTstLWJvcmRlci1jb2xvcjp2YXIoLS1pb24tY29sb3Itc3RlcC0xMDAsIHZhcigtLWlvbi1iYWNrZ3JvdW5kLWNvbG9yLXN0ZXAtMTAwLCAjZTZlNmU2KSl9LmlucHV0LW90cC1kaXNhYmxlZC5zYy1pb24taW5wdXQtb3RwLWlvcy1oLC5pbnB1dC1vdHAtZGlzYWJsZWQuc2MtaW9uLWlucHV0LW90cC1pb3MtaCAubmF0aXZlLWlucHV0LnNjLWlvbi1pbnB1dC1vdHAtaW9zOmRpc2FibGVke2N1cnNvcjpub3QtYWxsb3dlZH0uaGFzLWZvY3VzLnNjLWlvbi1pbnB1dC1vdHAtaW9zLWggLm5hdGl2ZS1pbnB1dC5zYy1pb24taW5wdXQtb3RwLWlvczpmb2N1c3stLWJvcmRlci1jb2xvcjp2YXIoLS1oaWdobGlnaHQtY29sb3IpO291dGxpbmU6bm9uZX0uaW5wdXQtb3RwLWZpbGwtb3V0bGluZS5pbnB1dC1vdHAtcmVhZG9ubHkuc2MtaW9uLWlucHV0LW90cC1pb3MtaHstLWJhY2tncm91bmQ6dmFyKC0taW9uLWNvbG9yLXN0ZXAtNTAsIHZhcigtLWlvbi1iYWNrZ3JvdW5kLWNvbG9yLXN0ZXAtNTAsICNmMmYyZjIpKX0uaW5wdXQtb3RwLWZpbGwtc29saWQuaW5wdXQtb3RwLWRpc2FibGVkLnNjLWlvbi1pbnB1dC1vdHAtaW9zLWgsLmlucHV0LW90cC1maWxsLXNvbGlkLmlucHV0LW90cC1yZWFkb25seS5zYy1pb24taW5wdXQtb3RwLWlvcy1oey0tYm9yZGVyLWNvbG9yOnZhcigtLWlvbi1jb2xvci1zdGVwLTEwMCwgdmFyKC0taW9uLWJhY2tncm91bmQtY29sb3Itc3RlcC0xMDAsICNlNmU2ZTYpKTstLWJhY2tncm91bmQ6dmFyKC0taW9uLWNvbG9yLXN0ZXAtMTAwLCB2YXIoLS1pb24tYmFja2dyb3VuZC1jb2xvci1zdGVwLTEwMCwgI2U2ZTZlNikpfS5pb24tdG91Y2hlZC5pb24taW52YWxpZC5zYy1pb24taW5wdXQtb3RwLWlvcy1oey0taGlnaGxpZ2h0LWNvbG9yOnZhcigtLWhpZ2hsaWdodC1jb2xvci1pbnZhbGlkKX0uaW9uLXZhbGlkLnNjLWlvbi1pbnB1dC1vdHAtaW9zLWh7LS1oaWdobGlnaHQtY29sb3I6dmFyKC0taGlnaGxpZ2h0LWNvbG9yLXZhbGlkKX0uaGFzLWZvY3VzLmlvbi12YWxpZC5zYy1pb24taW5wdXQtb3RwLWlvcy1oLC5pb24tdG91Y2hlZC5pb24taW52YWxpZC5zYy1pb24taW5wdXQtb3RwLWlvcy1oey0tYm9yZGVyLWNvbG9yOnZhcigtLWhpZ2hsaWdodC1jb2xvcil9Lmlvbi1jb2xvci5zYy1pb24taW5wdXQtb3RwLWlvcy1oey0taGlnaGxpZ2h0LWNvbG9yLWZvY3VzZWQ6dmFyKC0taW9uLWNvbG9yLWJhc2UpfS5pbnB1dC1vdHAtZmlsbC1vdXRsaW5lLmlvbi1jb2xvci5zYy1pb24taW5wdXQtb3RwLWlvcy1oIC5uYXRpdmUtaW5wdXQuc2MtaW9uLWlucHV0LW90cC1pb3MsLmlucHV0LW90cC1maWxsLXNvbGlkLmlvbi1jb2xvci5zYy1pb24taW5wdXQtb3RwLWlvcy1oIC5uYXRpdmUtaW5wdXQuc2MtaW9uLWlucHV0LW90cC1pb3M6Zm9jdXN7Ym9yZGVyLWNvbG9yOnJnYmEodmFyKC0taW9uLWNvbG9yLWJhc2UtcmdiKSwgMC42KX0uaW5wdXQtb3RwLWZpbGwtb3V0bGluZS5pb24tY29sb3IuaW9uLWludmFsaWQuc2MtaW9uLWlucHV0LW90cC1pb3MtaCAubmF0aXZlLWlucHV0LnNjLWlvbi1pbnB1dC1vdHAtaW9zLC5pbnB1dC1vdHAtZmlsbC1zb2xpZC5pb24tY29sb3IuaW9uLWludmFsaWQuc2MtaW9uLWlucHV0LW90cC1pb3MtaCAubmF0aXZlLWlucHV0LnNjLWlvbi1pbnB1dC1vdHAtaW9zLC5pbnB1dC1vdHAtZmlsbC1vdXRsaW5lLmlvbi1jb2xvci5oYXMtZm9jdXMuaW9uLWludmFsaWQuc2MtaW9uLWlucHV0LW90cC1pb3MtaCAubmF0aXZlLWlucHV0LnNjLWlvbi1pbnB1dC1vdHAtaW9zLC5pbnB1dC1vdHAtZmlsbC1zb2xpZC5pb24tY29sb3IuaGFzLWZvY3VzLmlvbi1pbnZhbGlkLnNjLWlvbi1pbnB1dC1vdHAtaW9zLWggLm5hdGl2ZS1pbnB1dC5zYy1pb24taW5wdXQtb3RwLWlvc3tib3JkZXItY29sb3I6dmFyKC0taW9uLWNvbG9yLWRhbmdlciwgI2M1MDAwZil9LmlucHV0LW90cC1maWxsLW91dGxpbmUuaW9uLWNvbG9yLmlvbi12YWxpZC5zYy1pb24taW5wdXQtb3RwLWlvcy1oIC5uYXRpdmUtaW5wdXQuc2MtaW9uLWlucHV0LW90cC1pb3MsLmlucHV0LW90cC1maWxsLXNvbGlkLmlvbi1jb2xvci5pb24tdmFsaWQuc2MtaW9uLWlucHV0LW90cC1pb3MtaCAubmF0aXZlLWlucHV0LnNjLWlvbi1pbnB1dC1vdHAtaW9zLC5pbnB1dC1vdHAtZmlsbC1vdXRsaW5lLmlvbi1jb2xvci5oYXMtZm9jdXMuaW9uLXZhbGlkLnNjLWlvbi1pbnB1dC1vdHAtaW9zLWggLm5hdGl2ZS1pbnB1dC5zYy1pb24taW5wdXQtb3RwLWlvcywuaW5wdXQtb3RwLWZpbGwtc29saWQuaW9uLWNvbG9yLmhhcy1mb2N1cy5pb24tdmFsaWQuc2MtaW9uLWlucHV0LW90cC1pb3MtaCAubmF0aXZlLWlucHV0LnNjLWlvbi1pbnB1dC1vdHAtaW9ze2JvcmRlci1jb2xvcjp2YXIoLS1pb24tY29sb3Itc3VjY2VzcywgIzJkZDU1Yil9LmlucHV0LW90cC1maWxsLW91dGxpbmUuaW5wdXQtb3RwLWRpc2FibGVkLmlvbi1jb2xvci5zYy1pb24taW5wdXQtb3RwLWlvcy1oIC5uYXRpdmUtaW5wdXQuc2MtaW9uLWlucHV0LW90cC1pb3N7Ym9yZGVyLWNvbG9yOnJnYmEodmFyKC0taW9uLWNvbG9yLWJhc2UtcmdiKSwgMC4zKX0uc2MtaW9uLWlucHV0LW90cC1pb3MtaHstLWJvcmRlci13aWR0aDowLjU1cHh9Lmhhcy1mb2N1cy5zYy1pb24taW5wdXQtb3RwLWlvcy1oIC5uYXRpdmUtaW5wdXQuc2MtaW9uLWlucHV0LW90cC1pb3M6Zm9jdXN7LS1ib3JkZXItd2lkdGg6MXB4fS5pbnB1dC1vdHAtZmlsbC1vdXRsaW5lLnNjLWlvbi1pbnB1dC1vdHAtaW9zLWh7LS1ib3JkZXItY29sb3I6dmFyKC0taW9uLWl0ZW0tYm9yZGVyLWNvbG9yLCB2YXIoLS1pb24tYm9yZGVyLWNvbG9yLCB2YXIoLS1pb24tY29sb3Itc3RlcC0yNTAsIHZhcigtLWlvbi1iYWNrZ3JvdW5kLWNvbG9yLXN0ZXAtMjUwLCAjYzhjN2NjKSkpKX1cIjtcblxuY29uc3QgaW5wdXRPdHBNZENzcyA9IFwiLnNjLWlvbi1pbnB1dC1vdHAtbWQtaHstLW1hcmdpbi10b3A6MDstLW1hcmdpbi1lbmQ6MDstLW1hcmdpbi1ib3R0b206MDstLW1hcmdpbi1zdGFydDowOy0tcGFkZGluZy10b3A6MTZweDstLXBhZGRpbmctZW5kOjA7LS1wYWRkaW5nLWJvdHRvbToxNnB4Oy0tcGFkZGluZy1zdGFydDowOy0tY29sb3I6aW5pdGlhbDstLW1pbi13aWR0aDo0MHB4Oy0tc2VwYXJhdG9yLXdpZHRoOjhweDstLXNlcGFyYXRvci1oZWlnaHQ6dmFyKC0tc2VwYXJhdG9yLXdpZHRoKTstLXNlcGFyYXRvci1ib3JkZXItcmFkaXVzOjk5OXB4Oy0tc2VwYXJhdG9yLWNvbG9yOnZhcigtLWlvbi1jb2xvci1zdGVwLTE1MCwgdmFyKC0taW9uLWJhY2tncm91bmQtY29sb3Itc3RlcC0xNTAsICNkOWQ5ZDkpKTstLWhpZ2hsaWdodC1jb2xvci1mb2N1c2VkOnZhcigtLWlvbi1jb2xvci1wcmltYXJ5LCAjMDA1NGU5KTstLWhpZ2hsaWdodC1jb2xvci12YWxpZDp2YXIoLS1pb24tY29sb3Itc3VjY2VzcywgIzJkZDU1Yik7LS1oaWdobGlnaHQtY29sb3ItaW52YWxpZDp2YXIoLS1pb24tY29sb3ItZGFuZ2VyLCAjYzUwMDBmKTstLWhpZ2hsaWdodC1jb2xvcjp2YXIoLS1oaWdobGlnaHQtY29sb3ItZm9jdXNlZCk7ZGlzcGxheTpibG9jaztwb3NpdGlvbjpyZWxhdGl2ZTtmb250LXNpemU6MC44NzVyZW19LmlucHV0LW90cC1ncm91cC5zYy1pb24taW5wdXQtb3RwLW1key13ZWJraXQtbWFyZ2luLXN0YXJ0OnZhcigtLW1hcmdpbi1zdGFydCk7bWFyZ2luLWlubGluZS1zdGFydDp2YXIoLS1tYXJnaW4tc3RhcnQpOy13ZWJraXQtbWFyZ2luLWVuZDp2YXIoLS1tYXJnaW4tZW5kKTttYXJnaW4taW5saW5lLWVuZDp2YXIoLS1tYXJnaW4tZW5kKTttYXJnaW4tdG9wOnZhcigtLW1hcmdpbi10b3ApO21hcmdpbi1ib3R0b206dmFyKC0tbWFyZ2luLWJvdHRvbSk7LXdlYmtpdC1wYWRkaW5nLXN0YXJ0OnZhcigtLXBhZGRpbmctc3RhcnQpO3BhZGRpbmctaW5saW5lLXN0YXJ0OnZhcigtLXBhZGRpbmctc3RhcnQpOy13ZWJraXQtcGFkZGluZy1lbmQ6dmFyKC0tcGFkZGluZy1lbmQpO3BhZGRpbmctaW5saW5lLWVuZDp2YXIoLS1wYWRkaW5nLWVuZCk7cGFkZGluZy10b3A6dmFyKC0tcGFkZGluZy10b3ApO3BhZGRpbmctYm90dG9tOnZhcigtLXBhZGRpbmctYm90dG9tKTtkaXNwbGF5Oi1tcy1mbGV4Ym94O2Rpc3BsYXk6ZmxleDstbXMtZmxleC1hbGlnbjpjZW50ZXI7YWxpZ24taXRlbXM6Y2VudGVyOy1tcy1mbGV4LXBhY2s6Y2VudGVyO2p1c3RpZnktY29udGVudDpjZW50ZXJ9Lm5hdGl2ZS13cmFwcGVyLnNjLWlvbi1pbnB1dC1vdHAtbWR7ZGlzcGxheTotbXMtZmxleGJveDtkaXNwbGF5OmZsZXg7LW1zLWZsZXgtYWxpZ246Y2VudGVyO2FsaWduLWl0ZW1zOmNlbnRlcjstbXMtZmxleC1wYWNrOmNlbnRlcjtqdXN0aWZ5LWNvbnRlbnQ6Y2VudGVyO21pbi13aWR0aDp2YXIoLS1taW4td2lkdGgpfS5uYXRpdmUtaW5wdXQuc2MtaW9uLWlucHV0LW90cC1tZHtib3JkZXItcmFkaXVzOnZhcigtLWJvcmRlci1yYWRpdXMpO3dpZHRoOnZhcigtLXdpZHRoKTttaW4td2lkdGg6aW5oZXJpdDtoZWlnaHQ6dmFyKC0taGVpZ2h0KTtib3JkZXItd2lkdGg6dmFyKC0tYm9yZGVyLXdpZHRoKTtib3JkZXItc3R5bGU6c29saWQ7Ym9yZGVyLWNvbG9yOnZhcigtLWJvcmRlci1jb2xvcik7YmFja2dyb3VuZDp2YXIoLS1iYWNrZ3JvdW5kKTtjb2xvcjp2YXIoLS1jb2xvcik7Zm9udC1zaXplOmluaGVyaXQ7dGV4dC1hbGlnbjpjZW50ZXI7LXdlYmtpdC1hcHBlYXJhbmNlOm5vbmU7LW1vei1hcHBlYXJhbmNlOm5vbmU7YXBwZWFyYW5jZTpub25lfS5oYXMtZm9jdXMuc2MtaW9uLWlucHV0LW90cC1tZC1oIC5uYXRpdmUtaW5wdXQuc2MtaW9uLWlucHV0LW90cC1tZHtjYXJldC1jb2xvcjp2YXIoLS1oaWdobGlnaHQtY29sb3IpfS5pbnB1dC1vdHAtZGVzY3JpcHRpb24uc2MtaW9uLWlucHV0LW90cC1tZHtjb2xvcjp2YXIoLS1pb24tY29sb3Itc3RlcC03MDAsIHZhcigtLWlvbi10ZXh0LWNvbG9yLXN0ZXAtMzAwLCAjNGQ0ZDRkKSk7Zm9udC1zaXplOjAuNzVyZW07bGluZS1oZWlnaHQ6MS4yNXJlbTt0ZXh0LWFsaWduOmNlbnRlcn0uaW5wdXQtb3RwLWRlc2NyaXB0aW9uLWhpZGRlbi5zYy1pb24taW5wdXQtb3RwLW1ke2Rpc3BsYXk6bm9uZX0uaW5wdXQtb3RwLXNlcGFyYXRvci5zYy1pb24taW5wdXQtb3RwLW1ke2JvcmRlci1yYWRpdXM6dmFyKC0tc2VwYXJhdG9yLWJvcmRlci1yYWRpdXMpOy1tcy1mbGV4LW5lZ2F0aXZlOjA7ZmxleC1zaHJpbms6MDt3aWR0aDp2YXIoLS1zZXBhcmF0b3Itd2lkdGgpO2hlaWdodDp2YXIoLS1zZXBhcmF0b3ItaGVpZ2h0KTtiYWNrZ3JvdW5kOnZhcigtLXNlcGFyYXRvci1jb2xvcil9LmlucHV0LW90cC1zaXplLXNtYWxsLnNjLWlvbi1pbnB1dC1vdHAtbWQtaHstLXdpZHRoOjQwcHg7LS1oZWlnaHQ6NDBweH0uaW5wdXQtb3RwLXNpemUtc21hbGwuc2MtaW9uLWlucHV0LW90cC1tZC1oIC5pbnB1dC1vdHAtZ3JvdXAuc2MtaW9uLWlucHV0LW90cC1tZHtnYXA6OHB4fS5pbnB1dC1vdHAtc2l6ZS1tZWRpdW0uc2MtaW9uLWlucHV0LW90cC1tZC1oey0td2lkdGg6NDhweDstLWhlaWdodDo0OHB4fS5pbnB1dC1vdHAtc2l6ZS1sYXJnZS5zYy1pb24taW5wdXQtb3RwLW1kLWh7LS13aWR0aDo1NnB4Oy0taGVpZ2h0OjU2cHh9LmlucHV0LW90cC1zaXplLW1lZGl1bS5zYy1pb24taW5wdXQtb3RwLW1kLWggLmlucHV0LW90cC1ncm91cC5zYy1pb24taW5wdXQtb3RwLW1kLC5pbnB1dC1vdHAtc2l6ZS1sYXJnZS5zYy1pb24taW5wdXQtb3RwLW1kLWggLmlucHV0LW90cC1ncm91cC5zYy1pb24taW5wdXQtb3RwLW1ke2dhcDoxMnB4fS5pbnB1dC1vdHAtc2hhcGUtcm91bmQuc2MtaW9uLWlucHV0LW90cC1tZC1oey0tYm9yZGVyLXJhZGl1czoxNnB4fS5pbnB1dC1vdHAtc2hhcGUtc29mdC5zYy1pb24taW5wdXQtb3RwLW1kLWh7LS1ib3JkZXItcmFkaXVzOjhweH0uaW5wdXQtb3RwLXNoYXBlLXJlY3Rhbmd1bGFyLnNjLWlvbi1pbnB1dC1vdHAtbWQtaHstLWJvcmRlci1yYWRpdXM6MH0uaW5wdXQtb3RwLWZpbGwtb3V0bGluZS5zYy1pb24taW5wdXQtb3RwLW1kLWh7LS1iYWNrZ3JvdW5kOm5vbmV9LmlucHV0LW90cC1maWxsLXNvbGlkLnNjLWlvbi1pbnB1dC1vdHAtbWQtaHstLWJvcmRlci1jb2xvcjp2YXIoLS1pb24tY29sb3Itc3RlcC01MCwgdmFyKC0taW9uLWJhY2tncm91bmQtY29sb3Itc3RlcC01MCwgI2YyZjJmMikpOy0tYmFja2dyb3VuZDp2YXIoLS1pb24tY29sb3Itc3RlcC01MCwgdmFyKC0taW9uLWJhY2tncm91bmQtY29sb3Itc3RlcC01MCwgI2YyZjJmMikpfS5pbnB1dC1vdHAtZGlzYWJsZWQuc2MtaW9uLWlucHV0LW90cC1tZC1oey0tY29sb3I6dmFyKC0taW9uLWNvbG9yLXN0ZXAtMzUwLCB2YXIoLS1pb24tdGV4dC1jb2xvci1zdGVwLTY1MCwgI2E2YTZhNikpfS5pbnB1dC1vdHAtZmlsbC1vdXRsaW5lLmlucHV0LW90cC1kaXNhYmxlZC5zYy1pb24taW5wdXQtb3RwLW1kLWh7LS1iYWNrZ3JvdW5kOnZhcigtLWlvbi1jb2xvci1zdGVwLTUwLCB2YXIoLS1pb24tYmFja2dyb3VuZC1jb2xvci1zdGVwLTUwLCAjZjJmMmYyKSk7LS1ib3JkZXItY29sb3I6dmFyKC0taW9uLWNvbG9yLXN0ZXAtMTAwLCB2YXIoLS1pb24tYmFja2dyb3VuZC1jb2xvci1zdGVwLTEwMCwgI2U2ZTZlNikpfS5pbnB1dC1vdHAtZGlzYWJsZWQuc2MtaW9uLWlucHV0LW90cC1tZC1oLC5pbnB1dC1vdHAtZGlzYWJsZWQuc2MtaW9uLWlucHV0LW90cC1tZC1oIC5uYXRpdmUtaW5wdXQuc2MtaW9uLWlucHV0LW90cC1tZDpkaXNhYmxlZHtjdXJzb3I6bm90LWFsbG93ZWR9Lmhhcy1mb2N1cy5zYy1pb24taW5wdXQtb3RwLW1kLWggLm5hdGl2ZS1pbnB1dC5zYy1pb24taW5wdXQtb3RwLW1kOmZvY3Vzey0tYm9yZGVyLWNvbG9yOnZhcigtLWhpZ2hsaWdodC1jb2xvcik7b3V0bGluZTpub25lfS5pbnB1dC1vdHAtZmlsbC1vdXRsaW5lLmlucHV0LW90cC1yZWFkb25seS5zYy1pb24taW5wdXQtb3RwLW1kLWh7LS1iYWNrZ3JvdW5kOnZhcigtLWlvbi1jb2xvci1zdGVwLTUwLCB2YXIoLS1pb24tYmFja2dyb3VuZC1jb2xvci1zdGVwLTUwLCAjZjJmMmYyKSl9LmlucHV0LW90cC1maWxsLXNvbGlkLmlucHV0LW90cC1kaXNhYmxlZC5zYy1pb24taW5wdXQtb3RwLW1kLWgsLmlucHV0LW90cC1maWxsLXNvbGlkLmlucHV0LW90cC1yZWFkb25seS5zYy1pb24taW5wdXQtb3RwLW1kLWh7LS1ib3JkZXItY29sb3I6dmFyKC0taW9uLWNvbG9yLXN0ZXAtMTAwLCB2YXIoLS1pb24tYmFja2dyb3VuZC1jb2xvci1zdGVwLTEwMCwgI2U2ZTZlNikpOy0tYmFja2dyb3VuZDp2YXIoLS1pb24tY29sb3Itc3RlcC0xMDAsIHZhcigtLWlvbi1iYWNrZ3JvdW5kLWNvbG9yLXN0ZXAtMTAwLCAjZTZlNmU2KSl9Lmlvbi10b3VjaGVkLmlvbi1pbnZhbGlkLnNjLWlvbi1pbnB1dC1vdHAtbWQtaHstLWhpZ2hsaWdodC1jb2xvcjp2YXIoLS1oaWdobGlnaHQtY29sb3ItaW52YWxpZCl9Lmlvbi12YWxpZC5zYy1pb24taW5wdXQtb3RwLW1kLWh7LS1oaWdobGlnaHQtY29sb3I6dmFyKC0taGlnaGxpZ2h0LWNvbG9yLXZhbGlkKX0uaGFzLWZvY3VzLmlvbi12YWxpZC5zYy1pb24taW5wdXQtb3RwLW1kLWgsLmlvbi10b3VjaGVkLmlvbi1pbnZhbGlkLnNjLWlvbi1pbnB1dC1vdHAtbWQtaHstLWJvcmRlci1jb2xvcjp2YXIoLS1oaWdobGlnaHQtY29sb3IpfS5pb24tY29sb3Iuc2MtaW9uLWlucHV0LW90cC1tZC1oey0taGlnaGxpZ2h0LWNvbG9yLWZvY3VzZWQ6dmFyKC0taW9uLWNvbG9yLWJhc2UpfS5pbnB1dC1vdHAtZmlsbC1vdXRsaW5lLmlvbi1jb2xvci5zYy1pb24taW5wdXQtb3RwLW1kLWggLm5hdGl2ZS1pbnB1dC5zYy1pb24taW5wdXQtb3RwLW1kLC5pbnB1dC1vdHAtZmlsbC1zb2xpZC5pb24tY29sb3Iuc2MtaW9uLWlucHV0LW90cC1tZC1oIC5uYXRpdmUtaW5wdXQuc2MtaW9uLWlucHV0LW90cC1tZDpmb2N1c3tib3JkZXItY29sb3I6cmdiYSh2YXIoLS1pb24tY29sb3ItYmFzZS1yZ2IpLCAwLjYpfS5pbnB1dC1vdHAtZmlsbC1vdXRsaW5lLmlvbi1jb2xvci5pb24taW52YWxpZC5zYy1pb24taW5wdXQtb3RwLW1kLWggLm5hdGl2ZS1pbnB1dC5zYy1pb24taW5wdXQtb3RwLW1kLC5pbnB1dC1vdHAtZmlsbC1zb2xpZC5pb24tY29sb3IuaW9uLWludmFsaWQuc2MtaW9uLWlucHV0LW90cC1tZC1oIC5uYXRpdmUtaW5wdXQuc2MtaW9uLWlucHV0LW90cC1tZCwuaW5wdXQtb3RwLWZpbGwtb3V0bGluZS5pb24tY29sb3IuaGFzLWZvY3VzLmlvbi1pbnZhbGlkLnNjLWlvbi1pbnB1dC1vdHAtbWQtaCAubmF0aXZlLWlucHV0LnNjLWlvbi1pbnB1dC1vdHAtbWQsLmlucHV0LW90cC1maWxsLXNvbGlkLmlvbi1jb2xvci5oYXMtZm9jdXMuaW9uLWludmFsaWQuc2MtaW9uLWlucHV0LW90cC1tZC1oIC5uYXRpdmUtaW5wdXQuc2MtaW9uLWlucHV0LW90cC1tZHtib3JkZXItY29sb3I6dmFyKC0taW9uLWNvbG9yLWRhbmdlciwgI2M1MDAwZil9LmlucHV0LW90cC1maWxsLW91dGxpbmUuaW9uLWNvbG9yLmlvbi12YWxpZC5zYy1pb24taW5wdXQtb3RwLW1kLWggLm5hdGl2ZS1pbnB1dC5zYy1pb24taW5wdXQtb3RwLW1kLC5pbnB1dC1vdHAtZmlsbC1zb2xpZC5pb24tY29sb3IuaW9uLXZhbGlkLnNjLWlvbi1pbnB1dC1vdHAtbWQtaCAubmF0aXZlLWlucHV0LnNjLWlvbi1pbnB1dC1vdHAtbWQsLmlucHV0LW90cC1maWxsLW91dGxpbmUuaW9uLWNvbG9yLmhhcy1mb2N1cy5pb24tdmFsaWQuc2MtaW9uLWlucHV0LW90cC1tZC1oIC5uYXRpdmUtaW5wdXQuc2MtaW9uLWlucHV0LW90cC1tZCwuaW5wdXQtb3RwLWZpbGwtc29saWQuaW9uLWNvbG9yLmhhcy1mb2N1cy5pb24tdmFsaWQuc2MtaW9uLWlucHV0LW90cC1tZC1oIC5uYXRpdmUtaW5wdXQuc2MtaW9uLWlucHV0LW90cC1tZHtib3JkZXItY29sb3I6dmFyKC0taW9uLWNvbG9yLXN1Y2Nlc3MsICMyZGQ1NWIpfS5pbnB1dC1vdHAtZmlsbC1vdXRsaW5lLmlucHV0LW90cC1kaXNhYmxlZC5pb24tY29sb3Iuc2MtaW9uLWlucHV0LW90cC1tZC1oIC5uYXRpdmUtaW5wdXQuc2MtaW9uLWlucHV0LW90cC1tZHtib3JkZXItY29sb3I6cmdiYSh2YXIoLS1pb24tY29sb3ItYmFzZS1yZ2IpLCAwLjMpfS5zYy1pb24taW5wdXQtb3RwLW1kLWh7LS1ib3JkZXItd2lkdGg6MXB4fS5oYXMtZm9jdXMuc2MtaW9uLWlucHV0LW90cC1tZC1oIC5uYXRpdmUtaW5wdXQuc2MtaW9uLWlucHV0LW90cC1tZDpmb2N1c3stLWJvcmRlci13aWR0aDoycHh9LmlucHV0LW90cC1maWxsLW91dGxpbmUuc2MtaW9uLWlucHV0LW90cC1tZC1oey0tYm9yZGVyLWNvbG9yOnZhcigtLWlvbi1jb2xvci1zdGVwLTMwMCwgdmFyKC0taW9uLWJhY2tncm91bmQtY29sb3Itc3RlcC0zMDAsICNiM2IzYjMpKX1cIjtcblxuY29uc3QgSW5wdXRPVFAgPSBjbGFzcyB7XG4gICAgY29uc3RydWN0b3IoaG9zdFJlZikge1xuICAgICAgICByZWdpc3Rlckluc3RhbmNlKHRoaXMsIGhvc3RSZWYpO1xuICAgICAgICB0aGlzLmlvbklucHV0ID0gY3JlYXRlRXZlbnQodGhpcywgXCJpb25JbnB1dFwiLCA3KTtcbiAgICAgICAgdGhpcy5pb25DaGFuZ2UgPSBjcmVhdGVFdmVudCh0aGlzLCBcImlvbkNoYW5nZVwiLCA3KTtcbiAgICAgICAgdGhpcy5pb25Db21wbGV0ZSA9IGNyZWF0ZUV2ZW50KHRoaXMsIFwiaW9uQ29tcGxldGVcIiwgNyk7XG4gICAgICAgIHRoaXMuaW9uQmx1ciA9IGNyZWF0ZUV2ZW50KHRoaXMsIFwiaW9uQmx1clwiLCA3KTtcbiAgICAgICAgdGhpcy5pb25Gb2N1cyA9IGNyZWF0ZUV2ZW50KHRoaXMsIFwiaW9uRm9jdXNcIiwgNyk7XG4gICAgICAgIHRoaXMuaW5oZXJpdGVkQXR0cmlidXRlcyA9IHt9O1xuICAgICAgICB0aGlzLmlucHV0UmVmcyA9IFtdO1xuICAgICAgICB0aGlzLmlucHV0SWQgPSBgaW9uLWlucHV0LW90cC0ke2lucHV0SWRzKyt9YDtcbiAgICAgICAgdGhpcy5wYXJzZWRTZXBhcmF0b3JzID0gW107XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBUcmFja3Mgd2hldGhlciB0aGUgdXNlciBpcyBuYXZpZ2F0aW5nIHRocm91Z2ggaW5wdXQgYm94ZXMgdXNpbmcga2V5Ym9hcmQgbmF2aWdhdGlvblxuICAgICAgICAgKiAoYXJyb3cga2V5cywgdGFiKSB2ZXJzdXMgbW91c2UgY2xpY2tzLiBUaGlzIGlzIHVzZWQgdG8gZGV0ZXJtaW5lIHRoZSBhcHByb3ByaWF0ZVxuICAgICAgICAgKiBmb2N1cyBiZWhhdmlvciB3aGVuIGFuIGlucHV0IGJveCBpcyBmb2N1c2VkLlxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5pc0tleWJvYXJkTmF2aWdhdGlvbiA9IGZhbHNlO1xuICAgICAgICB0aGlzLmlucHV0VmFsdWVzID0gW107XG4gICAgICAgIHRoaXMuaGFzRm9jdXMgPSBmYWxzZTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEluZGljYXRlcyB3aGV0aGVyIGFuZCBob3cgdGhlIHRleHQgdmFsdWUgc2hvdWxkIGJlIGF1dG9tYXRpY2FsbHkgY2FwaXRhbGl6ZWQgYXMgaXQgaXMgZW50ZXJlZC9lZGl0ZWQgYnkgdGhlIHVzZXIuXG4gICAgICAgICAqIEF2YWlsYWJsZSBvcHRpb25zOiBgXCJvZmZcImAsIGBcIm5vbmVcImAsIGBcIm9uXCJgLCBgXCJzZW50ZW5jZXNcImAsIGBcIndvcmRzXCJgLCBgXCJjaGFyYWN0ZXJzXCJgLlxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5hdXRvY2FwaXRhbGl6ZSA9ICdvZmYnO1xuICAgICAgICAvKipcbiAgICAgICAgICogSWYgYHRydWVgLCB0aGUgdXNlciBjYW5ub3QgaW50ZXJhY3Qgd2l0aCB0aGUgaW5wdXQuXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLmRpc2FibGVkID0gZmFsc2U7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBUaGUgZmlsbCBmb3IgdGhlIGlucHV0IGJveGVzLiBJZiBgXCJzb2xpZFwiYCB0aGUgaW5wdXQgYm94ZXMgd2lsbCBoYXZlIGEgYmFja2dyb3VuZC4gSWZcbiAgICAgICAgICogYFwib3V0bGluZVwiYCB0aGUgaW5wdXQgYm94ZXMgd2lsbCBiZSB0cmFuc3BhcmVudCB3aXRoIGEgYm9yZGVyLlxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5maWxsID0gJ291dGxpbmUnO1xuICAgICAgICAvKipcbiAgICAgICAgICogVGhlIG51bWJlciBvZiBpbnB1dCBib3hlcyB0byBkaXNwbGF5LlxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5sZW5ndGggPSA0O1xuICAgICAgICAvKipcbiAgICAgICAgICogSWYgYHRydWVgLCB0aGUgdXNlciBjYW5ub3QgbW9kaWZ5IHRoZSB2YWx1ZS5cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMucmVhZG9ubHkgPSBmYWxzZTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFRoZSBzaGFwZSBvZiB0aGUgaW5wdXQgYm94ZXMuXG4gICAgICAgICAqIElmIFwicm91bmRcIiB0aGV5IHdpbGwgaGF2ZSBhbiBpbmNyZWFzZWQgYm9yZGVyIHJhZGl1cy5cbiAgICAgICAgICogSWYgXCJyZWN0YW5ndWxhclwiIHRoZXkgd2lsbCBoYXZlIG5vIGJvcmRlciByYWRpdXMuXG4gICAgICAgICAqIElmIFwic29mdFwiIHRoZXkgd2lsbCBoYXZlIGEgc29mdCBib3JkZXIgcmFkaXVzLlxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5zaGFwZSA9ICdyb3VuZCc7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBUaGUgc2l6ZSBvZiB0aGUgaW5wdXQgYm94ZXMuXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLnNpemUgPSAnbWVkaXVtJztcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFRoZSB0eXBlIG9mIGlucHV0IGFsbG93ZWQgaW4gdGhlIGlucHV0IGJveGVzLlxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy50eXBlID0gJ251bWJlcic7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBUaGUgdmFsdWUgb2YgdGhlIGlucHV0IGdyb3VwLlxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy52YWx1ZSA9ICcnO1xuICAgICAgICAvKipcbiAgICAgICAgICogSGFuZGxlcyB0aGUgZm9jdXMgYmVoYXZpb3IgZm9yIHRoZSBpbnB1dCBPVFAgY29tcG9uZW50LlxuICAgICAgICAgKlxuICAgICAgICAgKiBGb2N1cyBiZWhhdmlvcjpcbiAgICAgICAgICogMS4gS2V5Ym9hcmQgbmF2aWdhdGlvbjogQWxsb3cgbm9ybWFsIGZvY3VzIG1vdmVtZW50XG4gICAgICAgICAqIDIuIE1vdXNlIGNsaWNrOlxuICAgICAgICAgKiAgICAtIElmIGNsaWNrZWQgYm94IGhhcyB2YWx1ZTogRm9jdXMgdGhhdCBib3hcbiAgICAgICAgICogICAgLSBJZiBjbGlja2VkIGJveCBpcyBlbXB0eTogRm9jdXMgZmlyc3QgZW1wdHkgYm94XG4gICAgICAgICAqXG4gICAgICAgICAqIEVtaXRzIHRoZSBgaW9uRm9jdXNgIGV2ZW50IHdoZW4gdGhlIGlucHV0IGdyb3VwIGdhaW5zIGZvY3VzLlxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5vbkZvY3VzID0gKGluZGV4KSA9PiAoZXZlbnQpID0+IHtcbiAgICAgICAgICAgIHZhciBfYTtcbiAgICAgICAgICAgIGNvbnN0IHsgaW5wdXRSZWZzIH0gPSB0aGlzO1xuICAgICAgICAgICAgLy8gT25seSBlbWl0IGlvbkZvY3VzIGFuZCBzZXQgdGhlIGZvY3VzZWRWYWx1ZSB3aGVuIHRoZVxuICAgICAgICAgICAgLy8gY29tcG9uZW50IGZpcnN0IGdhaW5zIGZvY3VzXG4gICAgICAgICAgICBpZiAoIXRoaXMuaGFzRm9jdXMpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmlvbkZvY3VzLmVtaXQoZXZlbnQpO1xuICAgICAgICAgICAgICAgIHRoaXMuZm9jdXNlZFZhbHVlID0gdGhpcy52YWx1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuaGFzRm9jdXMgPSB0cnVlO1xuICAgICAgICAgICAgbGV0IGZpbmFsSW5kZXggPSBpbmRleDtcbiAgICAgICAgICAgIGlmICghdGhpcy5pc0tleWJvYXJkTmF2aWdhdGlvbikge1xuICAgICAgICAgICAgICAgIC8vIElmIHRoZSBjbGlja2VkIGJveCBoYXMgYSB2YWx1ZSwgZm9jdXMgaXRcbiAgICAgICAgICAgICAgICAvLyBPdGhlcndpc2UgZm9jdXMgdGhlIGZpcnN0IGVtcHR5IGJveFxuICAgICAgICAgICAgICAgIGNvbnN0IHRhcmdldEluZGV4ID0gdGhpcy5pbnB1dFZhbHVlc1tpbmRleF0gPyBpbmRleCA6IHRoaXMuZ2V0Rmlyc3RFbXB0eUluZGV4KCk7XG4gICAgICAgICAgICAgICAgZmluYWxJbmRleCA9IHRhcmdldEluZGV4ID09PSAtMSA/IHRoaXMubGVuZ3RoIC0gMSA6IHRhcmdldEluZGV4O1xuICAgICAgICAgICAgICAgIC8vIEZvY3VzIHRoZSB0YXJnZXQgYm94XG4gICAgICAgICAgICAgICAgKF9hID0gdGhpcy5pbnB1dFJlZnNbZmluYWxJbmRleF0pID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5mb2N1cygpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gVXBkYXRlIHRhYkluZGV4ZXMgdG8gbWF0Y2ggdGhlIGZvY3VzZWQgYm94XG4gICAgICAgICAgICBpbnB1dFJlZnMuZm9yRWFjaCgoaW5wdXQsIGkpID0+IHtcbiAgICAgICAgICAgICAgICBpbnB1dC50YWJJbmRleCA9IGkgPT09IGZpbmFsSW5kZXggPyAwIDogLTE7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIC8vIFJlc2V0IHRoZSBrZXlib2FyZCBuYXZpZ2F0aW9uIGZsYWdcbiAgICAgICAgICAgIHRoaXMuaXNLZXlib2FyZE5hdmlnYXRpb24gPSBmYWxzZTtcbiAgICAgICAgfTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEhhbmRsZXMgdGhlIGJsdXIgYmVoYXZpb3IgZm9yIHRoZSBpbnB1dCBPVFAgY29tcG9uZW50LlxuICAgICAgICAgKiBFbWl0cyB0aGUgYGlvbkJsdXJgIGV2ZW50IHdoZW4gdGhlIGlucHV0IGdyb3VwIGxvc2VzIGZvY3VzLlxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5vbkJsdXIgPSAoZXZlbnQpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHsgaW5wdXRSZWZzIH0gPSB0aGlzO1xuICAgICAgICAgICAgY29uc3QgcmVsYXRlZFRhcmdldCA9IGV2ZW50LnJlbGF0ZWRUYXJnZXQ7XG4gICAgICAgICAgICAvLyBEbyBub3QgZW1pdCBibHVyIGlmIHdlJ3JlIG1vdmluZyB0byBhbm90aGVyIGlucHV0IGJveCBpbiB0aGUgc2FtZSBjb21wb25lbnRcbiAgICAgICAgICAgIGNvbnN0IGlzSW50ZXJuYWxGb2N1cyA9IHJlbGF0ZWRUYXJnZXQgIT0gbnVsbCAmJiBpbnB1dFJlZnMuaW5jbHVkZXMocmVsYXRlZFRhcmdldCk7XG4gICAgICAgICAgICBpZiAoIWlzSW50ZXJuYWxGb2N1cykge1xuICAgICAgICAgICAgICAgIHRoaXMuaGFzRm9jdXMgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAvLyBSZXNldCB0YWJJbmRleGVzIHdoZW4gZm9jdXMgbGVhdmVzIHRoZSBjb21wb25lbnRcbiAgICAgICAgICAgICAgICB0aGlzLnVwZGF0ZVRhYkluZGV4ZXMoKTtcbiAgICAgICAgICAgICAgICAvLyBBbHdheXMgZW1pdCBpb25CbHVyIHdoZW4gZm9jdXMgbGVhdmVzIHRoZSBjb21wb25lbnRcbiAgICAgICAgICAgICAgICB0aGlzLmlvbkJsdXIuZW1pdChldmVudCk7XG4gICAgICAgICAgICAgICAgLy8gT25seSBlbWl0IGlvbkNoYW5nZSBpZiB0aGUgdmFsdWUgaGFzIGFjdHVhbGx5IGNoYW5nZWRcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5mb2N1c2VkVmFsdWUgIT09IHRoaXMudmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5lbWl0SW9uQ2hhbmdlKGV2ZW50KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBIYW5kbGVzIGtleWJvYXJkIG5hdmlnYXRpb24gYW5kIGlucHV0IGZvciB0aGUgT1RQIGNvbXBvbmVudC5cbiAgICAgICAgICpcbiAgICAgICAgICogTmF2aWdhdGlvbjpcbiAgICAgICAgICogLSBCYWNrc3BhY2U6IENsZWFycyBjdXJyZW50IGlucHV0IGFuZCBtb3ZlcyB0byBwcmV2aW91cyBib3ggaWYgZW1wdHlcbiAgICAgICAgICogLSBBcnJvdyBMZWZ0L1JpZ2h0OiBNb3ZlcyBmb2N1cyBiZXR3ZWVuIGlucHV0IGJveGVzXG4gICAgICAgICAqIC0gVGFiOiBBbGxvd3Mgbm9ybWFsIHRhYiBuYXZpZ2F0aW9uIGJldHdlZW4gY29tcG9uZW50c1xuICAgICAgICAgKlxuICAgICAgICAgKiBJbnB1dCBCZWhhdmlvcjpcbiAgICAgICAgICogLSBWYWxpZGF0ZXMgaW5wdXQgYWdhaW5zdCB0aGUgYWxsb3dlZCBwYXR0ZXJuXG4gICAgICAgICAqIC0gV2hlbiBlbnRlcmluZyBhIGtleSBpbiBhIGZpbGxlZCBib3g6XG4gICAgICAgICAqICAgLSBTaGlmdHMgZXhpc3RpbmcgdmFsdWVzIHJpZ2h0IGlmIHRoZXJlIGlzIHJvb21cbiAgICAgICAgICogICAtIFVwZGF0ZXMgdGhlIHZhbHVlIG9mIHRoZSBpbnB1dCBncm91cFxuICAgICAgICAgKiAgIC0gUHJldmVudHMgZGVmYXVsdCBiZWhhdmlvciB0byBhdm9pZCBhdXRvbWF0aWMgZm9jdXMgc2hpZnRcbiAgICAgICAgICovXG4gICAgICAgIHRoaXMub25LZXlEb3duID0gKGluZGV4KSA9PiAoZXZlbnQpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHsgbGVuZ3RoIH0gPSB0aGlzO1xuICAgICAgICAgICAgY29uc3QgcnRsID0gaXNSVEwodGhpcy5lbCk7XG4gICAgICAgICAgICBjb25zdCBpbnB1dCA9IGV2ZW50LnRhcmdldDtcbiAgICAgICAgICAgIC8vIE1ldGEgc2hvcnRjdXRzIGFyZSB1c2VkIHRvIGNvcHksIHBhc3RlLCBhbmQgc2VsZWN0IHRleHRcbiAgICAgICAgICAgIC8vIFdlIGRvbid0IHdhbnQgdG8gaGFuZGxlIHRoZXNlIGtleXMgaGVyZVxuICAgICAgICAgICAgY29uc3QgbWV0YVNob3J0Y3V0cyA9IFsnYScsICdjJywgJ3YnLCAneCcsICdyJywgJ3onLCAneSddO1xuICAgICAgICAgICAgY29uc3QgaXNUZXh0U2VsZWN0aW9uID0gaW5wdXQuc2VsZWN0aW9uU3RhcnQgIT09IGlucHV0LnNlbGVjdGlvbkVuZDtcbiAgICAgICAgICAgIC8vIFJldHVybiBpZiB0aGUga2V5IGlzIGEgbWV0YSBzaG9ydGN1dCBvciB0aGUgaW5wdXQgdmFsdWVcbiAgICAgICAgICAgIC8vIHRleHQgaXMgc2VsZWN0ZWQgYW5kIGxldCB0aGUgb25QYXN0ZSAvIG9uSW5wdXQgaGFuZGxlciBtYW5hZ2UgaXRcbiAgICAgICAgICAgIGlmIChpc1RleHRTZWxlY3Rpb24gfHwgKChldmVudC5tZXRhS2V5IHx8IGV2ZW50LmN0cmxLZXkpICYmIG1ldGFTaG9ydGN1dHMuaW5jbHVkZXMoZXZlbnQua2V5LnRvTG93ZXJDYXNlKCkpKSkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChldmVudC5rZXkgPT09ICdCYWNrc3BhY2UnKSB7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuaW5wdXRWYWx1ZXNbaW5kZXhdKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIFNoaWZ0IGFsbCB2YWx1ZXMgdG8gdGhlIHJpZ2h0IG9mIHRoZSBjdXJyZW50IGluZGV4IGxlZnQgYnkgb25lXG4gICAgICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSBpbmRleDsgaSA8IGxlbmd0aCAtIDE7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5pbnB1dFZhbHVlc1tpXSA9IHRoaXMuaW5wdXRWYWx1ZXNbaSArIDFdO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIC8vIENsZWFyIHRoZSBsYXN0IGJveFxuICAgICAgICAgICAgICAgICAgICB0aGlzLmlucHV0VmFsdWVzW2xlbmd0aCAtIDFdID0gJyc7XG4gICAgICAgICAgICAgICAgICAgIC8vIFVwZGF0ZSBhbGwgaW5wdXRSZWZzIHRvIG1hdGNoIGlucHV0VmFsdWVzXG4gICAgICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuaW5wdXRSZWZzW2ldLnZhbHVlID0gdGhpcy5pbnB1dFZhbHVlc1tpXSB8fCAnJztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB0aGlzLnVwZGF0ZVZhbHVlKGV2ZW50KTtcbiAgICAgICAgICAgICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoIXRoaXMuaW5wdXRWYWx1ZXNbaW5kZXhdICYmIGluZGV4ID4gMCkge1xuICAgICAgICAgICAgICAgICAgICAvLyBJZiBjdXJyZW50IGlucHV0IGlzIGVtcHR5LCBtb3ZlIHRvIHByZXZpb3VzIGlucHV0XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZm9jdXNQcmV2aW91cyhpbmRleCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoZXZlbnQua2V5ID09PSAnQXJyb3dMZWZ0JyB8fCBldmVudC5rZXkgPT09ICdBcnJvd1JpZ2h0Jykge1xuICAgICAgICAgICAgICAgIHRoaXMuaXNLZXlib2FyZE5hdmlnYXRpb24gPSB0cnVlO1xuICAgICAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICAgICAgY29uc3QgaXNMZWZ0ID0gZXZlbnQua2V5ID09PSAnQXJyb3dMZWZ0JztcbiAgICAgICAgICAgICAgICBjb25zdCBzaG91bGRNb3ZlTmV4dCA9IChpc0xlZnQgJiYgcnRsKSB8fCAoIWlzTGVmdCAmJiAhcnRsKTtcbiAgICAgICAgICAgICAgICAvLyBPbmx5IGFsbG93IG1vdmluZyB0byB0aGUgbmV4dCBpbnB1dCBpZiB0aGUgY3VycmVudCBoYXMgYSB2YWx1ZVxuICAgICAgICAgICAgICAgIGlmIChzaG91bGRNb3ZlTmV4dCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5pbnB1dFZhbHVlc1tpbmRleF0gJiYgaW5kZXggPCBsZW5ndGggLSAxKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmZvY3VzTmV4dChpbmRleCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZm9jdXNQcmV2aW91cyhpbmRleCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoZXZlbnQua2V5ID09PSAnVGFiJykge1xuICAgICAgICAgICAgICAgIHRoaXMuaXNLZXlib2FyZE5hdmlnYXRpb24gPSB0cnVlO1xuICAgICAgICAgICAgICAgIC8vIExldCBhbGwgdGFiIGV2ZW50cyBwcm9jZWVkIG5vcm1hbGx5XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gSWYgdGhlIGlucHV0IGJveCBjb250YWlucyBhIHZhbHVlIGFuZCB0aGUga2V5IGJlaW5nXG4gICAgICAgICAgICAvLyBlbnRlcmVkIGlzIGEgdmFsaWQga2V5IGZvciB0aGUgaW5wdXQgYm94IHVwZGF0ZSB0aGUgdmFsdWVcbiAgICAgICAgICAgIC8vIGFuZCBzaGlmdCB0aGUgdmFsdWVzIHRvIHRoZSByaWdodCBpZiB0aGVyZSBpcyByb29tLlxuICAgICAgICAgICAgaWYgKHRoaXMuaW5wdXRWYWx1ZXNbaW5kZXhdICYmIHRoaXMudmFsaWRLZXlQYXR0ZXJuLnRlc3QoZXZlbnQua2V5KSkge1xuICAgICAgICAgICAgICAgIGlmICghdGhpcy5pbnB1dFZhbHVlc1tsZW5ndGggLSAxXSkge1xuICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gbGVuZ3RoIC0gMTsgaSA+IGluZGV4OyBpLS0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuaW5wdXRWYWx1ZXNbaV0gPSB0aGlzLmlucHV0VmFsdWVzW2kgLSAxXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuaW5wdXRSZWZzW2ldLnZhbHVlID0gdGhpcy5pbnB1dFZhbHVlc1tpXSB8fCAnJztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB0aGlzLmlucHV0VmFsdWVzW2luZGV4XSA9IGV2ZW50LmtleTtcbiAgICAgICAgICAgICAgICB0aGlzLmlucHV0UmVmc1tpbmRleF0udmFsdWUgPSBldmVudC5rZXk7XG4gICAgICAgICAgICAgICAgdGhpcy51cGRhdGVWYWx1ZShldmVudCk7XG4gICAgICAgICAgICAgICAgLy8gUHJldmVudCBkZWZhdWx0IHRvIGF2b2lkIHRoZSBicm93c2VyIGZyb21cbiAgICAgICAgICAgICAgICAvLyBhdXRvbWF0aWNhbGx5IG1vdmluZyB0aGUgZm9jdXMgdG8gdGhlIG5leHQgaW5wdXRcbiAgICAgICAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICB0aGlzLm9uSW5wdXQgPSAoaW5kZXgpID0+IChldmVudCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgeyBsZW5ndGgsIHZhbGlkS2V5UGF0dGVybiB9ID0gdGhpcztcbiAgICAgICAgICAgIGNvbnN0IHZhbHVlID0gZXZlbnQudGFyZ2V0LnZhbHVlO1xuICAgICAgICAgICAgLy8gSWYgdGhlIHZhbHVlIGlzIGxvbmdlciB0aGFuIDEgY2hhcmFjdGVyIChhdXRvZmlsbCksIHNwbGl0IGl0IGludG9cbiAgICAgICAgICAgIC8vIGNoYXJhY3RlcnMgYW5kIGZpbHRlciBvdXQgaW52YWxpZCBvbmVzXG4gICAgICAgICAgICBpZiAodmFsdWUubGVuZ3RoID4gMSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHZhbGlkQ2hhcnMgPSB2YWx1ZVxuICAgICAgICAgICAgICAgICAgICAuc3BsaXQoJycpXG4gICAgICAgICAgICAgICAgICAgIC5maWx0ZXIoKGNoYXIpID0+IHZhbGlkS2V5UGF0dGVybi50ZXN0KGNoYXIpKVxuICAgICAgICAgICAgICAgICAgICAuc2xpY2UoMCwgbGVuZ3RoKTtcbiAgICAgICAgICAgICAgICAvLyBJZiB0aGVyZSBhcmUgbm8gdmFsaWQgY2hhcmFjdGVycyBjb21pbmcgZnJvbSB0aGVcbiAgICAgICAgICAgICAgICAvLyBhdXRvZmlsbCwgYWxsIGlucHV0IHJlZnMgaGF2ZSB0byBiZSBjbGVhcmVkIGFmdGVyIHRoZVxuICAgICAgICAgICAgICAgIC8vIGJyb3dzZXIgaGFzIGZpbmlzaGVkIHRoZSBhdXRvZmlsbCBiZWhhdmlvclxuICAgICAgICAgICAgICAgIGlmICh2YWxpZENoYXJzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgICAgICAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5pbnB1dFJlZnMuZm9yRWFjaCgoaW5wdXQpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbnB1dC52YWx1ZSA9ICcnO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAvLyBVcGRhdGUgdGhlIHZhbHVlIG9mIHRoZSBpbnB1dCBncm91cCBhbmQgZW1pdCB0aGUgaW5wdXQgY2hhbmdlIGV2ZW50XG4gICAgICAgICAgICAgICAgdGhpcy52YWx1ZSA9IHZhbGlkQ2hhcnMuam9pbignJyk7XG4gICAgICAgICAgICAgICAgdGhpcy51cGRhdGVWYWx1ZShldmVudCk7XG4gICAgICAgICAgICAgICAgLy8gRm9jdXMgdGhlIGZpcnN0IGVtcHR5IGlucHV0IGJveCBvciB0aGUgbGFzdCBpbnB1dCBib3ggaWYgYWxsIGJveGVzXG4gICAgICAgICAgICAgICAgLy8gYXJlIGZpbGxlZCBhZnRlciBhIHNtYWxsIGRlbGF5IHRvIGVuc3VyZSB0aGUgaW5wdXQgYm94ZXMgaGF2ZSBiZWVuXG4gICAgICAgICAgICAgICAgLy8gdXBkYXRlZCBiZWZvcmUgbW92aW5nIHRoZSBmb2N1c1xuICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICB2YXIgX2E7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IG5leHRJbmRleCA9IHZhbGlkQ2hhcnMubGVuZ3RoIDwgbGVuZ3RoID8gdmFsaWRDaGFycy5sZW5ndGggOiBsZW5ndGggLSAxO1xuICAgICAgICAgICAgICAgICAgICAoX2EgPSB0aGlzLmlucHV0UmVmc1tuZXh0SW5kZXhdKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuZm9jdXMoKTtcbiAgICAgICAgICAgICAgICB9LCAyMCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gT25seSBhbGxvdyBpbnB1dCBpZiBpdCBtYXRjaGVzIHRoZSBwYXR0ZXJuXG4gICAgICAgICAgICBpZiAodmFsdWUubGVuZ3RoID4gMCAmJiAhdmFsaWRLZXlQYXR0ZXJuLnRlc3QodmFsdWUpKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5pbnB1dFJlZnNbaW5kZXhdLnZhbHVlID0gJyc7XG4gICAgICAgICAgICAgICAgdGhpcy5pbnB1dFZhbHVlc1tpbmRleF0gPSAnJztcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBGb3Igc2luZ2xlIGNoYXJhY3RlciBpbnB1dCwgZmlsbCB0aGUgY3VycmVudCBib3hcbiAgICAgICAgICAgIHRoaXMuaW5wdXRWYWx1ZXNbaW5kZXhdID0gdmFsdWU7XG4gICAgICAgICAgICB0aGlzLnVwZGF0ZVZhbHVlKGV2ZW50KTtcbiAgICAgICAgICAgIGlmICh2YWx1ZS5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5mb2N1c05leHQoaW5kZXgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICAvKipcbiAgICAgICAgICogSGFuZGxlcyBwYXN0aW5nIHRleHQgaW50byB0aGUgaW5wdXQgT1RQIGNvbXBvbmVudC5cbiAgICAgICAgICogVGhpcyBmdW5jdGlvbiBwcmV2ZW50cyB0aGUgZGVmYXVsdCBwYXN0ZSBiZWhhdmlvciBhbmRcbiAgICAgICAgICogdmFsaWRhdGVzIHRoZSBwYXN0ZWQgdGV4dCBhZ2FpbnN0IHRoZSBhbGxvd2VkIHBhdHRlcm4uXG4gICAgICAgICAqIEl0IHRoZW4gdXBkYXRlcyB0aGUgdmFsdWUgb2YgdGhlIGlucHV0IGdyb3VwIGFuZCBmb2N1c2VzXG4gICAgICAgICAqIHRoZSBuZXh0IGVtcHR5IGlucHV0IGFmdGVyIHBhc3RpbmcuXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLm9uUGFzdGUgPSAoZXZlbnQpID0+IHtcbiAgICAgICAgICAgIHZhciBfYSwgX2IsIF9jO1xuICAgICAgICAgICAgY29uc3QgeyBpbnB1dFJlZnMsIGxlbmd0aCwgdmFsaWRLZXlQYXR0ZXJuIH0gPSB0aGlzO1xuICAgICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgIGNvbnN0IHBhc3RlZFRleHQgPSAoX2EgPSBldmVudC5jbGlwYm9hcmREYXRhKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuZ2V0RGF0YSgndGV4dCcpO1xuICAgICAgICAgICAgLy8gSWYgdGhlcmUgaXMgbm8gcGFzdGVkIHRleHQsIHN0aWxsIGVtaXQgdGhlIGlucHV0IGNoYW5nZSBldmVudFxuICAgICAgICAgICAgLy8gYmVjYXVzZSB0aGlzIGlzIGhvdyB0aGUgbmF0aXZlIGlucHV0IGVsZW1lbnQgYmVoYXZlc1xuICAgICAgICAgICAgLy8gYnV0IHJldHVybiBlYXJseSBiZWNhdXNlIHRoZXJlIGlzIG5vdGhpbmcgdG8gcGFzdGUuXG4gICAgICAgICAgICBpZiAoIXBhc3RlZFRleHQpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmVtaXRJb25JbnB1dChldmVudCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgdmFsaWRDaGFycyA9IHBhc3RlZFRleHRcbiAgICAgICAgICAgICAgICAuc3BsaXQoJycpXG4gICAgICAgICAgICAgICAgLmZpbHRlcigoY2hhcikgPT4gdmFsaWRLZXlQYXR0ZXJuLnRlc3QoY2hhcikpXG4gICAgICAgICAgICAgICAgLnNsaWNlKDAsIGxlbmd0aCk7XG4gICAgICAgICAgICAvLyBBbHdheXMgcGFzdGUgc3RhcnRpbmcgYXQgdGhlIGZpcnN0IGJveFxuICAgICAgICAgICAgdmFsaWRDaGFycy5mb3JFYWNoKChjaGFyLCBpbmRleCkgPT4ge1xuICAgICAgICAgICAgICAgIGlmIChpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmlucHV0UmVmc1tpbmRleF0udmFsdWUgPSBjaGFyO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmlucHV0VmFsdWVzW2luZGV4XSA9IGNoYXI7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAvLyBVcGRhdGUgdGhlIHZhbHVlIHNvIHRoYXQgYWxsIGlucHV0IGJveGVzIGFyZSB1cGRhdGVkXG4gICAgICAgICAgICB0aGlzLnZhbHVlID0gdmFsaWRDaGFycy5qb2luKCcnKTtcbiAgICAgICAgICAgIHRoaXMudXBkYXRlVmFsdWUoZXZlbnQpO1xuICAgICAgICAgICAgLy8gRm9jdXMgdGhlIG5leHQgZW1wdHkgaW5wdXQgYWZ0ZXIgcGFzdGluZ1xuICAgICAgICAgICAgLy8gSWYgYWxsIGJveGVzIGFyZSBmaWxsZWQsIGZvY3VzIHRoZSBsYXN0IGlucHV0XG4gICAgICAgICAgICBjb25zdCBuZXh0RW1wdHlJbmRleCA9IHZhbGlkQ2hhcnMubGVuZ3RoO1xuICAgICAgICAgICAgaWYgKG5leHRFbXB0eUluZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgKF9iID0gaW5wdXRSZWZzW25leHRFbXB0eUluZGV4XSkgPT09IG51bGwgfHwgX2IgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9iLmZvY3VzKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAoX2MgPSBpbnB1dFJlZnNbbGVuZ3RoIC0gMV0pID09PSBudWxsIHx8IF9jID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYy5mb2N1cygpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBTZXRzIGZvY3VzIHRvIGFuIGlucHV0IGJveC5cbiAgICAgKiBAcGFyYW0gaW5kZXggLSBUaGUgaW5kZXggb2YgdGhlIGlucHV0IGJveCB0byBmb2N1cyAoMC1iYXNlZCkuXG4gICAgICogSWYgcHJvdmlkZWQgYW5kIHRoZSBpbnB1dCBib3ggaGFzIGEgdmFsdWUsIHRoZSBpbnB1dCBib3ggYXQgdGhhdCBpbmRleCB3aWxsIGJlIGZvY3VzZWQuXG4gICAgICogT3RoZXJ3aXNlLCB0aGUgZmlyc3QgZW1wdHkgaW5wdXQgYm94IG9yIHRoZSBsYXN0IGlucHV0IGlmIGFsbCBhcmUgZmlsbGVkIHdpbGwgYmUgZm9jdXNlZC5cbiAgICAgKi9cbiAgICBhc3luYyBzZXRGb2N1cyhpbmRleCkge1xuICAgICAgICB2YXIgX2EsIF9iO1xuICAgICAgICBpZiAodHlwZW9mIGluZGV4ID09PSAnbnVtYmVyJykge1xuICAgICAgICAgICAgY29uc3QgdmFsaWRJbmRleCA9IE1hdGgubWF4KDAsIE1hdGgubWluKGluZGV4LCB0aGlzLmxlbmd0aCAtIDEpKTtcbiAgICAgICAgICAgIChfYSA9IHRoaXMuaW5wdXRSZWZzW3ZhbGlkSW5kZXhdKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuZm9jdXMoKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGNvbnN0IHRhYmJhYmxlSW5kZXggPSB0aGlzLmdldFRhYmJhYmxlSW5kZXgoKTtcbiAgICAgICAgICAgIChfYiA9IHRoaXMuaW5wdXRSZWZzW3RhYmJhYmxlSW5kZXhdKSA9PT0gbnVsbCB8fCBfYiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2IuZm9jdXMoKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICB2YWx1ZUNoYW5nZWQoKSB7XG4gICAgICAgIHRoaXMuaW5pdGlhbGl6ZVZhbHVlcygpO1xuICAgICAgICB0aGlzLnVwZGF0ZVRhYkluZGV4ZXMoKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUHJvY2Vzc2VzIHRoZSBzZXBhcmF0b3JzIHByb3AgaW50byBhbiBhcnJheSBvZiBudW1iZXJzLlxuICAgICAqXG4gICAgICogSWYgdGhlIHNlcGFyYXRvcnMgcHJvcCBpcyBub3QgcHJvdmlkZWQsIHJldHVybnMgYW4gZW1wdHkgYXJyYXkuXG4gICAgICogSWYgdGhlIHNlcGFyYXRvcnMgcHJvcCBpcyAnYWxsJywgcmV0dXJucyBhbiBhcnJheSBvZiBhbGwgdmFsaWQgcG9zaXRpb25zICgxIHRvIGxlbmd0aC0xKS5cbiAgICAgKiBJZiB0aGUgc2VwYXJhdG9ycyBwcm9wIGlzIGFuIGFycmF5LCByZXR1cm5zIGl0IGFzIGlzLlxuICAgICAqIElmIHRoZSBzZXBhcmF0b3JzIHByb3AgaXMgYSBzdHJpbmcsIHNwbGl0cyBpdCBieSBjb21tYXMgYW5kIHBhcnNlcyBlYWNoIHBhcnQgYXMgYSBudW1iZXIuXG4gICAgICpcbiAgICAgKiBJZiB0aGUgc2VwYXJhdG9ycyBhcmUgZ3JlYXRlciB0aGFuIHRoZSBpbnB1dCBsZW5ndGgsIGl0IHdpbGwgd2FybiBhbmQgaWdub3JlIHRoZSBzZXBhcmF0b3JzLlxuICAgICAqL1xuICAgIHByb2Nlc3NTZXBhcmF0b3JzKCkge1xuICAgICAgICBjb25zdCB7IHNlcGFyYXRvcnMsIGxlbmd0aCB9ID0gdGhpcztcbiAgICAgICAgaWYgKHNlcGFyYXRvcnMgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhpcy5wYXJzZWRTZXBhcmF0b3JzID0gW107XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHR5cGVvZiBzZXBhcmF0b3JzID09PSAnc3RyaW5nJyAmJiBzZXBhcmF0b3JzICE9PSAnYWxsJykge1xuICAgICAgICAgICAgY29uc3QgaXNWYWxpZEZvcm1hdCA9IC9eKFxcZCspKCxcXGQrKSokLy50ZXN0KHNlcGFyYXRvcnMpO1xuICAgICAgICAgICAgaWYgKCFpc1ZhbGlkRm9ybWF0KSB7XG4gICAgICAgICAgICAgICAgcHJpbnRJb25XYXJuaW5nKGBbaW9uLWlucHV0LW90cF0gLSBJbnZhbGlkIHNlcGFyYXRvcnMgZm9ybWF0LiBFeHBlY3RlZCBhIGNvbW1hLXNlcGFyYXRlZCBsaXN0IG9mIG51bWJlcnMsIGFuIGFycmF5IG9mIG51bWJlcnMsIG9yIFwiYWxsXCIuIFJlY2VpdmVkOiAke3NlcGFyYXRvcnN9YCwgdGhpcy5lbCk7XG4gICAgICAgICAgICAgICAgdGhpcy5wYXJzZWRTZXBhcmF0b3JzID0gW107XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGxldCBzZXBhcmF0b3JWYWx1ZXM7XG4gICAgICAgIGlmIChzZXBhcmF0b3JzID09PSAnYWxsJykge1xuICAgICAgICAgICAgc2VwYXJhdG9yVmFsdWVzID0gQXJyYXkuZnJvbSh7IGxlbmd0aDogbGVuZ3RoIC0gMSB9LCAoXywgaSkgPT4gaSArIDEpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKEFycmF5LmlzQXJyYXkoc2VwYXJhdG9ycykpIHtcbiAgICAgICAgICAgIHNlcGFyYXRvclZhbHVlcyA9IHNlcGFyYXRvcnM7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBzZXBhcmF0b3JWYWx1ZXMgPSBzZXBhcmF0b3JzXG4gICAgICAgICAgICAgICAgLnNwbGl0KCcsJylcbiAgICAgICAgICAgICAgICAubWFwKChwb3MpID0+IHBhcnNlSW50KHBvcywgMTApKVxuICAgICAgICAgICAgICAgIC5maWx0ZXIoKHBvcykgPT4gIWlzTmFOKHBvcykpO1xuICAgICAgICB9XG4gICAgICAgIC8vIENoZWNrIGZvciBkdXBsaWNhdGUgc2VwYXJhdG9yIHBvc2l0aW9uc1xuICAgICAgICBjb25zdCBkdXBsaWNhdGVzID0gc2VwYXJhdG9yVmFsdWVzLmZpbHRlcigocG9zLCBpbmRleCkgPT4gc2VwYXJhdG9yVmFsdWVzLmluZGV4T2YocG9zKSAhPT0gaW5kZXgpO1xuICAgICAgICBpZiAoZHVwbGljYXRlcy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICBwcmludElvbldhcm5pbmcoYFtpb24taW5wdXQtb3RwXSAtIER1cGxpY2F0ZSBzZXBhcmF0b3IgcG9zaXRpb25zIGFyZSBub3QgYWxsb3dlZC4gUmVjZWl2ZWQ6ICR7c2VwYXJhdG9yc31gLCB0aGlzLmVsKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBpbnZhbGlkU2VwYXJhdG9ycyA9IHNlcGFyYXRvclZhbHVlcy5maWx0ZXIoKHBvcykgPT4gcG9zID4gbGVuZ3RoKTtcbiAgICAgICAgaWYgKGludmFsaWRTZXBhcmF0b3JzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIHByaW50SW9uV2FybmluZyhgW2lvbi1pbnB1dC1vdHBdIC0gVGhlIGZvbGxvd2luZyBzZXBhcmF0b3IgcG9zaXRpb25zIGFyZSBncmVhdGVyIHRoYW4gdGhlIGlucHV0IGxlbmd0aCAoJHtsZW5ndGh9KTogJHtpbnZhbGlkU2VwYXJhdG9ycy5qb2luKCcsICcpfS4gVGhlc2Ugc2VwYXJhdG9ycyB3aWxsIGJlIGlnbm9yZWQuYCwgdGhpcy5lbCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5wYXJzZWRTZXBhcmF0b3JzID0gc2VwYXJhdG9yVmFsdWVzLmZpbHRlcigocG9zKSA9PiBwb3MgPD0gbGVuZ3RoKTtcbiAgICB9XG4gICAgY29tcG9uZW50V2lsbExvYWQoKSB7XG4gICAgICAgIHRoaXMuaW5oZXJpdGVkQXR0cmlidXRlcyA9IGluaGVyaXRBcmlhQXR0cmlidXRlcyh0aGlzLmVsKTtcbiAgICAgICAgdGhpcy5wcm9jZXNzU2VwYXJhdG9ycygpO1xuICAgICAgICB0aGlzLmluaXRpYWxpemVWYWx1ZXMoKTtcbiAgICB9XG4gICAgY29tcG9uZW50RGlkTG9hZCgpIHtcbiAgICAgICAgdGhpcy51cGRhdGVUYWJJbmRleGVzKCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEdldCB0aGUgcmVnZXggcGF0dGVybiBmb3IgYWxsb3dlZCBjaGFyYWN0ZXJzLlxuICAgICAqIElmIGEgcGF0dGVybiBpcyBwcm92aWRlZCwgdXNlIGl0IHRvIGNyZWF0ZSBhIHJlZ2V4IHBhdHRlcm5cbiAgICAgKiBPdGhlcndpc2UsIHVzZSB0aGUgZGVmYXVsdCByZWdleCBwYXR0ZXJuIGJhc2VkIG9uIHR5cGVcbiAgICAgKi9cbiAgICBnZXQgdmFsaWRLZXlQYXR0ZXJuKCkge1xuICAgICAgICByZXR1cm4gbmV3IFJlZ0V4cChgXiR7dGhpcy5nZXRQYXR0ZXJuKCl9JGAsICd1Jyk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIHN0cmluZyBwYXR0ZXJuIHRvIHBhc3MgdG8gdGhlIGlucHV0IGVsZW1lbnRcbiAgICAgKiBhbmQgdXNlIGluIHRoZSByZWdleCBmb3IgYWxsb3dlZCBjaGFyYWN0ZXJzLlxuICAgICAqL1xuICAgIGdldFBhdHRlcm4oKSB7XG4gICAgICAgIGNvbnN0IHsgcGF0dGVybiwgdHlwZSB9ID0gdGhpcztcbiAgICAgICAgaWYgKHBhdHRlcm4pIHtcbiAgICAgICAgICAgIHJldHVybiBwYXR0ZXJuO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0eXBlID09PSAnbnVtYmVyJyA/ICdbXFxcXHB7Tn1dJyA6ICdbXFxcXHB7TH1cXFxccHtOfV0nO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBHZXQgdGhlIGRlZmF1bHQgdmFsdWUgZm9yIGlucHV0bW9kZS5cbiAgICAgKiBJZiBpbnB1dG1vZGUgaXMgcHJvdmlkZWQsIHVzZSBpdC5cbiAgICAgKiBPdGhlcndpc2UsIHVzZSB0aGUgZGVmYXVsdCBpbnB1dG1vZGUgYmFzZWQgb24gdHlwZVxuICAgICAqL1xuICAgIGdldElucHV0bW9kZSgpIHtcbiAgICAgICAgY29uc3QgeyBpbnB1dG1vZGUgfSA9IHRoaXM7XG4gICAgICAgIGlmIChpbnB1dG1vZGUpIHtcbiAgICAgICAgICAgIHJldHVybiBpbnB1dG1vZGU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMudHlwZSA9PSAnbnVtYmVyJykge1xuICAgICAgICAgICAgcmV0dXJuICdudW1lcmljJztcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiAndGV4dCc7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogSW5pdGlhbGl6ZXMgdGhlIGlucHV0IHZhbHVlcyBhcnJheSBiYXNlZCBvbiB0aGUgY3VycmVudCB2YWx1ZSBwcm9wLlxuICAgICAqIFRoaXMgc3BsaXRzIHRoZSB2YWx1ZSBpbnRvIGluZGl2aWR1YWwgY2hhcmFjdGVycyBhbmQgdmFsaWRhdGVzIHRoZW0gYWdhaW5zdFxuICAgICAqIHRoZSBhbGxvd2VkIHBhdHRlcm4uIFRoZSB2YWx1ZXMgYXJlIHRoZW4gdXNlZCBhcyB0aGUgdmFsdWVzIGluIHRoZSBuYXRpdmVcbiAgICAgKiBpbnB1dCBib3hlcyBhbmQgdGhlIHZhbHVlIG9mIHRoZSBpbnB1dCBncm91cCBpcyB1cGRhdGVkLlxuICAgICAqL1xuICAgIGluaXRpYWxpemVWYWx1ZXMoKSB7XG4gICAgICAgIC8vIENsZWFyIGFsbCBpbnB1dCB2YWx1ZXNcbiAgICAgICAgdGhpcy5pbnB1dFZhbHVlcyA9IEFycmF5KHRoaXMubGVuZ3RoKS5maWxsKCcnKTtcbiAgICAgICAgLy8gSWYgdGhlIHZhbHVlIGlzIG51bGwsIHVuZGVmaW5lZCwgb3IgYW4gZW1wdHkgc3RyaW5nLCByZXR1cm5cbiAgICAgICAgaWYgKHRoaXMudmFsdWUgPT0gbnVsbCB8fCBTdHJpbmcodGhpcy52YWx1ZSkubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgLy8gU3BsaXQgdGhlIHZhbHVlIGludG8gaW5kaXZpZHVhbCBjaGFyYWN0ZXJzIGFuZCB2YWxpZGF0ZVxuICAgICAgICAvLyB0aGVtIGFnYWluc3QgdGhlIGFsbG93ZWQgcGF0dGVyblxuICAgICAgICBjb25zdCBjaGFycyA9IFN0cmluZyh0aGlzLnZhbHVlKS5zcGxpdCgnJykuc2xpY2UoMCwgdGhpcy5sZW5ndGgpO1xuICAgICAgICBjaGFycy5mb3JFYWNoKChjaGFyLCBpbmRleCkgPT4ge1xuICAgICAgICAgICAgaWYgKHRoaXMudmFsaWRLZXlQYXR0ZXJuLnRlc3QoY2hhcikpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmlucHV0VmFsdWVzW2luZGV4XSA9IGNoYXI7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICAvLyBVcGRhdGUgdGhlIHZhbHVlIHdpdGhvdXQgZW1pdHRpbmcgZXZlbnRzXG4gICAgICAgIHRoaXMudmFsdWUgPSB0aGlzLmlucHV0VmFsdWVzLmpvaW4oJycpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBVcGRhdGVzIHRoZSB2YWx1ZSBvZiB0aGUgaW5wdXQgZ3JvdXAuXG4gICAgICogVGhpcyB1cGRhdGVzIHRoZSB2YWx1ZSBvZiB0aGUgaW5wdXQgZ3JvdXAgYW5kIGVtaXRzIGFuIGBpb25DaGFuZ2VgIGV2ZW50LlxuICAgICAqIElmIGFsbCBvZiB0aGUgaW5wdXQgYm94ZXMgYXJlIGZpbGxlZCwgaXQgZW1pdHMgYW4gYGlvbkNvbXBsZXRlYCBldmVudC5cbiAgICAgKi9cbiAgICB1cGRhdGVWYWx1ZShldmVudCkge1xuICAgICAgICBjb25zdCB7IGlucHV0VmFsdWVzLCBsZW5ndGggfSA9IHRoaXM7XG4gICAgICAgIGNvbnN0IG5ld1ZhbHVlID0gaW5wdXRWYWx1ZXMuam9pbignJyk7XG4gICAgICAgIHRoaXMudmFsdWUgPSBuZXdWYWx1ZTtcbiAgICAgICAgdGhpcy5lbWl0SW9uSW5wdXQoZXZlbnQpO1xuICAgICAgICBpZiAobmV3VmFsdWUubGVuZ3RoID09PSBsZW5ndGgpIHtcbiAgICAgICAgICAgIHRoaXMuaW9uQ29tcGxldGUuZW1pdCh7IHZhbHVlOiBuZXdWYWx1ZSB9KTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBFbWl0cyBhbiBgaW9uQ2hhbmdlYCBldmVudC5cbiAgICAgKiBUaGlzIEFQSSBzaG91bGQgYmUgY2FsbGVkIGZvciB1c2VyIGNvbW1pdHRlZCBjaGFuZ2VzLlxuICAgICAqIFRoaXMgQVBJIHNob3VsZCBub3QgYmUgdXNlZCBmb3IgZXh0ZXJuYWwgdmFsdWUgY2hhbmdlcy5cbiAgICAgKi9cbiAgICBlbWl0SW9uQ2hhbmdlKGV2ZW50KSB7XG4gICAgICAgIGNvbnN0IHsgdmFsdWUgfSA9IHRoaXM7XG4gICAgICAgIC8vIENoZWNrcyBmb3IgYm90aCBudWxsIGFuZCB1bmRlZmluZWQgdmFsdWVzXG4gICAgICAgIGNvbnN0IG5ld1ZhbHVlID0gdmFsdWUgPT0gbnVsbCA/IHZhbHVlIDogdmFsdWUudG9TdHJpbmcoKTtcbiAgICAgICAgdGhpcy5pb25DaGFuZ2UuZW1pdCh7IHZhbHVlOiBuZXdWYWx1ZSwgZXZlbnQgfSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEVtaXRzIGFuIGBpb25JbnB1dGAgZXZlbnQuXG4gICAgICogVGhpcyBpcyB1c2VkIHRvIGVtaXQgdGhlIGlucHV0IHZhbHVlIHdoZW4gdGhlIHVzZXIgdHlwZXMsXG4gICAgICogYmFja3NwYWNlcywgb3IgcGFzdGVzLlxuICAgICAqL1xuICAgIGVtaXRJb25JbnB1dChldmVudCkge1xuICAgICAgICBjb25zdCB7IHZhbHVlIH0gPSB0aGlzO1xuICAgICAgICAvLyBDaGVja3MgZm9yIGJvdGggbnVsbCBhbmQgdW5kZWZpbmVkIHZhbHVlc1xuICAgICAgICBjb25zdCBuZXdWYWx1ZSA9IHZhbHVlID09IG51bGwgPyB2YWx1ZSA6IHZhbHVlLnRvU3RyaW5nKCk7XG4gICAgICAgIHRoaXMuaW9uSW5wdXQuZW1pdCh7IHZhbHVlOiBuZXdWYWx1ZSwgZXZlbnQgfSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEZvY3VzZXMgdGhlIG5leHQgaW5wdXQgYm94LlxuICAgICAqL1xuICAgIGZvY3VzTmV4dChjdXJyZW50SW5kZXgpIHtcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICBjb25zdCB7IGlucHV0UmVmcywgbGVuZ3RoIH0gPSB0aGlzO1xuICAgICAgICBpZiAoY3VycmVudEluZGV4IDwgbGVuZ3RoIC0gMSkge1xuICAgICAgICAgICAgKF9hID0gaW5wdXRSZWZzW2N1cnJlbnRJbmRleCArIDFdKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuZm9jdXMoKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBGb2N1c2VzIHRoZSBwcmV2aW91cyBpbnB1dCBib3guXG4gICAgICovXG4gICAgZm9jdXNQcmV2aW91cyhjdXJyZW50SW5kZXgpIHtcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICBjb25zdCB7IGlucHV0UmVmcyB9ID0gdGhpcztcbiAgICAgICAgaWYgKGN1cnJlbnRJbmRleCA+IDApIHtcbiAgICAgICAgICAgIChfYSA9IGlucHV0UmVmc1tjdXJyZW50SW5kZXggLSAxXSkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmZvY3VzKCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogU2VhcmNoZXMgdGhyb3VnaCB0aGUgaW5wdXQgdmFsdWVzIGFuZCByZXR1cm5zIHRoZSBpbmRleFxuICAgICAqIG9mIHRoZSBmaXJzdCBlbXB0eSBpbnB1dC5cbiAgICAgKiBSZXR1cm5zIC0xIGlmIGFsbCBpbnB1dHMgYXJlIGZpbGxlZC5cbiAgICAgKi9cbiAgICBnZXRGaXJzdEVtcHR5SW5kZXgoKSB7XG4gICAgICAgIHZhciBfYTtcbiAgICAgICAgY29uc3QgeyBpbnB1dFZhbHVlcywgbGVuZ3RoIH0gPSB0aGlzO1xuICAgICAgICAvLyBDcmVhdGUgYW4gYXJyYXkgb2YgdGhlIHNhbWUgbGVuZ3RoIGFzIHRoZSBpbnB1dCBPVFBcbiAgICAgICAgLy8gYW5kIGZpbGwgaXQgd2l0aCB0aGUgaW5wdXQgdmFsdWVzXG4gICAgICAgIGNvbnN0IHZhbHVlcyA9IEFycmF5LmZyb20oeyBsZW5ndGggfSwgKF8sIGkpID0+IGlucHV0VmFsdWVzW2ldIHx8ICcnKTtcbiAgICAgICAgcmV0dXJuIChfYSA9IHZhbHVlcy5maW5kSW5kZXgoKHZhbHVlKSA9PiAhdmFsdWUgfHwgdmFsdWUgPT09ICcnKSkgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogLTE7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIGluZGV4IG9mIHRoZSBpbnB1dCB0aGF0IHNob3VsZCBiZSB0YWJiZWQgdG8uXG4gICAgICogSWYgYWxsIGlucHV0cyBhcmUgZmlsbGVkLCByZXR1cm5zIHRoZSBsYXN0IGlucHV0J3MgaW5kZXguXG4gICAgICogT3RoZXJ3aXNlLCByZXR1cm5zIHRoZSBpbmRleCBvZiB0aGUgZmlyc3QgZW1wdHkgaW5wdXQuXG4gICAgICovXG4gICAgZ2V0VGFiYmFibGVJbmRleCgpIHtcbiAgICAgICAgY29uc3QgeyBsZW5ndGggfSA9IHRoaXM7XG4gICAgICAgIGNvbnN0IGZpcnN0RW1wdHlJbmRleCA9IHRoaXMuZ2V0Rmlyc3RFbXB0eUluZGV4KCk7XG4gICAgICAgIHJldHVybiBmaXJzdEVtcHR5SW5kZXggPT09IC0xID8gbGVuZ3RoIC0gMSA6IGZpcnN0RW1wdHlJbmRleDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogVXBkYXRlcyB0aGUgdGFiSW5kZXhlcyBmb3IgdGhlIGlucHV0IGJveGVzLlxuICAgICAqIFRoaXMgaXMgdXNlZCB0byBlbnN1cmUgdGhhdCB0aGUgY29ycmVjdCBpbnB1dCBpc1xuICAgICAqIGZvY3VzZWQgd2hlbiB0aGUgdXNlciBuYXZpZ2F0ZXMgdXNpbmcgdGhlIHRhYiBrZXkuXG4gICAgICovXG4gICAgdXBkYXRlVGFiSW5kZXhlcygpIHtcbiAgICAgICAgY29uc3QgeyBpbnB1dFJlZnMsIGlucHV0VmFsdWVzLCBsZW5ndGggfSA9IHRoaXM7XG4gICAgICAgIC8vIEZpbmQgZmlyc3QgZW1wdHkgaW5kZXggYWZ0ZXIgYW55IGZpbGxlZCBib3hlc1xuICAgICAgICBsZXQgZmlyc3RFbXB0eUluZGV4ID0gLTE7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGlmICghaW5wdXRWYWx1ZXNbaV0gfHwgaW5wdXRWYWx1ZXNbaV0gPT09ICcnKSB7XG4gICAgICAgICAgICAgICAgZmlyc3RFbXB0eUluZGV4ID0gaTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICAvLyBVcGRhdGUgdGFiSW5kZXggYW5kIGFyaWEtaGlkZGVuIGZvciBhbGwgaW5wdXRzXG4gICAgICAgIGlucHV0UmVmcy5mb3JFYWNoKChpbnB1dCwgaW5kZXgpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHNob3VsZEJlVGFiYmFibGUgPSBmaXJzdEVtcHR5SW5kZXggPT09IC0xID8gaW5kZXggPT09IGxlbmd0aCAtIDEgOiBmaXJzdEVtcHR5SW5kZXggPT09IGluZGV4O1xuICAgICAgICAgICAgaW5wdXQudGFiSW5kZXggPSBzaG91bGRCZVRhYmJhYmxlID8gMCA6IC0xO1xuICAgICAgICAgICAgLy8gSWYgdGhlIGlucHV0IGlzIGVtcHR5IGFuZCBub3QgdGhlIGZpcnN0IGVtcHR5IGlucHV0LFxuICAgICAgICAgICAgLy8gaXQgc2hvdWxkIGJlIGhpZGRlbiBmcm9tIHNjcmVlbiByZWFkZXJzLlxuICAgICAgICAgICAgY29uc3QgaXNFbXB0eSA9ICFpbnB1dFZhbHVlc1tpbmRleF0gfHwgaW5wdXRWYWx1ZXNbaW5kZXhdID09PSAnJztcbiAgICAgICAgICAgIGlucHV0LnNldEF0dHJpYnV0ZSgnYXJpYS1oaWRkZW4nLCBpc0VtcHR5ICYmICFzaG91bGRCZVRhYmJhYmxlID8gJ3RydWUnIDogJ2ZhbHNlJyk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBEZXRlcm1pbmVzIGlmIGEgc2VwYXJhdG9yIHNob3VsZCBiZSBzaG93biBmb3IgYSBnaXZlbiBpbmRleCBieVxuICAgICAqIGNoZWNraW5nIGlmIHRoZSBpbmRleCBpcyBpbmNsdWRlZCBpbiB0aGUgcGFyc2VkIHNlcGFyYXRvcnMgYXJyYXkuXG4gICAgICovXG4gICAgc2hvd1NlcGFyYXRvcihpbmRleCkge1xuICAgICAgICBjb25zdCB7IGxlbmd0aCB9ID0gdGhpcztcbiAgICAgICAgcmV0dXJuIHRoaXMucGFyc2VkU2VwYXJhdG9ycy5pbmNsdWRlcyhpbmRleCArIDEpICYmIGluZGV4IDwgbGVuZ3RoIC0gMTtcbiAgICB9XG4gICAgcmVuZGVyKCkge1xuICAgICAgICB2YXIgX2EsIF9iO1xuICAgICAgICBjb25zdCB7IGF1dG9jYXBpdGFsaXplLCBjb2xvciwgZGlzYWJsZWQsIGVsLCBmaWxsLCBoYXNGb2N1cywgaW5oZXJpdGVkQXR0cmlidXRlcywgaW5wdXRJZCwgaW5wdXRSZWZzLCBpbnB1dFZhbHVlcywgbGVuZ3RoLCByZWFkb25seSwgc2hhcGUsIHNpemUsIH0gPSB0aGlzO1xuICAgICAgICBjb25zdCBtb2RlID0gZ2V0SW9uTW9kZSh0aGlzKTtcbiAgICAgICAgY29uc3QgaW5wdXRtb2RlID0gdGhpcy5nZXRJbnB1dG1vZGUoKTtcbiAgICAgICAgY29uc3QgdGFiYmFibGVJbmRleCA9IHRoaXMuZ2V0VGFiYmFibGVJbmRleCgpO1xuICAgICAgICBjb25zdCBwYXR0ZXJuID0gdGhpcy5nZXRQYXR0ZXJuKCk7XG4gICAgICAgIGNvbnN0IGhhc0Rlc2NyaXB0aW9uID0gKChfYiA9IChfYSA9IGVsLnF1ZXJ5U2VsZWN0b3IoJy5pbnB1dC1vdHAtZGVzY3JpcHRpb24nKSkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLnRleHRDb250ZW50KSA9PT0gbnVsbCB8fCBfYiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2IudHJpbSgpKSAhPT0gJyc7XG4gICAgICAgIHJldHVybiAoaChIb3N0LCB7IGtleTogJ2RmOGZjYTAzNmNlZGVhMDgxMjE4NWEwMmUzYjY1NWQ3ZDc2Mjg1ZTAnLCBjbGFzczogY3JlYXRlQ29sb3JDbGFzc2VzKGNvbG9yLCB7XG4gICAgICAgICAgICAgICAgW21vZGVdOiB0cnVlLFxuICAgICAgICAgICAgICAgICdoYXMtZm9jdXMnOiBoYXNGb2N1cyxcbiAgICAgICAgICAgICAgICBbYGlucHV0LW90cC1zaXplLSR7c2l6ZX1gXTogdHJ1ZSxcbiAgICAgICAgICAgICAgICBbYGlucHV0LW90cC1zaGFwZS0ke3NoYXBlfWBdOiB0cnVlLFxuICAgICAgICAgICAgICAgIFtgaW5wdXQtb3RwLWZpbGwtJHtmaWxsfWBdOiB0cnVlLFxuICAgICAgICAgICAgICAgICdpbnB1dC1vdHAtZGlzYWJsZWQnOiBkaXNhYmxlZCxcbiAgICAgICAgICAgICAgICAnaW5wdXQtb3RwLXJlYWRvbmx5JzogcmVhZG9ubHksXG4gICAgICAgICAgICB9KSB9LCBoKFwiZGl2XCIsIE9iamVjdC5hc3NpZ24oeyBrZXk6ICc4MzFiZTNmOTM5Y2YwMzdmMGViOGQ3ZTM3ZTBhZmQ0ZWY5YTNjMmM1Jywgcm9sZTogXCJncm91cFwiLCBcImFyaWEtbGFiZWxcIjogXCJPbmUtdGltZSBwYXNzd29yZCBpbnB1dFwiLCBjbGFzczogXCJpbnB1dC1vdHAtZ3JvdXBcIiB9LCBpbmhlcml0ZWRBdHRyaWJ1dGVzKSwgQXJyYXkuZnJvbSh7IGxlbmd0aCB9KS5tYXAoKF8sIGluZGV4KSA9PiAoaChGcmFnbWVudCwgbnVsbCwgaChcImRpdlwiLCB7IGNsYXNzOiBcIm5hdGl2ZS13cmFwcGVyXCIgfSwgaChcImlucHV0XCIsIHsgY2xhc3M6IFwibmF0aXZlLWlucHV0XCIsIGlkOiBgJHtpbnB1dElkfS0ke2luZGV4fWAsIFwiYXJpYS1sYWJlbFwiOiBgSW5wdXQgJHtpbmRleCArIDF9IG9mICR7bGVuZ3RofWAsIHR5cGU6IFwidGV4dFwiLCBhdXRvQ2FwaXRhbGl6ZTogYXV0b2NhcGl0YWxpemUsIGlucHV0bW9kZTogaW5wdXRtb2RlLCBwYXR0ZXJuOiBwYXR0ZXJuLCBkaXNhYmxlZDogZGlzYWJsZWQsIHJlYWRPbmx5OiByZWFkb25seSwgdGFiSW5kZXg6IGluZGV4ID09PSB0YWJiYWJsZUluZGV4ID8gMCA6IC0xLCB2YWx1ZTogaW5wdXRWYWx1ZXNbaW5kZXhdIHx8ICcnLCBhdXRvY29tcGxldGU6IFwib25lLXRpbWUtY29kZVwiLCByZWY6IChlbCkgPT4gKGlucHV0UmVmc1tpbmRleF0gPSBlbCksIG9uSW5wdXQ6IHRoaXMub25JbnB1dChpbmRleCksIG9uQmx1cjogdGhpcy5vbkJsdXIsIG9uRm9jdXM6IHRoaXMub25Gb2N1cyhpbmRleCksIG9uS2V5RG93bjogdGhpcy5vbktleURvd24oaW5kZXgpLCBvblBhc3RlOiB0aGlzLm9uUGFzdGUgfSkpLCB0aGlzLnNob3dTZXBhcmF0b3IoaW5kZXgpICYmIGgoXCJkaXZcIiwgeyBjbGFzczogXCJpbnB1dC1vdHAtc2VwYXJhdG9yXCIgfSkpKSkpLCBoKFwiZGl2XCIsIHsga2V5OiAnNTMxMWZlZGMzNGY3YWYzZWZkNWY2OWU1YTNkNzY4MDU1MTE5YzRmMScsIGNsYXNzOiB7XG4gICAgICAgICAgICAgICAgJ2lucHV0LW90cC1kZXNjcmlwdGlvbic6IHRydWUsXG4gICAgICAgICAgICAgICAgJ2lucHV0LW90cC1kZXNjcmlwdGlvbi1oaWRkZW4nOiAhaGFzRGVzY3JpcHRpb24sXG4gICAgICAgICAgICB9IH0sIGgoXCJzbG90XCIsIHsga2V5OiAnOWU4YWZhMmY3ZmE3NmMzMDkyNTgyZGMyNzc3MGZkZjU2NWExYjliYScgfSkpKSk7XG4gICAgfVxuICAgIGdldCBlbCgpIHsgcmV0dXJuIGdldEVsZW1lbnQodGhpcyk7IH1cbiAgICBzdGF0aWMgZ2V0IHdhdGNoZXJzKCkgeyByZXR1cm4ge1xuICAgICAgICBcInZhbHVlXCI6IFtcInZhbHVlQ2hhbmdlZFwiXSxcbiAgICAgICAgXCJzZXBhcmF0b3JzXCI6IFtcInByb2Nlc3NTZXBhcmF0b3JzXCJdLFxuICAgICAgICBcImxlbmd0aFwiOiBbXCJwcm9jZXNzU2VwYXJhdG9yc1wiXVxuICAgIH07IH1cbn07XG5sZXQgaW5wdXRJZHMgPSAwO1xuSW5wdXRPVFAuc3R5bGUgPSB7XG4gICAgaW9zOiBpbnB1dE90cElvc0NzcyxcbiAgICBtZDogaW5wdXRPdHBNZENzc1xufTtcblxuZXhwb3J0IHsgSW5wdXRPVFAgYXMgaW9uX2lucHV0X290cCB9O1xuIl0sIm5hbWVzIjpbInIiLCJyZWdpc3Rlckluc3RhbmNlIiwiZCIsImNyZWF0ZUV2ZW50IiwibSIsInByaW50SW9uV2FybmluZyIsImUiLCJnZXRJb25Nb2RlIiwiaCIsIkYiLCJGcmFnbWVudCIsImoiLCJIb3N0IiwiayIsImdldEVsZW1lbnQiLCJpIiwiaW5oZXJpdEFyaWFBdHRyaWJ1dGVzIiwiaXNSVEwiLCJjIiwiY3JlYXRlQ29sb3JDbGFzc2VzIiwiaW5wdXRPdHBJb3NDc3MiLCJpbnB1dE90cE1kQ3NzIiwiSW5wdXRPVFAiLCJjb25zdHJ1Y3RvciIsImhvc3RSZWYiLCJpb25JbnB1dCIsImlvbkNoYW5nZSIsImlvbkNvbXBsZXRlIiwiaW9uQmx1ciIsImlvbkZvY3VzIiwiaW5oZXJpdGVkQXR0cmlidXRlcyIsImlucHV0UmVmcyIsImlucHV0SWQiLCJpbnB1dElkcyIsInBhcnNlZFNlcGFyYXRvcnMiLCJpc0tleWJvYXJkTmF2aWdhdGlvbiIsImlucHV0VmFsdWVzIiwiaGFzRm9jdXMiLCJhdXRvY2FwaXRhbGl6ZSIsImRpc2FibGVkIiwiZmlsbCIsImxlbmd0aCIsInJlYWRvbmx5Iiwic2hhcGUiLCJzaXplIiwidHlwZSIsInZhbHVlIiwib25Gb2N1cyIsImluZGV4IiwiZXZlbnQiLCJfYSIsImVtaXQiLCJmb2N1c2VkVmFsdWUiLCJmaW5hbEluZGV4IiwidGFyZ2V0SW5kZXgiLCJnZXRGaXJzdEVtcHR5SW5kZXgiLCJmb2N1cyIsImZvckVhY2giLCJpbnB1dCIsInRhYkluZGV4Iiwib25CbHVyIiwicmVsYXRlZFRhcmdldCIsImlzSW50ZXJuYWxGb2N1cyIsImluY2x1ZGVzIiwidXBkYXRlVGFiSW5kZXhlcyIsImVtaXRJb25DaGFuZ2UiLCJvbktleURvd24iLCJydGwiLCJlbCIsInRhcmdldCIsIm1ldGFTaG9ydGN1dHMiLCJpc1RleHRTZWxlY3Rpb24iLCJzZWxlY3Rpb25TdGFydCIsInNlbGVjdGlvbkVuZCIsIm1ldGFLZXkiLCJjdHJsS2V5Iiwia2V5IiwidG9Mb3dlckNhc2UiLCJ1cGRhdGVWYWx1ZSIsInByZXZlbnREZWZhdWx0IiwiZm9jdXNQcmV2aW91cyIsImlzTGVmdCIsInNob3VsZE1vdmVOZXh0IiwiZm9jdXNOZXh0IiwidmFsaWRLZXlQYXR0ZXJuIiwidGVzdCIsIm9uSW5wdXQiLCJ2YWxpZENoYXJzIiwic3BsaXQiLCJmaWx0ZXIiLCJjaGFyIiwic2xpY2UiLCJyZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJqb2luIiwic2V0VGltZW91dCIsIm5leHRJbmRleCIsIm9uUGFzdGUiLCJfYiIsIl9jIiwicGFzdGVkVGV4dCIsImNsaXBib2FyZERhdGEiLCJnZXREYXRhIiwiZW1pdElvbklucHV0IiwibmV4dEVtcHR5SW5kZXgiLCJzZXRGb2N1cyIsIl90aGlzIiwiX2FzeW5jVG9HZW5lcmF0b3IiLCJ2YWxpZEluZGV4IiwiTWF0aCIsIm1heCIsIm1pbiIsInRhYmJhYmxlSW5kZXgiLCJnZXRUYWJiYWJsZUluZGV4IiwidmFsdWVDaGFuZ2VkIiwiaW5pdGlhbGl6ZVZhbHVlcyIsInByb2Nlc3NTZXBhcmF0b3JzIiwic2VwYXJhdG9ycyIsInVuZGVmaW5lZCIsImlzVmFsaWRGb3JtYXQiLCJzZXBhcmF0b3JWYWx1ZXMiLCJBcnJheSIsImZyb20iLCJfIiwiaXNBcnJheSIsIm1hcCIsInBvcyIsInBhcnNlSW50IiwiaXNOYU4iLCJkdXBsaWNhdGVzIiwiaW5kZXhPZiIsImludmFsaWRTZXBhcmF0b3JzIiwiY29tcG9uZW50V2lsbExvYWQiLCJjb21wb25lbnREaWRMb2FkIiwiUmVnRXhwIiwiZ2V0UGF0dGVybiIsInBhdHRlcm4iLCJnZXRJbnB1dG1vZGUiLCJpbnB1dG1vZGUiLCJTdHJpbmciLCJjaGFycyIsIm5ld1ZhbHVlIiwidG9TdHJpbmciLCJjdXJyZW50SW5kZXgiLCJ2YWx1ZXMiLCJmaW5kSW5kZXgiLCJmaXJzdEVtcHR5SW5kZXgiLCJzaG91bGRCZVRhYmJhYmxlIiwiaXNFbXB0eSIsInNldEF0dHJpYnV0ZSIsInNob3dTZXBhcmF0b3IiLCJyZW5kZXIiLCJjb2xvciIsIm1vZGUiLCJoYXNEZXNjcmlwdGlvbiIsInF1ZXJ5U2VsZWN0b3IiLCJ0ZXh0Q29udGVudCIsInRyaW0iLCJjbGFzcyIsIk9iamVjdCIsImFzc2lnbiIsInJvbGUiLCJpZCIsImF1dG9DYXBpdGFsaXplIiwicmVhZE9ubHkiLCJhdXRvY29tcGxldGUiLCJyZWYiLCJ3YXRjaGVycyIsInN0eWxlIiwiaW9zIiwibWQiLCJpb25faW5wdXRfb3RwIl0sInNvdXJjZVJvb3QiOiJ3ZWJwYWNrOi8vLyIsInhfZ29vZ2xlX2lnbm9yZUxpc3QiOlswXX0=