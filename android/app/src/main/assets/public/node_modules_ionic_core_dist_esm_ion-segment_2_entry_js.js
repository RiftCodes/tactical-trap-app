"use strict";
(self["webpackChunkapp"] = self["webpackChunkapp"] || []).push([["node_modules_ionic_core_dist_esm_ion-segment_2_entry_js"],{

/***/ 469:
/*!******************************************************************!*\
  !*** ./node_modules/@ionic/core/dist/esm/ion-segment_2.entry.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ion_segment: () => (/* binding */ Segment),
/* harmony export */   ion_segment_button: () => (/* binding */ SegmentButton)
/* harmony export */ });
/* harmony import */ var C_Users_Faizan_Desktop_Desktop_Projects_tactical_trap_app_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js */ 9204);
/* harmony import */ var _index_B_U9CtaY_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./index-B_U9CtaY.js */ 4917);
/* harmony import */ var _helpers_1O4D2b7y_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./helpers-1O4D2b7y.js */ 450);
/* harmony import */ var _dir_C53feagD_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./dir-C53feagD.js */ 1008);
/* harmony import */ var _theme_DiVJyqlX_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./theme-DiVJyqlX.js */ 247);

/*!
 * (C) Ionic http://ionicframework.com - MIT License
 */




const segmentIosCss = ":host{--ripple-color:currentColor;-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased;display:grid;grid-auto-columns:1fr;position:relative;-ms-flex-align:stretch;align-items:stretch;-ms-flex-pack:center;justify-content:center;width:100%;background:var(--background);font-family:var(--ion-font-family, inherit);text-align:center;contain:paint;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}:host(.segment-scrollable){-ms-flex-pack:start;justify-content:start;width:auto;overflow-x:auto;grid-auto-columns:minmax(-webkit-min-content, 1fr);grid-auto-columns:minmax(min-content, 1fr)}:host(.segment-scrollable::-webkit-scrollbar){display:none}:host{--background:rgba(var(--ion-text-color-rgb, 0, 0, 0), 0.065);border-radius:8px;overflow:hidden;z-index:0}:host(.ion-color){background:rgba(var(--ion-color-base-rgb), 0.065)}:host(.in-toolbar){-webkit-margin-start:auto;margin-inline-start:auto;-webkit-margin-end:auto;margin-inline-end:auto;margin-top:0;margin-bottom:0;width:auto}:host(.in-toolbar:not(.ion-color)){background:var(--ion-toolbar-segment-background, var(--background))}:host(.in-toolbar-color:not(.ion-color)){background:rgba(var(--ion-color-contrast-rgb), 0.11)}";
const segmentMdCss = ":host{--ripple-color:currentColor;-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased;display:grid;grid-auto-columns:1fr;position:relative;-ms-flex-align:stretch;align-items:stretch;-ms-flex-pack:center;justify-content:center;width:100%;background:var(--background);font-family:var(--ion-font-family, inherit);text-align:center;contain:paint;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}:host(.segment-scrollable){-ms-flex-pack:start;justify-content:start;width:auto;overflow-x:auto;grid-auto-columns:minmax(-webkit-min-content, 1fr);grid-auto-columns:minmax(min-content, 1fr)}:host(.segment-scrollable::-webkit-scrollbar){display:none}:host{--background:transparent;grid-auto-columns:minmax(auto, 360px)}:host(.in-toolbar){min-height:var(--min-height)}:host(.segment-scrollable) ::slotted(ion-segment-button){min-width:auto}";
const Segment = class {
  constructor(hostRef) {
    (0,_index_B_U9CtaY_js__WEBPACK_IMPORTED_MODULE_1__.r)(this, hostRef);
    this.ionChange = (0,_index_B_U9CtaY_js__WEBPACK_IMPORTED_MODULE_1__.d)(this, "ionChange", 7);
    this.ionSelect = (0,_index_B_U9CtaY_js__WEBPACK_IMPORTED_MODULE_1__.d)(this, "ionSelect", 7);
    this.ionStyle = (0,_index_B_U9CtaY_js__WEBPACK_IMPORTED_MODULE_1__.d)(this, "ionStyle", 7);
    this.segmentViewEl = null;
    this.activated = false;
    /**
     * If `true`, the user cannot interact with the segment.
     */
    this.disabled = false;
    /**
     * If `true`, the segment buttons will overflow and the user can swipe to see them.
     * In addition, this will disable the gesture to drag the indicator between the buttons
     * in order to swipe to see hidden buttons.
     */
    this.scrollable = false;
    /**
     * If `true`, users will be able to swipe between segment buttons to activate them.
     */
    this.swipeGesture = true;
    /**
     * If `true`, navigating to an `ion-segment-button` with the keyboard will focus and select the element.
     * If `false`, keyboard navigation will only focus the `ion-segment-button` element.
     */
    this.selectOnFocus = false;
    this.onClick = ev => {
      const current = ev.target;
      const previous = this.checked;
      // If the current element is a segment then that means
      // the user tried to swipe to a segment button and
      // click a segment button at the same time so we should
      // not update the checked segment button
      if (current.tagName === 'ION-SEGMENT') {
        return;
      }
      this.value = current.value;
      if (current !== previous) {
        this.emitValueChange();
      }
      if (this.segmentViewEl) {
        this.updateSegmentView();
        if (this.scrollable && previous) {
          this.checkButton(previous, current);
        }
      } else if (this.scrollable || !this.swipeGesture) {
        if (previous) {
          this.checkButton(previous, current);
        } else {
          this.setCheckedClasses();
        }
      }
    };
    this.onSlottedItemsChange = () => {
      /**
       * When the slotted segment buttons change we need to
       * ensure that the new segment buttons are checked if
       * the value matches the segment button value.
       */
      this.valueChanged(this.value);
    };
    this.getSegmentButton = selector => {
      var _a, _b;
      const buttons = this.getButtons().filter(button => !button.disabled);
      const currIndex = buttons.findIndex(button => button === document.activeElement);
      switch (selector) {
        case 'first':
          return buttons[0];
        case 'last':
          return buttons[buttons.length - 1];
        case 'next':
          return (_a = buttons[currIndex + 1]) !== null && _a !== void 0 ? _a : buttons[0];
        case 'previous':
          return (_b = buttons[currIndex - 1]) !== null && _b !== void 0 ? _b : buttons[buttons.length - 1];
        default:
          return null;
      }
    };
  }
  colorChanged(value, oldValue) {
    /**
     * If color is set after not having
     * previously been set (or vice versa),
     * we need to emit style so the segment-buttons
     * can apply their color classes properly.
     */
    if (oldValue === undefined && value !== undefined || oldValue !== undefined && value === undefined) {
      this.emitStyle();
    }
  }
  swipeGestureChanged() {
    this.gestureChanged();
  }
  valueChanged(value, oldValue) {
    // Force a value to exist if we're using a segment view
    if (this.segmentViewEl && value === undefined) {
      this.value = this.getButtons()[0].value;
      return;
    }
    if (oldValue !== undefined && value !== undefined) {
      const buttons = this.getButtons();
      const previous = buttons.find(button => button.value === oldValue);
      const current = buttons.find(button => button.value === value);
      if (previous && current) {
        if (!this.segmentViewEl) {
          this.checkButton(previous, current);
        } else if (this.triggerScrollOnValueChange !== false) {
          this.updateSegmentView();
        }
      }
    } else if (value !== undefined && oldValue === undefined && this.segmentViewEl) {
      this.updateSegmentView();
    }
    /**
     * `ionSelect` is emitted every time the value changes (internal or external changes).
     * Used by `ion-segment-button` to determine if the button should be checked.
     */
    this.ionSelect.emit({
      value
    });
    // The scroll listener should handle scrolling the active button into view as needed
    if (!this.segmentViewEl) {
      this.scrollActiveButtonIntoView();
    }
    this.triggerScrollOnValueChange = undefined;
  }
  disabledChanged() {
    this.gestureChanged();
    if (!this.segmentViewEl) {
      const buttons = this.getButtons();
      for (const button of buttons) {
        button.disabled = this.disabled;
      }
    } else {
      this.segmentViewEl.disabled = this.disabled;
    }
  }
  gestureChanged() {
    if (this.gesture) {
      this.gesture.enable(!this.scrollable && !this.disabled && this.swipeGesture);
    }
  }
  connectedCallback() {
    this.emitStyle();
    this.segmentViewEl = this.getSegmentView();
  }
  disconnectedCallback() {
    this.segmentViewEl = null;
  }
  componentWillLoad() {
    this.emitStyle();
  }
  componentDidLoad() {
    var _this = this;
    return (0,C_Users_Faizan_Desktop_Desktop_Projects_tactical_trap_app_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      _this.segmentViewEl = _this.getSegmentView();
      _this.setCheckedClasses();
      /**
       * We need to wait for the buttons to all be rendered
       * before we can scroll.
       */
      (0,_helpers_1O4D2b7y_js__WEBPACK_IMPORTED_MODULE_2__.r)(() => {
        /**
         * When the segment loads for the first
         * time we just want to snap the active button into
         * place instead of scroll. Smooth scrolling should only
         * happen when the user interacts with the segment.
         */
        _this.scrollActiveButtonIntoView(false);
      });
      _this.gesture = (yield Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ./index-CfgBF1SE.js */ 5860))).createGesture({
        el: _this.el,
        gestureName: 'segment',
        gesturePriority: 100,
        threshold: 0,
        passive: false,
        onStart: ev => _this.onStart(ev),
        onMove: ev => _this.onMove(ev),
        onEnd: ev => _this.onEnd(ev)
      });
      _this.gestureChanged();
      if (_this.disabled) {
        _this.disabledChanged();
      }
      // Update segment view based on the initial value,
      // but do not animate the scroll
      _this.updateSegmentView(false);
    })();
  }
  onStart(detail) {
    this.valueBeforeGesture = this.value;
    this.activate(detail);
  }
  onMove(detail) {
    this.setNextIndex(detail);
  }
  onEnd(detail) {
    this.setActivated(false);
    this.setNextIndex(detail, true);
    detail.event.stopImmediatePropagation();
    const value = this.value;
    if (value !== undefined) {
      if (this.valueBeforeGesture !== value) {
        this.emitValueChange();
        this.updateSegmentView();
      }
    }
    this.valueBeforeGesture = undefined;
  }
  /**
   * Emits an `ionChange` event.
   *
   * This API should be called for user committed changes.
   * This API should not be used for external value changes.
   */
  emitValueChange() {
    const {
      value
    } = this;
    this.ionChange.emit({
      value
    });
  }
  getButtons() {
    return Array.from(this.el.querySelectorAll('ion-segment-button'));
  }
  get checked() {
    return this.getButtons().find(button => button.value === this.value);
  }
  /*
   * Activate both the segment and the buttons
   * due to a bug with ::slotted in Safari
   */
  setActivated(activated) {
    const buttons = this.getButtons();
    buttons.forEach(button => {
      button.classList.toggle('segment-button-activated', activated);
    });
    this.activated = activated;
  }
  activate(detail) {
    const clicked = detail.event.target;
    const buttons = this.getButtons();
    const checked = buttons.find(button => button.value === this.value);
    // Make sure we are only checking for activation on a segment button
    // since disabled buttons will get the click on the segment
    if (clicked.tagName !== 'ION-SEGMENT-BUTTON') {
      return;
    }
    // If there are no checked buttons, set the current button to checked
    if (!checked) {
      this.value = clicked.value;
      this.setCheckedClasses();
    }
    // If the gesture began on the clicked button with the indicator
    // then we should activate the indicator
    if (this.value === clicked.value) {
      this.setActivated(true);
    }
  }
  getIndicator(button) {
    const root = button.shadowRoot || button;
    return root.querySelector('.segment-button-indicator');
  }
  checkButton(previous, current) {
    const previousIndicator = this.getIndicator(previous);
    const currentIndicator = this.getIndicator(current);
    if (previousIndicator === null || currentIndicator === null) {
      return;
    }
    const previousClientRect = previousIndicator.getBoundingClientRect();
    const currentClientRect = currentIndicator.getBoundingClientRect();
    const widthDelta = previousClientRect.width / currentClientRect.width;
    const xPosition = previousClientRect.left - currentClientRect.left;
    // Scale the indicator width to match the previous indicator width
    // and translate it on top of the previous indicator
    const transform = `translate3d(${xPosition}px, 0, 0) scaleX(${widthDelta})`;
    (0,_index_B_U9CtaY_js__WEBPACK_IMPORTED_MODULE_1__.w)(() => {
      // Remove the transition before positioning on top of the previous indicator
      currentIndicator.classList.remove('segment-button-indicator-animated');
      currentIndicator.style.setProperty('transform', transform);
      // Force a repaint to ensure the transform happens
      currentIndicator.getBoundingClientRect();
      // Add the transition to move the indicator into place
      currentIndicator.classList.add('segment-button-indicator-animated');
      // Remove the transform to slide the indicator back to the button clicked
      currentIndicator.style.setProperty('transform', '');
      this.scrollActiveButtonIntoView(true);
    });
    this.value = current.value;
    this.setCheckedClasses();
  }
  setCheckedClasses() {
    const buttons = this.getButtons();
    const index = buttons.findIndex(button => button.value === this.value);
    const next = index + 1;
    for (const button of buttons) {
      button.classList.remove('segment-button-after-checked');
    }
    if (next < buttons.length) {
      buttons[next].classList.add('segment-button-after-checked');
    }
  }
  getSegmentView() {
    const buttons = this.getButtons();
    // Get the first button with a contentId
    const firstContentId = buttons.find(button => button.contentId);
    // Get the segment content with an id matching the button's contentId
    const segmentContent = document.querySelector(`ion-segment-content[id="${firstContentId === null || firstContentId === void 0 ? void 0 : firstContentId.contentId}"]`);
    // Return the segment view for that matching segment content
    return segmentContent === null || segmentContent === void 0 ? void 0 : segmentContent.closest('ion-segment-view');
  }
  handleSegmentViewScroll(ev) {
    const {
      scrollRatio,
      isManualScroll
    } = ev.detail;
    if (!isManualScroll) {
      return;
    }
    const dispatchedFrom = ev.target;
    const segmentViewEl = this.segmentViewEl;
    const segmentEl = this.el;
    // Only update the indicator if the event was dispatched from the correct segment view
    if (ev.composedPath().includes(segmentViewEl) || (dispatchedFrom === null || dispatchedFrom === void 0 ? void 0 : dispatchedFrom.contains(segmentEl))) {
      const buttons = this.getButtons();
      // If no buttons are found or there is no value set then do nothing
      if (!buttons.length) return;
      const index = buttons.findIndex(button => button.value === this.value);
      const current = buttons[index];
      const nextIndex = Math.round(scrollRatio * (buttons.length - 1));
      if (this.lastNextIndex === undefined || this.lastNextIndex !== nextIndex) {
        this.lastNextIndex = nextIndex;
        this.triggerScrollOnValueChange = false;
        this.checkButton(current, buttons[nextIndex]);
        this.emitValueChange();
      }
    }
  }
  /**
   * Finds the related segment view and sets its current content
   * based on the selected segment button. This method
   * should be called on initial load of the segment,
   * after the gesture is completed (if dragging between segments)
   * and when a segment button is clicked directly.
   */
  updateSegmentView(smoothScroll = true) {
    const buttons = this.getButtons();
    const button = buttons.find(btn => btn.value === this.value);
    // If the button does not have a contentId then there is
    // no associated segment view to update
    if (!(button === null || button === void 0 ? void 0 : button.contentId)) {
      return;
    }
    const segmentView = this.segmentViewEl;
    if (segmentView) {
      segmentView.setContent(button.contentId, smoothScroll);
    }
  }
  scrollActiveButtonIntoView(smoothScroll = true) {
    const {
      scrollable,
      value,
      el
    } = this;
    if (scrollable) {
      const buttons = this.getButtons();
      const activeButton = buttons.find(button => button.value === value);
      if (activeButton !== undefined) {
        const scrollContainerBox = el.getBoundingClientRect();
        const activeButtonBox = activeButton.getBoundingClientRect();
        /**
         * Subtract the active button x position from the scroll
         * container x position. This will give us the x position
         * of the active button within the scroll container.
         */
        const activeButtonLeft = activeButtonBox.x - scrollContainerBox.x;
        /**
         * If we just used activeButtonLeft, then the active button
         * would be aligned with the left edge of the scroll container.
         * Instead, we want the segment button to be centered. As a result,
         * we subtract half of the scroll container width. This will position
         * the left edge of the active button at the midpoint of the scroll container.
         * We then add half of the active button width. This will position the active
         * button such that the midpoint of the active button is at the midpoint of the
         * scroll container.
         */
        const centeredX = activeButtonLeft - scrollContainerBox.width / 2 + activeButtonBox.width / 2;
        /**
         * newScrollPosition is the absolute scroll position that the
         * container needs to move to in order to center the active button.
         * It is calculated by adding the current scroll position
         * (scrollLeft) to the offset needed to center the button
         * (centeredX).
         */
        const newScrollPosition = el.scrollLeft + centeredX;
        /**
         * We intentionally use scrollTo here instead of scrollIntoView
         * to avoid a WebKit bug where accelerated animations break
         * when using scrollIntoView. Using scrollIntoView will cause the
         * segment container to jump during the transition and then snap into place.
         * This is because scrollIntoView can potentially cause parent element
         * containers to also scroll. scrollTo does not have this same behavior, so
         * we use this API instead.
         *
         * scrollTo is used instead of scrollBy because there is a
         * Webkit bug that causes scrollBy to not work smoothly when
         * the active button is near the edge of the scroll container.
         * This leads to the buttons to jump around during the transition.
         *
         * Note that if there is not enough scrolling space to center the element
         * within the scroll container, the browser will attempt
         * to center by as much as it can.
         */
        el.scrollTo({
          top: 0,
          left: newScrollPosition,
          behavior: smoothScroll ? 'smooth' : 'instant'
        });
      }
    }
  }
  setNextIndex(detail, isEnd = false) {
    const rtl = (0,_dir_C53feagD_js__WEBPACK_IMPORTED_MODULE_3__.i)(this.el);
    const activated = this.activated;
    const buttons = this.getButtons();
    const index = buttons.findIndex(button => button.value === this.value);
    const previous = buttons[index];
    let current;
    let nextIndex;
    if (index === -1) {
      return;
    }
    // Get the element that the touch event started on in case
    // it was the checked button, then we will move the indicator
    const rect = previous.getBoundingClientRect();
    const left = rect.left;
    const width = rect.width;
    // Get the element that the gesture is on top of based on the currentX of the
    // gesture event and the Y coordinate of the starting element, since the gesture
    // can move up and down off of the segment
    const currentX = detail.currentX;
    const previousY = rect.top + rect.height / 2;
    /**
     * Segment can be used inside the shadow dom
     * so doing document.elementFromPoint would never
     * return a segment button in that instance.
     * We use getRootNode to which will return the parent
     * shadow root if used inside a shadow component and
     * returns document otherwise.
     */
    const root = this.el.getRootNode();
    const nextEl = root.elementFromPoint(currentX, previousY);
    const decreaseIndex = rtl ? currentX > left + width : currentX < left;
    const increaseIndex = rtl ? currentX < left : currentX > left + width;
    // If the indicator is currently activated then we have started the gesture
    // on top of the checked button so we need to slide the indicator
    // by checking the button next to it as we move
    if (activated && !isEnd) {
      // Decrease index, move left in LTR & right in RTL
      if (decreaseIndex) {
        const newIndex = index - 1;
        if (newIndex >= 0) {
          nextIndex = newIndex;
        }
        // Increase index, moves right in LTR & left in RTL
      } else if (increaseIndex) {
        if (activated && !isEnd) {
          const newIndex = index + 1;
          if (newIndex < buttons.length) {
            nextIndex = newIndex;
          }
        }
      }
      if (nextIndex !== undefined && !buttons[nextIndex].disabled) {
        current = buttons[nextIndex];
      }
    }
    // If the indicator is not activated then we will just set the indicator
    // to the element where the gesture ended
    if (!activated && isEnd) {
      current = nextEl;
    }
    if (current != null) {
      /**
       * If current element is ion-segment then that means
       * user tried to select a disabled ion-segment-button,
       * and we should not update the ripple.
       */
      if (current.tagName === 'ION-SEGMENT') {
        return false;
      }
      if (previous !== current) {
        this.checkButton(previous, current);
      }
    }
    return true;
  }
  emitStyle() {
    this.ionStyle.emit({
      segment: true
    });
  }
  onKeyDown(ev) {
    const rtl = (0,_dir_C53feagD_js__WEBPACK_IMPORTED_MODULE_3__.i)(this.el);
    let keyDownSelectsButton = this.selectOnFocus;
    let current;
    switch (ev.key) {
      case 'ArrowRight':
        ev.preventDefault();
        current = rtl ? this.getSegmentButton('previous') : this.getSegmentButton('next');
        break;
      case 'ArrowLeft':
        ev.preventDefault();
        current = rtl ? this.getSegmentButton('next') : this.getSegmentButton('previous');
        break;
      case 'Home':
        ev.preventDefault();
        current = this.getSegmentButton('first');
        break;
      case 'End':
        ev.preventDefault();
        current = this.getSegmentButton('last');
        break;
      case ' ':
      case 'Enter':
        ev.preventDefault();
        current = document.activeElement;
        keyDownSelectsButton = true;
    }
    if (!current) {
      return;
    }
    if (keyDownSelectsButton) {
      const previous = this.checked;
      this.checkButton(previous || current, current);
      if (current !== previous) {
        this.emitValueChange();
      }
    }
    current.setFocus();
  }
  render() {
    const mode = (0,_index_B_U9CtaY_js__WEBPACK_IMPORTED_MODULE_1__.e)(this);
    return (0,_index_B_U9CtaY_js__WEBPACK_IMPORTED_MODULE_1__.h)(_index_B_U9CtaY_js__WEBPACK_IMPORTED_MODULE_1__.j, {
      key: 'e67ed512739cf2cfe657b0c44ebc3dfb1e9fbb79',
      role: "tablist",
      onClick: this.onClick,
      class: (0,_theme_DiVJyqlX_js__WEBPACK_IMPORTED_MODULE_4__.c)(this.color, {
        [mode]: true,
        'in-toolbar': (0,_theme_DiVJyqlX_js__WEBPACK_IMPORTED_MODULE_4__.h)('ion-toolbar', this.el),
        'in-toolbar-color': (0,_theme_DiVJyqlX_js__WEBPACK_IMPORTED_MODULE_4__.h)('ion-toolbar[color]', this.el),
        'segment-activated': this.activated,
        'segment-disabled': this.disabled,
        'segment-scrollable': this.scrollable
      })
    }, (0,_index_B_U9CtaY_js__WEBPACK_IMPORTED_MODULE_1__.h)("slot", {
      key: '804d8acfcb9abfeeee38244b015fbc5c36330b9e',
      onSlotchange: this.onSlottedItemsChange
    }));
  }
  get el() {
    return (0,_index_B_U9CtaY_js__WEBPACK_IMPORTED_MODULE_1__.k)(this);
  }
  static get watchers() {
    return {
      "color": ["colorChanged"],
      "swipeGesture": ["swipeGestureChanged"],
      "value": ["valueChanged"],
      "disabled": ["disabledChanged"]
    };
  }
};
Segment.style = {
  ios: segmentIosCss,
  md: segmentMdCss
};
const segmentButtonIosCss = ":host{--color:initial;--color-hover:var(--color);--color-checked:var(--color);--color-disabled:var(--color);--padding-start:0;--padding-end:0;--padding-top:0;--padding-bottom:0;border-radius:var(--border-radius);display:-ms-flexbox;display:flex;position:relative;-ms-flex-direction:column;flex-direction:column;height:auto;background:var(--background);color:var(--color);text-decoration:none;text-overflow:ellipsis;white-space:nowrap;cursor:pointer;grid-row:1;-webkit-font-kerning:none;font-kerning:none}.button-native{border-radius:0;font-family:inherit;font-size:inherit;font-style:inherit;font-weight:inherit;letter-spacing:inherit;text-decoration:inherit;text-indent:inherit;text-overflow:inherit;text-transform:inherit;text-align:inherit;white-space:inherit;color:inherit;-webkit-margin-start:var(--margin-start);margin-inline-start:var(--margin-start);-webkit-margin-end:var(--margin-end);margin-inline-end:var(--margin-end);margin-top:var(--margin-top);margin-bottom:var(--margin-bottom);-webkit-padding-start:var(--padding-start);padding-inline-start:var(--padding-start);-webkit-padding-end:var(--padding-end);padding-inline-end:var(--padding-end);padding-top:var(--padding-top);padding-bottom:var(--padding-bottom);-webkit-transform:translate3d(0,  0,  0);transform:translate3d(0,  0,  0);display:-ms-flexbox;display:flex;position:relative;-ms-flex-direction:inherit;flex-direction:inherit;-ms-flex-positive:1;flex-grow:1;-ms-flex-align:center;align-items:center;-ms-flex-pack:center;justify-content:center;width:100%;min-width:inherit;max-width:inherit;height:auto;min-height:inherit;max-height:inherit;-webkit-transition:var(--transition);transition:var(--transition);border:none;outline:none;background:transparent;contain:content;pointer-events:none;overflow:hidden;z-index:2}.button-native::after{left:0;right:0;top:0;bottom:0;position:absolute;content:\"\";opacity:0}.button-inner{display:-ms-flexbox;display:flex;position:relative;-ms-flex-flow:inherit;flex-flow:inherit;-ms-flex-align:center;align-items:center;-ms-flex-pack:center;justify-content:center;width:100%;height:100%;z-index:1}:host(.segment-button-checked){background:var(--background-checked);color:var(--color-checked)}:host(.segment-button-disabled){cursor:default;pointer-events:none}:host(.ion-focused) .button-native{color:var(--color-focused)}:host(.ion-focused) .button-native::after{background:var(--background-focused);opacity:var(--background-focused-opacity)}:host(:focus){outline:none}@media (any-hover: hover){:host(:hover) .button-native{color:var(--color-hover)}:host(:hover) .button-native::after{background:var(--background-hover);opacity:var(--background-hover-opacity)}:host(.segment-button-checked:hover) .button-native{color:var(--color-checked)}}::slotted(ion-icon){-ms-flex-negative:0;flex-shrink:0;-ms-flex-order:-1;order:-1;pointer-events:none}::slotted(ion-label){display:block;-ms-flex-item-align:center;align-self:center;max-width:100%;line-height:22px;text-overflow:ellipsis;white-space:nowrap;overflow:hidden;-webkit-box-sizing:border-box;box-sizing:border-box;pointer-events:none}:host(.segment-button-layout-icon-top) .button-native{-ms-flex-direction:column;flex-direction:column}:host(.segment-button-layout-icon-start) .button-native{-ms-flex-direction:row;flex-direction:row}:host(.segment-button-layout-icon-end) .button-native{-ms-flex-direction:row-reverse;flex-direction:row-reverse}:host(.segment-button-layout-icon-bottom) .button-native{-ms-flex-direction:column-reverse;flex-direction:column-reverse}:host(.segment-button-layout-icon-hide) ::slotted(ion-icon){display:none}:host(.segment-button-layout-label-hide) ::slotted(ion-label){display:none}ion-ripple-effect{color:var(--ripple-color, var(--color-checked))}.segment-button-indicator{-webkit-transform-origin:left;transform-origin:left;position:absolute;opacity:0;-webkit-box-sizing:border-box;box-sizing:border-box;will-change:transform, opacity;pointer-events:none}.segment-button-indicator-background{width:100%;height:var(--indicator-height);-webkit-transform:var(--indicator-transform);transform:var(--indicator-transform);-webkit-box-shadow:var(--indicator-box-shadow);box-shadow:var(--indicator-box-shadow);pointer-events:none}.segment-button-indicator-animated{-webkit-transition:var(--indicator-transition);transition:var(--indicator-transition)}:host(.segment-button-checked) .segment-button-indicator{opacity:1}@media (prefers-reduced-motion: reduce){.segment-button-indicator-background{-webkit-transform:none;transform:none}.segment-button-indicator-animated{-webkit-transition:none;transition:none}}:host{--background:none;--background-checked:none;--background-hover:none;--background-hover-opacity:0;--background-focused:none;--background-focused-opacity:0;--border-radius:7px;--border-width:1px;--border-color:rgba(var(--ion-text-color-rgb, 0, 0, 0), 0.12);--border-style:solid;--indicator-box-shadow:0 0 5px rgba(0, 0, 0, 0.16);--indicator-color:var(--ion-color-step-350, var(--ion-background-color-step-350, var(--ion-background-color, #fff)));--indicator-height:100%;--indicator-transition:transform 260ms cubic-bezier(0.4, 0, 0.2, 1);--indicator-transform:none;--transition:100ms all linear;--padding-top:0;--padding-end:13px;--padding-bottom:0;--padding-start:13px;margin-top:2px;margin-bottom:2px;position:relative;-ms-flex-direction:row;flex-direction:row;min-width:70px;min-height:28px;-webkit-transform:translate3d(0, 0, 0);transform:translate3d(0, 0, 0);font-size:13px;font-weight:450;line-height:37px}:host::before{margin-left:0;margin-right:0;margin-top:5px;margin-bottom:5px;-webkit-transition:160ms opacity ease-in-out;transition:160ms opacity ease-in-out;-webkit-transition-delay:100ms;transition-delay:100ms;border-left:var(--border-width) var(--border-style) var(--border-color);content:\"\";opacity:1;will-change:opacity}:host(:first-of-type)::before{border-left-color:transparent}:host(.segment-button-disabled){opacity:0.3}::slotted(ion-icon){font-size:24px}:host(.segment-button-layout-icon-start) ::slotted(ion-label){-webkit-margin-start:2px;margin-inline-start:2px;-webkit-margin-end:0;margin-inline-end:0}:host(.segment-button-layout-icon-end) ::slotted(ion-label){-webkit-margin-start:0;margin-inline-start:0;-webkit-margin-end:2px;margin-inline-end:2px}.segment-button-indicator{-webkit-padding-start:2px;padding-inline-start:2px;-webkit-padding-end:2px;padding-inline-end:2px;left:0;right:0;top:0;bottom:0}.segment-button-indicator-background{border-radius:var(--border-radius);background:var(--indicator-color)}.segment-button-indicator-background{-webkit-transition:var(--indicator-transition);transition:var(--indicator-transition)}:host(.segment-button-checked)::before,:host(.segment-button-after-checked)::before{opacity:0}:host(.segment-button-checked){z-index:-1}:host(.segment-button-activated){--indicator-transform:scale(0.95)}:host(.ion-focused) .button-native{opacity:0.7}@media (any-hover: hover){:host(:hover) .button-native{opacity:0.5}:host(.segment-button-checked:hover) .button-native{opacity:1}}:host(.in-segment-color){background:none;color:var(--ion-text-color, #000)}:host(.in-segment-color) .segment-button-indicator-background{background:var(--ion-color-step-350, var(--ion-background-color-step-350, var(--ion-background-color, #fff)))}@media (any-hover: hover){:host(.in-segment-color:hover) .button-native,:host(.in-segment-color.segment-button-checked:hover) .button-native{color:var(--ion-text-color, #000)}}:host(.in-toolbar:not(.in-segment-color)){--background-checked:var(--ion-toolbar-segment-background-checked, none);--color:var(--ion-toolbar-segment-color, var(--ion-toolbar-color), initial);--color-checked:var(--ion-toolbar-segment-color-checked, var(--ion-toolbar-color), initial);--indicator-color:var(--ion-toolbar-segment-indicator-color, var(--ion-color-step-350, var(--ion-background-color-step-350, var(--ion-background-color, #fff))))}:host(.in-toolbar-color) .segment-button-indicator-background{background:var(--ion-color-contrast)}:host(.in-toolbar-color:not(.in-segment-color)) .button-native{color:var(--ion-color-contrast)}:host(.in-toolbar-color.segment-button-checked:not(.in-segment-color)) .button-native{color:var(--ion-color-base)}@media (any-hover: hover){:host(.in-toolbar-color:not(.in-segment-color):hover) .button-native{color:var(--ion-color-contrast)}:host(.in-toolbar-color.segment-button-checked:not(.in-segment-color):hover) .button-native{color:var(--ion-color-base)}}";
const segmentButtonMdCss = ":host{--color:initial;--color-hover:var(--color);--color-checked:var(--color);--color-disabled:var(--color);--padding-start:0;--padding-end:0;--padding-top:0;--padding-bottom:0;border-radius:var(--border-radius);display:-ms-flexbox;display:flex;position:relative;-ms-flex-direction:column;flex-direction:column;height:auto;background:var(--background);color:var(--color);text-decoration:none;text-overflow:ellipsis;white-space:nowrap;cursor:pointer;grid-row:1;-webkit-font-kerning:none;font-kerning:none}.button-native{border-radius:0;font-family:inherit;font-size:inherit;font-style:inherit;font-weight:inherit;letter-spacing:inherit;text-decoration:inherit;text-indent:inherit;text-overflow:inherit;text-transform:inherit;text-align:inherit;white-space:inherit;color:inherit;-webkit-margin-start:var(--margin-start);margin-inline-start:var(--margin-start);-webkit-margin-end:var(--margin-end);margin-inline-end:var(--margin-end);margin-top:var(--margin-top);margin-bottom:var(--margin-bottom);-webkit-padding-start:var(--padding-start);padding-inline-start:var(--padding-start);-webkit-padding-end:var(--padding-end);padding-inline-end:var(--padding-end);padding-top:var(--padding-top);padding-bottom:var(--padding-bottom);-webkit-transform:translate3d(0,  0,  0);transform:translate3d(0,  0,  0);display:-ms-flexbox;display:flex;position:relative;-ms-flex-direction:inherit;flex-direction:inherit;-ms-flex-positive:1;flex-grow:1;-ms-flex-align:center;align-items:center;-ms-flex-pack:center;justify-content:center;width:100%;min-width:inherit;max-width:inherit;height:auto;min-height:inherit;max-height:inherit;-webkit-transition:var(--transition);transition:var(--transition);border:none;outline:none;background:transparent;contain:content;pointer-events:none;overflow:hidden;z-index:2}.button-native::after{left:0;right:0;top:0;bottom:0;position:absolute;content:\"\";opacity:0}.button-inner{display:-ms-flexbox;display:flex;position:relative;-ms-flex-flow:inherit;flex-flow:inherit;-ms-flex-align:center;align-items:center;-ms-flex-pack:center;justify-content:center;width:100%;height:100%;z-index:1}:host(.segment-button-checked){background:var(--background-checked);color:var(--color-checked)}:host(.segment-button-disabled){cursor:default;pointer-events:none}:host(.ion-focused) .button-native{color:var(--color-focused)}:host(.ion-focused) .button-native::after{background:var(--background-focused);opacity:var(--background-focused-opacity)}:host(:focus){outline:none}@media (any-hover: hover){:host(:hover) .button-native{color:var(--color-hover)}:host(:hover) .button-native::after{background:var(--background-hover);opacity:var(--background-hover-opacity)}:host(.segment-button-checked:hover) .button-native{color:var(--color-checked)}}::slotted(ion-icon){-ms-flex-negative:0;flex-shrink:0;-ms-flex-order:-1;order:-1;pointer-events:none}::slotted(ion-label){display:block;-ms-flex-item-align:center;align-self:center;max-width:100%;line-height:22px;text-overflow:ellipsis;white-space:nowrap;overflow:hidden;-webkit-box-sizing:border-box;box-sizing:border-box;pointer-events:none}:host(.segment-button-layout-icon-top) .button-native{-ms-flex-direction:column;flex-direction:column}:host(.segment-button-layout-icon-start) .button-native{-ms-flex-direction:row;flex-direction:row}:host(.segment-button-layout-icon-end) .button-native{-ms-flex-direction:row-reverse;flex-direction:row-reverse}:host(.segment-button-layout-icon-bottom) .button-native{-ms-flex-direction:column-reverse;flex-direction:column-reverse}:host(.segment-button-layout-icon-hide) ::slotted(ion-icon){display:none}:host(.segment-button-layout-label-hide) ::slotted(ion-label){display:none}ion-ripple-effect{color:var(--ripple-color, var(--color-checked))}.segment-button-indicator{-webkit-transform-origin:left;transform-origin:left;position:absolute;opacity:0;-webkit-box-sizing:border-box;box-sizing:border-box;will-change:transform, opacity;pointer-events:none}.segment-button-indicator-background{width:100%;height:var(--indicator-height);-webkit-transform:var(--indicator-transform);transform:var(--indicator-transform);-webkit-box-shadow:var(--indicator-box-shadow);box-shadow:var(--indicator-box-shadow);pointer-events:none}.segment-button-indicator-animated{-webkit-transition:var(--indicator-transition);transition:var(--indicator-transition)}:host(.segment-button-checked) .segment-button-indicator{opacity:1}@media (prefers-reduced-motion: reduce){.segment-button-indicator-background{-webkit-transform:none;transform:none}.segment-button-indicator-animated{-webkit-transition:none;transition:none}}:host{--background:none;--background-checked:none;--background-hover:var(--color-checked);--background-focused:var(--color-checked);--background-activated-opacity:0;--background-focused-opacity:.12;--background-hover-opacity:.04;--color:rgba(var(--ion-text-color-rgb, 0, 0, 0), 0.6);--color-checked:var(--ion-color-primary, #0054e9);--indicator-box-shadow:none;--indicator-color:var(--color-checked);--indicator-height:2px;--indicator-transition:transform 250ms cubic-bezier(0.4, 0, 0.2, 1);--indicator-transform:none;--padding-top:0;--padding-end:16px;--padding-bottom:0;--padding-start:16px;--transition:color 0.15s linear 0s, opacity 0.15s linear 0s;min-width:90px;min-height:48px;border-width:var(--border-width);border-style:var(--border-style);border-color:var(--border-color);font-size:14px;font-weight:500;letter-spacing:0.06em;line-height:40px;text-transform:uppercase}:host(.segment-button-disabled){opacity:0.3}:host(.in-segment-color){background:none;color:rgba(var(--ion-text-color-rgb, 0, 0, 0), 0.6)}:host(.in-segment-color) ion-ripple-effect{color:var(--ion-color-base)}:host(.in-segment-color) .segment-button-indicator-background{background:var(--ion-color-base)}:host(.in-segment-color.segment-button-checked) .button-native{color:var(--ion-color-base)}:host(.in-segment-color.ion-focused) .button-native::after{background:var(--ion-color-base)}@media (any-hover: hover){:host(.in-segment-color:hover) .button-native{color:rgba(var(--ion-text-color-rgb, 0, 0, 0), 0.6)}:host(.in-segment-color:hover) .button-native::after{background:var(--ion-color-base)}:host(.in-segment-color.segment-button-checked:hover) .button-native{color:var(--ion-color-base)}}:host(.in-toolbar:not(.in-segment-color)){--background:var(--ion-toolbar-segment-background, none);--background-checked:var(--ion-toolbar-segment-background-checked, none);--color:var(--ion-toolbar-segment-color, rgba(var(--ion-text-color-rgb, 0, 0, 0), 0.6));--color-checked:var(--ion-toolbar-segment-color-checked, var(--ion-color-primary, #0054e9));--indicator-color:var(--ion-toolbar-segment-color-checked, var(--color-checked))}:host(.in-toolbar-color:not(.in-segment-color)) .button-native{color:rgba(var(--ion-color-contrast-rgb), 0.6)}:host(.in-toolbar-color.segment-button-checked:not(.in-segment-color)) .button-native{color:var(--ion-color-contrast)}@media (any-hover: hover){:host(.in-toolbar-color:not(.in-segment-color)) .button-native::after{background:var(--ion-color-contrast)}}::slotted(ion-icon){margin-top:12px;margin-bottom:12px;font-size:24px}::slotted(ion-label){margin-top:12px;margin-bottom:12px}:host(.segment-button-layout-icon-top) ::slotted(ion-label),:host(.segment-button-layout-icon-bottom) ::slotted(ion-icon){margin-top:0}:host(.segment-button-layout-icon-top) ::slotted(ion-icon),:host(.segment-button-layout-icon-bottom) ::slotted(ion-label){margin-bottom:0}:host(.segment-button-layout-icon-start) ::slotted(ion-label){-webkit-margin-start:8px;margin-inline-start:8px;-webkit-margin-end:0;margin-inline-end:0}:host(.segment-button-layout-icon-end) ::slotted(ion-label){-webkit-margin-start:0;margin-inline-start:0;-webkit-margin-end:8px;margin-inline-end:8px}:host(.segment-button-has-icon-only) ::slotted(ion-icon){margin-top:12px;margin-bottom:12px}:host(.segment-button-has-label-only) ::slotted(ion-label){margin-top:12px;margin-bottom:12px}.segment-button-indicator{left:0;right:0;bottom:0}.segment-button-indicator-background{background:var(--indicator-color)}:host(.in-toolbar:not(.in-segment-color)) .segment-button-indicator-background{background:var(--ion-toolbar-segment-indicator-color, var(--indicator-color))}:host(.in-toolbar-color:not(.in-segment-color)) .segment-button-indicator-background{background:var(--ion-color-contrast)}";
let ids = 0;
const SegmentButton = class {
  constructor(hostRef) {
    (0,_index_B_U9CtaY_js__WEBPACK_IMPORTED_MODULE_1__.r)(this, hostRef);
    this.segmentEl = null;
    this.inheritedAttributes = {};
    this.checked = false;
    /**
     * If `true`, the user cannot interact with the segment button.
     */
    this.disabled = false;
    /**
     * Set the layout of the text and icon in the segment.
     */
    this.layout = 'icon-top';
    /**
     * The type of the button.
     */
    this.type = 'button';
    /**
     * The value of the segment button.
     */
    this.value = 'ion-sb-' + ids++;
    this.updateStyle = () => {
      (0,_index_B_U9CtaY_js__WEBPACK_IMPORTED_MODULE_1__.n)(this);
    };
    this.updateState = () => {
      const {
        segmentEl
      } = this;
      if (segmentEl) {
        this.checked = segmentEl.value === this.value;
        if (segmentEl.disabled) {
          this.disabled = true;
        }
      }
    };
  }
  valueChanged() {
    this.updateState();
  }
  connectedCallback() {
    const segmentEl = this.segmentEl = this.el.closest('ion-segment');
    if (segmentEl) {
      this.updateState();
      (0,_helpers_1O4D2b7y_js__WEBPACK_IMPORTED_MODULE_2__.f)(segmentEl, 'ionSelect', this.updateState);
      (0,_helpers_1O4D2b7y_js__WEBPACK_IMPORTED_MODULE_2__.f)(segmentEl, 'ionStyle', this.updateStyle);
    }
    // Prevent buttons from being disabled when associated with segment content
    if (this.contentId && this.disabled) {
      (0,_index_B_U9CtaY_js__WEBPACK_IMPORTED_MODULE_1__.m)(`[ion-segment-button] - Segment buttons cannot be disabled when associated with an <ion-segment-content>.`);
      this.disabled = false;
    }
  }
  disconnectedCallback() {
    const segmentEl = this.segmentEl;
    if (segmentEl) {
      (0,_helpers_1O4D2b7y_js__WEBPACK_IMPORTED_MODULE_2__.m)(segmentEl, 'ionSelect', this.updateState);
      (0,_helpers_1O4D2b7y_js__WEBPACK_IMPORTED_MODULE_2__.m)(segmentEl, 'ionStyle', this.updateStyle);
      this.segmentEl = null;
    }
  }
  componentWillLoad() {
    this.inheritedAttributes = Object.assign({}, (0,_helpers_1O4D2b7y_js__WEBPACK_IMPORTED_MODULE_2__.b)(this.el, ['aria-label']));
    // Return if there is no contentId defined
    if (!this.contentId) return;
    // Attempt to find the Segment Content by its contentId
    const segmentContent = document.getElementById(this.contentId);
    // If no associated Segment Content exists, log an error and return
    if (!segmentContent) {
      (0,_index_B_U9CtaY_js__WEBPACK_IMPORTED_MODULE_1__.o)(`[ion-segment-button] - Unable to find Segment Content with id="${this.contentId}".`);
      return;
    }
    // Ensure the found element is a valid ION-SEGMENT-CONTENT
    if (segmentContent.tagName !== 'ION-SEGMENT-CONTENT') {
      (0,_index_B_U9CtaY_js__WEBPACK_IMPORTED_MODULE_1__.o)(`[ion-segment-button] - Element with id="${this.contentId}" is not an <ion-segment-content> element.`);
      return;
    }
  }
  get hasLabel() {
    return !!this.el.querySelector('ion-label');
  }
  get hasIcon() {
    return !!this.el.querySelector('ion-icon');
  }
  /**
   * @internal
   * Focuses the native <button> element
   * inside of ion-segment-button.
   */
  setFocus() {
    var _this2 = this;
    return (0,C_Users_Faizan_Desktop_Desktop_Projects_tactical_trap_app_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      const {
        nativeEl
      } = _this2;
      if (nativeEl !== undefined) {
        nativeEl.focus();
      }
    })();
  }
  render() {
    const {
      checked,
      type,
      disabled,
      hasIcon,
      hasLabel,
      layout,
      segmentEl
    } = this;
    const mode = (0,_index_B_U9CtaY_js__WEBPACK_IMPORTED_MODULE_1__.e)(this);
    const hasSegmentColor = () => (segmentEl === null || segmentEl === void 0 ? void 0 : segmentEl.color) !== undefined;
    return (0,_index_B_U9CtaY_js__WEBPACK_IMPORTED_MODULE_1__.h)(_index_B_U9CtaY_js__WEBPACK_IMPORTED_MODULE_1__.j, {
      key: '26cb7ee90455bcaa6416125802d7e5729fa05b5b',
      class: {
        [mode]: true,
        'in-toolbar': (0,_theme_DiVJyqlX_js__WEBPACK_IMPORTED_MODULE_4__.h)('ion-toolbar', this.el),
        'in-toolbar-color': (0,_theme_DiVJyqlX_js__WEBPACK_IMPORTED_MODULE_4__.h)('ion-toolbar[color]', this.el),
        'in-segment': (0,_theme_DiVJyqlX_js__WEBPACK_IMPORTED_MODULE_4__.h)('ion-segment', this.el),
        'in-segment-color': hasSegmentColor(),
        'segment-button-has-label': hasLabel,
        'segment-button-has-icon': hasIcon,
        'segment-button-has-label-only': hasLabel && !hasIcon,
        'segment-button-has-icon-only': hasIcon && !hasLabel,
        'segment-button-disabled': disabled,
        'segment-button-checked': checked,
        [`segment-button-layout-${layout}`]: true,
        'ion-activatable': true,
        'ion-activatable-instant': true,
        'ion-focusable': true
      }
    }, (0,_index_B_U9CtaY_js__WEBPACK_IMPORTED_MODULE_1__.h)("button", Object.assign({
      key: '75add37f11c107d1e2cfdb154e08004e9579e863',
      "aria-selected": checked ? 'true' : 'false',
      role: "tab",
      ref: el => this.nativeEl = el,
      type: type,
      class: "button-native",
      part: "native",
      disabled: disabled
    }, this.inheritedAttributes), (0,_index_B_U9CtaY_js__WEBPACK_IMPORTED_MODULE_1__.h)("span", {
      key: '8e720d2a3e304903685bf09d226a64e944d78a22',
      class: "button-inner"
    }, (0,_index_B_U9CtaY_js__WEBPACK_IMPORTED_MODULE_1__.h)("slot", {
      key: 'c8e7b3ebf8f03042a1001155643b585283c73c65'
    })), mode === 'md' && (0,_index_B_U9CtaY_js__WEBPACK_IMPORTED_MODULE_1__.h)("ion-ripple-effect", {
      key: '3586ac317b8d82c92b0ccfbfae42f8778612321b'
    })), (0,_index_B_U9CtaY_js__WEBPACK_IMPORTED_MODULE_1__.h)("div", {
      key: '9cf93957da9e8dc333c8b05327bb903385b1c5f4',
      part: "indicator",
      class: "segment-button-indicator segment-button-indicator-animated"
    }, (0,_index_B_U9CtaY_js__WEBPACK_IMPORTED_MODULE_1__.h)("div", {
      key: 'd3b6f0b3860ec6896b46703f64ed1cc8c75612e3',
      part: "indicator-background",
      class: "segment-button-indicator-background"
    })));
  }
  get el() {
    return (0,_index_B_U9CtaY_js__WEBPACK_IMPORTED_MODULE_1__.k)(this);
  }
  static get watchers() {
    return {
      "value": ["valueChanged"]
    };
  }
};
SegmentButton.style = {
  ios: segmentButtonIosCss,
  md: segmentButtonMdCss
};


/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibm9kZV9tb2R1bGVzX2lvbmljX2NvcmVfZGlzdF9lc21faW9uLXNlZ21lbnRfMl9lbnRyeV9qcy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUMwTTtBQUNoRjtBQUMzRTtBQUNpQztBQUVoRixNQUFNOEIsYUFBYSxHQUFHLDRzQ0FBNHNDO0FBRWx1QyxNQUFNQyxZQUFZLEdBQUcsbzNCQUFvM0I7QUFFejRCLE1BQU1DLE9BQU8sR0FBRyxNQUFNO0VBQ2xCQyxXQUFXQSxDQUFDQyxPQUFPLEVBQUU7SUFDakJqQyxxREFBZ0IsQ0FBQyxJQUFJLEVBQUVpQyxPQUFPLENBQUM7SUFDL0IsSUFBSSxDQUFDQyxTQUFTLEdBQUdoQyxxREFBVyxDQUFDLElBQUksRUFBRSxXQUFXLEVBQUUsQ0FBQyxDQUFDO0lBQ2xELElBQUksQ0FBQ2lDLFNBQVMsR0FBR2pDLHFEQUFXLENBQUMsSUFBSSxFQUFFLFdBQVcsRUFBRSxDQUFDLENBQUM7SUFDbEQsSUFBSSxDQUFDa0MsUUFBUSxHQUFHbEMscURBQVcsQ0FBQyxJQUFJLEVBQUUsVUFBVSxFQUFFLENBQUMsQ0FBQztJQUNoRCxJQUFJLENBQUNtQyxhQUFhLEdBQUcsSUFBSTtJQUN6QixJQUFJLENBQUNDLFNBQVMsR0FBRyxLQUFLO0lBQ3RCO0FBQ1I7QUFDQTtJQUNRLElBQUksQ0FBQ0MsUUFBUSxHQUFHLEtBQUs7SUFDckI7QUFDUjtBQUNBO0FBQ0E7QUFDQTtJQUNRLElBQUksQ0FBQ0MsVUFBVSxHQUFHLEtBQUs7SUFDdkI7QUFDUjtBQUNBO0lBQ1EsSUFBSSxDQUFDQyxZQUFZLEdBQUcsSUFBSTtJQUN4QjtBQUNSO0FBQ0E7QUFDQTtJQUNRLElBQUksQ0FBQ0MsYUFBYSxHQUFHLEtBQUs7SUFDMUIsSUFBSSxDQUFDQyxPQUFPLEdBQUlDLEVBQUUsSUFBSztNQUNuQixNQUFNQyxPQUFPLEdBQUdELEVBQUUsQ0FBQ0UsTUFBTTtNQUN6QixNQUFNQyxRQUFRLEdBQUcsSUFBSSxD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Q0FBQ2xFLEtBQUssR0FBRztFQUNsQjZELEdBQUcsRUFBRUUsbUJBQW1CO0VBQ3hCRCxFQUFFLEVBQUVFO0FBQ1IsQ0FBQyIsInNvdXJjZXMiOlsiLi9ub2RlX21vZHVsZXMvQGlvbmljL2NvcmUvZGlzdC9lc20vaW9uLXNlZ21lbnRfMi5lbnRyeS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiFcbiAqIChDKSBJb25pYyBodHRwOi8vaW9uaWNmcmFtZXdvcmsuY29tIC0gTUlUIExpY2Vuc2VcbiAqL1xuaW1wb3J0IHsgciBhcyByZWdpc3Rlckluc3RhbmNlLCBkIGFzIGNyZWF0ZUV2ZW50LCB3IGFzIHdyaXRlVGFzaywgZSBhcyBnZXRJb25Nb2RlLCBoLCBqIGFzIEhvc3QsIGsgYXMgZ2V0RWxlbWVudCwgbiBhcyBmb3JjZVVwZGF0ZSwgbSBhcyBwcmludElvbldhcm5pbmcsIG8gYXMgcHJpbnRJb25FcnJvciB9IGZyb20gJy4vaW5kZXgtQl9VOUN0YVkuanMnO1xuaW1wb3J0IHsgciBhcyByYWYsIGYgYXMgYWRkRXZlbnRMaXN0ZW5lciwgbSBhcyByZW1vdmVFdmVudExpc3RlbmVyLCBiIGFzIGluaGVyaXRBdHRyaWJ1dGVzIH0gZnJvbSAnLi9oZWxwZXJzLTFPNEQyYjd5LmpzJztcbmltcG9ydCB7IGkgYXMgaXNSVEwgfSBmcm9tICcuL2Rpci1DNTNmZWFnRC5qcyc7XG5pbXBvcnQgeyBjIGFzIGNyZWF0ZUNvbG9yQ2xhc3NlcywgaCBhcyBob3N0Q29udGV4dCB9IGZyb20gJy4vdGhlbWUtRGlWSnlxbFguanMnO1xuXG5jb25zdCBzZWdtZW50SW9zQ3NzID0gXCI6aG9zdHstLXJpcHBsZS1jb2xvcjpjdXJyZW50Q29sb3I7LW1vei1vc3gtZm9udC1zbW9vdGhpbmc6Z3JheXNjYWxlOy13ZWJraXQtZm9udC1zbW9vdGhpbmc6YW50aWFsaWFzZWQ7ZGlzcGxheTpncmlkO2dyaWQtYXV0by1jb2x1bW5zOjFmcjtwb3NpdGlvbjpyZWxhdGl2ZTstbXMtZmxleC1hbGlnbjpzdHJldGNoO2FsaWduLWl0ZW1zOnN0cmV0Y2g7LW1zLWZsZXgtcGFjazpjZW50ZXI7anVzdGlmeS1jb250ZW50OmNlbnRlcjt3aWR0aDoxMDAlO2JhY2tncm91bmQ6dmFyKC0tYmFja2dyb3VuZCk7Zm9udC1mYW1pbHk6dmFyKC0taW9uLWZvbnQtZmFtaWx5LCBpbmhlcml0KTt0ZXh0LWFsaWduOmNlbnRlcjtjb250YWluOnBhaW50Oy13ZWJraXQtdXNlci1zZWxlY3Q6bm9uZTstbW96LXVzZXItc2VsZWN0Om5vbmU7LW1zLXVzZXItc2VsZWN0Om5vbmU7dXNlci1zZWxlY3Q6bm9uZX06aG9zdCguc2VnbWVudC1zY3JvbGxhYmxlKXstbXMtZmxleC1wYWNrOnN0YXJ0O2p1c3RpZnktY29udGVudDpzdGFydDt3aWR0aDphdXRvO292ZXJmbG93LXg6YXV0bztncmlkLWF1dG8tY29sdW1uczptaW5tYXgoLXdlYmtpdC1taW4tY29udGVudCwgMWZyKTtncmlkLWF1dG8tY29sdW1uczptaW5tYXgobWluLWNvbnRlbnQsIDFmcil9Omhvc3QoLnNlZ21lbnQtc2Nyb2xsYWJsZTo6LXdlYmtpdC1zY3JvbGxiYXIpe2Rpc3BsYXk6bm9uZX06aG9zdHstLWJhY2tncm91bmQ6cmdiYSh2YXIoLS1pb24tdGV4dC1jb2xvci1yZ2IsIDAsIDAsIDApLCAwLjA2NSk7Ym9yZGVyLXJhZGl1czo4cHg7b3ZlcmZsb3c6aGlkZGVuO3otaW5kZXg6MH06aG9zdCguaW9uLWNvbG9yKXtiYWNrZ3JvdW5kOnJnYmEodmFyKC0taW9uLWNvbG9yLWJhc2UtcmdiKSwgMC4wNjUpfTpob3N0KC5pbi10b29sYmFyKXstd2Via2l0LW1hcmdpbi1zdGFydDphdXRvO21hcmdpbi1pbmxpbmUtc3RhcnQ6YXV0bzstd2Via2l0LW1hcmdpbi1lbmQ6YXV0bzttYXJnaW4taW5saW5lLWVuZDphdXRvO21hcmdpbi10b3A6MDttYXJnaW4tYm90dG9tOjA7d2lkdGg6YXV0b306aG9zdCguaW4tdG9vbGJhcjpub3QoLmlvbi1jb2xvcikpe2JhY2tncm91bmQ6dmFyKC0taW9uLXRvb2xiYXItc2VnbWVudC1iYWNrZ3JvdW5kLCB2YXIoLS1iYWNrZ3JvdW5kKSl9Omhvc3QoLmluLXRvb2xiYXItY29sb3I6bm90KC5pb24tY29sb3IpKXtiYWNrZ3JvdW5kOnJnYmEodmFyKC0taW9uLWNvbG9yLWNvbnRyYXN0LXJnYiksIDAuMTEpfVwiO1xuXG5jb25zdCBzZWdtZW50TWRDc3MgPSBcIjpob3N0ey0tcmlwcGxlLWNvbG9yOmN1cnJlbnRDb2xvcjstbW96LW9zeC1mb250LXNtb290aGluZzpncmF5c2NhbGU7LXdlYmtpdC1mb250LXNtb290aGluZzphbnRpYWxpYXNlZDtkaXNwbGF5OmdyaWQ7Z3JpZC1hdXRvLWNvbHVtbnM6MWZyO3Bvc2l0aW9uOnJlbGF0aXZlOy1tcy1mbGV4LWFsaWduOnN0cmV0Y2g7YWxpZ24taXRlbXM6c3RyZXRjaDstbXMtZmxleC1wYWNrOmNlbnRlcjtqdXN0aWZ5LWNvbnRlbnQ6Y2VudGVyO3dpZHRoOjEwMCU7YmFja2dyb3VuZDp2YXIoLS1iYWNrZ3JvdW5kKTtmb250LWZhbWlseTp2YXIoLS1pb24tZm9udC1mYW1pbHksIGluaGVyaXQpO3RleHQtYWxpZ246Y2VudGVyO2NvbnRhaW46cGFpbnQ7LXdlYmtpdC11c2VyLXNlbGVjdDpub25lOy1tb3otdXNlci1zZWxlY3Q6bm9uZTstbXMtdXNlci1zZWxlY3Q6bm9uZTt1c2VyLXNlbGVjdDpub25lfTpob3N0KC5zZWdtZW50LXNjcm9sbGFibGUpey1tcy1mbGV4LXBhY2s6c3RhcnQ7anVzdGlmeS1jb250ZW50OnN0YXJ0O3dpZHRoOmF1dG87b3ZlcmZsb3cteDphdXRvO2dyaWQtYXV0by1jb2x1bW5zOm1pbm1heCgtd2Via2l0LW1pbi1jb250ZW50LCAxZnIpO2dyaWQtYXV0by1jb2x1bW5zOm1pbm1heChtaW4tY29udGVudCwgMWZyKX06aG9zdCguc2VnbWVudC1zY3JvbGxhYmxlOjotd2Via2l0LXNjcm9sbGJhcil7ZGlzcGxheTpub25lfTpob3N0ey0tYmFja2dyb3VuZDp0cmFuc3BhcmVudDtncmlkLWF1dG8tY29sdW1uczptaW5tYXgoYXV0bywgMzYwcHgpfTpob3N0KC5pbi10b29sYmFyKXttaW4taGVpZ2h0OnZhcigtLW1pbi1oZWlnaHQpfTpob3N0KC5zZWdtZW50LXNjcm9sbGFibGUpIDo6c2xvdHRlZChpb24tc2VnbWVudC1idXR0b24pe21pbi13aWR0aDphdXRvfVwiO1xuXG5jb25zdCBTZWdtZW50ID0gY2xhc3Mge1xuICAgIGNvbnN0cnVjdG9yKGhvc3RSZWYpIHtcbiAgICAgICAgcmVnaXN0ZXJJbnN0YW5jZSh0aGlzLCBob3N0UmVmKTtcbiAgICAgICAgdGhpcy5pb25DaGFuZ2UgPSBjcmVhdGVFdmVudCh0aGlzLCBcImlvbkNoYW5nZVwiLCA3KTtcbiAgICAgICAgdGhpcy5pb25TZWxlY3QgPSBjcmVhdGVFdmVudCh0aGlzLCBcImlvblNlbGVjdFwiLCA3KTtcbiAgICAgICAgdGhpcy5pb25TdHlsZSA9IGNyZWF0ZUV2ZW50KHRoaXMsIFwiaW9uU3R5bGVcIiwgNyk7XG4gICAgICAgIHRoaXMuc2VnbWVudFZpZXdFbCA9IG51bGw7XG4gICAgICAgIHRoaXMuYWN0aXZhdGVkID0gZmFsc2U7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBJZiBgdHJ1ZWAsIHRoZSB1c2VyIGNhbm5vdCBpbnRlcmFjdCB3aXRoIHRoZSBzZWdtZW50LlxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5kaXNhYmxlZCA9IGZhbHNlO1xuICAgICAgICAvKipcbiAgICAgICAgICogSWYgYHRydWVgLCB0aGUgc2VnbWVudCBidXR0b25zIHdpbGwgb3ZlcmZsb3cgYW5kIHRoZSB1c2VyIGNhbiBzd2lwZSB0byBzZWUgdGhlbS5cbiAgICAgICAgICogSW4gYWRkaXRpb24sIHRoaXMgd2lsbCBkaXNhYmxlIHRoZSBnZXN0dXJlIHRvIGRyYWcgdGhlIGluZGljYXRvciBiZXR3ZWVuIHRoZSBidXR0b25zXG4gICAgICAgICAqIGluIG9yZGVyIHRvIHN3aXBlIHRvIHNlZSBoaWRkZW4gYnV0dG9ucy5cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuc2Nyb2xsYWJsZSA9IGZhbHNlO1xuICAgICAgICAvKipcbiAgICAgICAgICogSWYgYHRydWVgLCB1c2VycyB3aWxsIGJlIGFibGUgdG8gc3dpcGUgYmV0d2VlbiBzZWdtZW50IGJ1dHRvbnMgdG8gYWN0aXZhdGUgdGhlbS5cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuc3dpcGVHZXN0dXJlID0gdHJ1ZTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIElmIGB0cnVlYCwgbmF2aWdhdGluZyB0byBhbiBgaW9uLXNlZ21lbnQtYnV0dG9uYCB3aXRoIHRoZSBrZXlib2FyZCB3aWxsIGZvY3VzIGFuZCBzZWxlY3QgdGhlIGVsZW1lbnQuXG4gICAgICAgICAqIElmIGBmYWxzZWAsIGtleWJvYXJkIG5hdmlnYXRpb24gd2lsbCBvbmx5IGZvY3VzIHRoZSBgaW9uLXNlZ21lbnQtYnV0dG9uYCBlbGVtZW50LlxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5zZWxlY3RPbkZvY3VzID0gZmFsc2U7XG4gICAgICAgIHRoaXMub25DbGljayA9IChldikgPT4ge1xuICAgICAgICAgICAgY29uc3QgY3VycmVudCA9IGV2LnRhcmdldDtcbiAgICAgICAgICAgIGNvbnN0IHByZXZpb3VzID0gdGhpcy5jaGVja2VkO1xuICAgICAgICAgICAgLy8gSWYgdGhlIGN1cnJlbnQgZWxlbWVudCBpcyBhIHNlZ21lbnQgdGhlbiB0aGF0IG1lYW5zXG4gICAgICAgICAgICAvLyB0aGUgdXNlciB0cmllZCB0byBzd2lwZSB0byBhIHNlZ21lbnQgYnV0dG9uIGFuZFxuICAgICAgICAgICAgLy8gY2xpY2sgYSBzZWdtZW50IGJ1dHRvbiBhdCB0aGUgc2FtZSB0aW1lIHNvIHdlIHNob3VsZFxuICAgICAgICAgICAgLy8gbm90IHVwZGF0ZSB0aGUgY2hlY2tlZCBzZWdtZW50IGJ1dHRvblxuICAgICAgICAgICAgaWYgKGN1cnJlbnQudGFnTmFtZSA9PT0gJ0lPTi1TRUdNRU5UJykge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMudmFsdWUgPSBjdXJyZW50LnZhbHVlO1xuICAgICAgICAgICAgaWYgKGN1cnJlbnQgIT09IHByZXZpb3VzKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5lbWl0VmFsdWVDaGFuZ2UoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh0aGlzLnNlZ21lbnRWaWV3RWwpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnVwZGF0ZVNlZ21lbnRWaWV3KCk7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuc2Nyb2xsYWJsZSAmJiBwcmV2aW91cykge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmNoZWNrQnV0dG9uKHByZXZpb3VzLCBjdXJyZW50KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmICh0aGlzLnNjcm9sbGFibGUgfHwgIXRoaXMuc3dpcGVHZXN0dXJlKSB7XG4gICAgICAgICAgICAgICAgaWYgKHByZXZpb3VzKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY2hlY2tCdXR0b24ocHJldmlvdXMsIGN1cnJlbnQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zZXRDaGVja2VkQ2xhc3NlcygpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5vblNsb3R0ZWRJdGVtc0NoYW5nZSA9ICgpID0+IHtcbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogV2hlbiB0aGUgc2xvdHRlZCBzZWdtZW50IGJ1dHRvbnMgY2hhbmdlIHdlIG5lZWQgdG9cbiAgICAgICAgICAgICAqIGVuc3VyZSB0aGF0IHRoZSBuZXcgc2VnbWVudCBidXR0b25zIGFyZSBjaGVja2VkIGlmXG4gICAgICAgICAgICAgKiB0aGUgdmFsdWUgbWF0Y2hlcyB0aGUgc2VnbWVudCBidXR0b24gdmFsdWUuXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIHRoaXMudmFsdWVDaGFuZ2VkKHRoaXMudmFsdWUpO1xuICAgICAgICB9O1xuICAgICAgICB0aGlzLmdldFNlZ21lbnRCdXR0b24gPSAoc2VsZWN0b3IpID0+IHtcbiAgICAgICAgICAgIHZhciBfYSwgX2I7XG4gICAgICAgICAgICBjb25zdCBidXR0b25zID0gdGhpcy5nZXRCdXR0b25zKCkuZmlsdGVyKChidXR0b24pID0+ICFidXR0b24uZGlzYWJsZWQpO1xuICAgICAgICAgICAgY29uc3QgY3VyckluZGV4ID0gYnV0dG9ucy5maW5kSW5kZXgoKGJ1dHRvbikgPT4gYnV0dG9uID09PSBkb2N1bWVudC5hY3RpdmVFbGVtZW50KTtcbiAgICAgICAgICAgIHN3aXRjaCAoc2VsZWN0b3IpIHtcbiAgICAgICAgICAgICAgICBjYXNlICdmaXJzdCc6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBidXR0b25zWzBdO1xuICAgICAgICAgICAgICAgIGNhc2UgJ2xhc3QnOlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gYnV0dG9uc1tidXR0b25zLmxlbmd0aCAtIDFdO1xuICAgICAgICAgICAgICAgIGNhc2UgJ25leHQnOlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gKF9hID0gYnV0dG9uc1tjdXJySW5kZXggKyAxXSkgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogYnV0dG9uc1swXTtcbiAgICAgICAgICAgICAgICBjYXNlICdwcmV2aW91cyc6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAoX2IgPSBidXR0b25zW2N1cnJJbmRleCAtIDFdKSAhPT0gbnVsbCAmJiBfYiAhPT0gdm9pZCAwID8gX2IgOiBidXR0b25zW2J1dHRvbnMubGVuZ3RoIC0gMV07XG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgfVxuICAgIGNvbG9yQ2hhbmdlZCh2YWx1ZSwgb2xkVmFsdWUpIHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIElmIGNvbG9yIGlzIHNldCBhZnRlciBub3QgaGF2aW5nXG4gICAgICAgICAqIHByZXZpb3VzbHkgYmVlbiBzZXQgKG9yIHZpY2UgdmVyc2EpLFxuICAgICAgICAgKiB3ZSBuZWVkIHRvIGVtaXQgc3R5bGUgc28gdGhlIHNlZ21lbnQtYnV0dG9uc1xuICAgICAgICAgKiBjYW4gYXBwbHkgdGhlaXIgY29sb3IgY2xhc3NlcyBwcm9wZXJseS5cbiAgICAgICAgICovXG4gICAgICAgIGlmICgob2xkVmFsdWUgPT09IHVuZGVmaW5lZCAmJiB2YWx1ZSAhPT0gdW5kZWZpbmVkKSB8fCAob2xkVmFsdWUgIT09IHVuZGVmaW5lZCAmJiB2YWx1ZSA9PT0gdW5kZWZpbmVkKSkge1xuICAgICAgICAgICAgdGhpcy5lbWl0U3R5bGUoKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBzd2lwZUdlc3R1cmVDaGFuZ2VkKCkge1xuICAgICAgICB0aGlzLmdlc3R1cmVDaGFuZ2VkKCk7XG4gICAgfVxuICAgIHZhbHVlQ2hhbmdlZCh2YWx1ZSwgb2xkVmFsdWUpIHtcbiAgICAgICAgLy8gRm9yY2UgYSB2YWx1ZSB0byBleGlzdCBpZiB3ZSdyZSB1c2luZyBhIHNlZ21lbnQgdmlld1xuICAgICAgICBpZiAodGhpcy5zZWdtZW50Vmlld0VsICYmIHZhbHVlID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHRoaXMudmFsdWUgPSB0aGlzLmdldEJ1dHRvbnMoKVswXS52YWx1ZTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAob2xkVmFsdWUgIT09IHVuZGVmaW5lZCAmJiB2YWx1ZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBjb25zdCBidXR0b25zID0gdGhpcy5nZXRCdXR0b25zKCk7XG4gICAgICAgICAgICBjb25zdCBwcmV2aW91cyA9IGJ1dHRvbnMuZmluZCgoYnV0dG9uKSA9PiBidXR0b24udmFsdWUgPT09IG9sZFZhbHVlKTtcbiAgICAgICAgICAgIGNvbnN0IGN1cnJlbnQgPSBidXR0b25zLmZpbmQoKGJ1dHRvbikgPT4gYnV0dG9uLnZhbHVlID09PSB2YWx1ZSk7XG4gICAgICAgICAgICBpZiAocHJldmlvdXMgJiYgY3VycmVudCkge1xuICAgICAgICAgICAgICAgIGlmICghdGhpcy5zZWdtZW50Vmlld0VsKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY2hlY2tCdXR0b24ocHJldmlvdXMsIGN1cnJlbnQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIGlmICh0aGlzLnRyaWdnZXJTY3JvbGxPblZhbHVlQ2hhbmdlICE9PSBmYWxzZSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnVwZGF0ZVNlZ21lbnRWaWV3KCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHZhbHVlICE9PSB1bmRlZmluZWQgJiYgb2xkVmFsdWUgPT09IHVuZGVmaW5lZCAmJiB0aGlzLnNlZ21lbnRWaWV3RWwpIHtcbiAgICAgICAgICAgIHRoaXMudXBkYXRlU2VnbWVudFZpZXcoKTtcbiAgICAgICAgfVxuICAgICAgICAvKipcbiAgICAgICAgICogYGlvblNlbGVjdGAgaXMgZW1pdHRlZCBldmVyeSB0aW1lIHRoZSB2YWx1ZSBjaGFuZ2VzIChpbnRlcm5hbCBvciBleHRlcm5hbCBjaGFuZ2VzKS5cbiAgICAgICAgICogVXNlZCBieSBgaW9uLXNlZ21lbnQtYnV0dG9uYCB0byBkZXRlcm1pbmUgaWYgdGhlIGJ1dHRvbiBzaG91bGQgYmUgY2hlY2tlZC5cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuaW9uU2VsZWN0LmVtaXQoeyB2YWx1ZSB9KTtcbiAgICAgICAgLy8gVGhlIHNjcm9sbCBsaXN0ZW5lciBzaG91bGQgaGFuZGxlIHNjcm9sbGluZyB0aGUgYWN0aXZlIGJ1dHRvbiBpbnRvIHZpZXcgYXMgbmVlZGVkXG4gICAgICAgIGlmICghdGhpcy5zZWdtZW50Vmlld0VsKSB7XG4gICAgICAgICAgICB0aGlzLnNjcm9sbEFjdGl2ZUJ1dHRvbkludG9WaWV3KCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy50cmlnZ2VyU2Nyb2xsT25WYWx1ZUNoYW5nZSA9IHVuZGVmaW5lZDtcbiAgICB9XG4gICAgZGlzYWJsZWRDaGFuZ2VkKCkge1xuICAgICAgICB0aGlzLmdlc3R1cmVDaGFuZ2VkKCk7XG4gICAgICAgIGlmICghdGhpcy5zZWdtZW50Vmlld0VsKSB7XG4gICAgICAgICAgICBjb25zdCBidXR0b25zID0gdGhpcy5nZXRCdXR0b25zKCk7XG4gICAgICAgICAgICBmb3IgKGNvbnN0IGJ1dHRvbiBvZiBidXR0b25zKSB7XG4gICAgICAgICAgICAgICAgYnV0dG9uLmRpc2FibGVkID0gdGhpcy5kaXNhYmxlZDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuc2VnbWVudFZpZXdFbC5kaXNhYmxlZCA9IHRoaXMuZGlzYWJsZWQ7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZ2VzdHVyZUNoYW5nZWQoKSB7XG4gICAgICAgIGlmICh0aGlzLmdlc3R1cmUpIHtcbiAgICAgICAgICAgIHRoaXMuZ2VzdHVyZS5lbmFibGUoIXRoaXMuc2Nyb2xsYWJsZSAmJiAhdGhpcy5kaXNhYmxlZCAmJiB0aGlzLnN3aXBlR2VzdHVyZSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgY29ubmVjdGVkQ2FsbGJhY2soKSB7XG4gICAgICAgIHRoaXMuZW1pdFN0eWxlKCk7XG4gICAgICAgIHRoaXMuc2VnbWVudFZpZXdFbCA9IHRoaXMuZ2V0U2VnbWVudFZpZXcoKTtcbiAgICB9XG4gICAgZGlzY29ubmVjdGVkQ2FsbGJhY2soKSB7XG4gICAgICAgIHRoaXMuc2VnbWVudFZpZXdFbCA9IG51bGw7XG4gICAgfVxuICAgIGNvbXBvbmVudFdpbGxMb2FkKCkge1xuICAgICAgICB0aGlzLmVtaXRTdHlsZSgpO1xuICAgIH1cbiAgICBhc3luYyBjb21wb25lbnREaWRMb2FkKCkge1xuICAgICAgICB0aGlzLnNlZ21lbnRWaWV3RWwgPSB0aGlzLmdldFNlZ21lbnRWaWV3KCk7XG4gICAgICAgIHRoaXMuc2V0Q2hlY2tlZENsYXNzZXMoKTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFdlIG5lZWQgdG8gd2FpdCBmb3IgdGhlIGJ1dHRvbnMgdG8gYWxsIGJlIHJlbmRlcmVkXG4gICAgICAgICAqIGJlZm9yZSB3ZSBjYW4gc2Nyb2xsLlxuICAgICAgICAgKi9cbiAgICAgICAgcmFmKCgpID0+IHtcbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogV2hlbiB0aGUgc2VnbWVudCBsb2FkcyBmb3IgdGhlIGZpcnN0XG4gICAgICAgICAgICAgKiB0aW1lIHdlIGp1c3Qgd2FudCB0byBzbmFwIHRoZSBhY3RpdmUgYnV0dG9uIGludG9cbiAgICAgICAgICAgICAqIHBsYWNlIGluc3RlYWQgb2Ygc2Nyb2xsLiBTbW9vdGggc2Nyb2xsaW5nIHNob3VsZCBvbmx5XG4gICAgICAgICAgICAgKiBoYXBwZW4gd2hlbiB0aGUgdXNlciBpbnRlcmFjdHMgd2l0aCB0aGUgc2VnbWVudC5cbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgdGhpcy5zY3JvbGxBY3RpdmVCdXR0b25JbnRvVmlldyhmYWxzZSk7XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLmdlc3R1cmUgPSAoYXdhaXQgaW1wb3J0KCcuL2luZGV4LUNmZ0JGMVNFLmpzJykpLmNyZWF0ZUdlc3R1cmUoe1xuICAgICAgICAgICAgZWw6IHRoaXMuZWwsXG4gICAgICAgICAgICBnZXN0dXJlTmFtZTogJ3NlZ21lbnQnLFxuICAgICAgICAgICAgZ2VzdHVyZVByaW9yaXR5OiAxMDAsXG4gICAgICAgICAgICB0aHJlc2hvbGQ6IDAsXG4gICAgICAgICAgICBwYXNzaXZlOiBmYWxzZSxcbiAgICAgICAgICAgIG9uU3RhcnQ6IChldikgPT4gdGhpcy5vblN0YXJ0KGV2KSxcbiAgICAgICAgICAgIG9uTW92ZTogKGV2KSA9PiB0aGlzLm9uTW92ZShldiksXG4gICAgICAgICAgICBvbkVuZDogKGV2KSA9PiB0aGlzLm9uRW5kKGV2KSxcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuZ2VzdHVyZUNoYW5nZWQoKTtcbiAgICAgICAgaWYgKHRoaXMuZGlzYWJsZWQpIHtcbiAgICAgICAgICAgIHRoaXMuZGlzYWJsZWRDaGFuZ2VkKCk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gVXBkYXRlIHNlZ21lbnQgdmlldyBiYXNlZCBvbiB0aGUgaW5pdGlhbCB2YWx1ZSxcbiAgICAgICAgLy8gYnV0IGRvIG5vdCBhbmltYXRlIHRoZSBzY3JvbGxcbiAgICAgICAgdGhpcy51cGRhdGVTZWdtZW50VmlldyhmYWxzZSk7XG4gICAgfVxuICAgIG9uU3RhcnQoZGV0YWlsKSB7XG4gICAgICAgIHRoaXMudmFsdWVCZWZvcmVHZXN0dXJlID0gdGhpcy52YWx1ZTtcbiAgICAgICAgdGhpcy5hY3RpdmF0ZShkZXRhaWwpO1xuICAgIH1cbiAgICBvbk1vdmUoZGV0YWlsKSB7XG4gICAgICAgIHRoaXMuc2V0TmV4dEluZGV4KGRldGFpbCk7XG4gICAgfVxuICAgIG9uRW5kKGRldGFpbCkge1xuICAgICAgICB0aGlzLnNldEFjdGl2YXRlZChmYWxzZSk7XG4gICAgICAgIHRoaXMuc2V0TmV4dEluZGV4KGRldGFpbCwgdHJ1ZSk7XG4gICAgICAgIGRldGFpbC5ldmVudC5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24oKTtcbiAgICAgICAgY29uc3QgdmFsdWUgPSB0aGlzLnZhbHVlO1xuICAgICAgICBpZiAodmFsdWUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgaWYgKHRoaXMudmFsdWVCZWZvcmVHZXN0dXJlICE9PSB2YWx1ZSkge1xuICAgICAgICAgICAgICAgIHRoaXMuZW1pdFZhbHVlQ2hhbmdlKCk7XG4gICAgICAgICAgICAgICAgdGhpcy51cGRhdGVTZWdtZW50VmlldygpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHRoaXMudmFsdWVCZWZvcmVHZXN0dXJlID0gdW5kZWZpbmVkO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBFbWl0cyBhbiBgaW9uQ2hhbmdlYCBldmVudC5cbiAgICAgKlxuICAgICAqIFRoaXMgQVBJIHNob3VsZCBiZSBjYWxsZWQgZm9yIHVzZXIgY29tbWl0dGVkIGNoYW5nZXMuXG4gICAgICogVGhpcyBBUEkgc2hvdWxkIG5vdCBiZSB1c2VkIGZvciBleHRlcm5hbCB2YWx1ZSBjaGFuZ2VzLlxuICAgICAqL1xuICAgIGVtaXRWYWx1ZUNoYW5nZSgpIHtcbiAgICAgICAgY29uc3QgeyB2YWx1ZSB9ID0gdGhpcztcbiAgICAgICAgdGhpcy5pb25DaGFuZ2UuZW1pdCh7IHZhbHVlIH0pO1xuICAgIH1cbiAgICBnZXRCdXR0b25zKCkge1xuICAgICAgICByZXR1cm4gQXJyYXkuZnJvbSh0aGlzLmVsLnF1ZXJ5U2VsZWN0b3JBbGwoJ2lvbi1zZWdtZW50LWJ1dHRvbicpKTtcbiAgICB9XG4gICAgZ2V0IGNoZWNrZWQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmdldEJ1dHRvbnMoKS5maW5kKChidXR0b24pID0+IGJ1dHRvbi52YWx1ZSA9PT0gdGhpcy52YWx1ZSk7XG4gICAgfVxuICAgIC8qXG4gICAgICogQWN0aXZhdGUgYm90aCB0aGUgc2VnbWVudCBhbmQgdGhlIGJ1dHRvbnNcbiAgICAgKiBkdWUgdG8gYSBidWcgd2l0aCA6OnNsb3R0ZWQgaW4gU2FmYXJpXG4gICAgICovXG4gICAgc2V0QWN0aXZhdGVkKGFjdGl2YXRlZCkge1xuICAgICAgICBjb25zdCBidXR0b25zID0gdGhpcy5nZXRCdXR0b25zKCk7XG4gICAgICAgIGJ1dHRvbnMuZm9yRWFjaCgoYnV0dG9uKSA9PiB7XG4gICAgICAgICAgICBidXR0b24uY2xhc3NMaXN0LnRvZ2dsZSgnc2VnbWVudC1idXR0b24tYWN0aXZhdGVkJywgYWN0aXZhdGVkKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuYWN0aXZhdGVkID0gYWN0aXZhdGVkO1xuICAgIH1cbiAgICBhY3RpdmF0ZShkZXRhaWwpIHtcbiAgICAgICAgY29uc3QgY2xpY2tlZCA9IGRldGFpbC5ldmVudC50YXJnZXQ7XG4gICAgICAgIGNvbnN0IGJ1dHRvbnMgPSB0aGlzLmdldEJ1dHRvbnMoKTtcbiAgICAgICAgY29uc3QgY2hlY2tlZCA9IGJ1dHRvbnMuZmluZCgoYnV0dG9uKSA9PiBidXR0b24udmFsdWUgPT09IHRoaXMudmFsdWUpO1xuICAgICAgICAvLyBNYWtlIHN1cmUgd2UgYXJlIG9ubHkgY2hlY2tpbmcgZm9yIGFjdGl2YXRpb24gb24gYSBzZWdtZW50IGJ1dHRvblxuICAgICAgICAvLyBzaW5jZSBkaXNhYmxlZCBidXR0b25zIHdpbGwgZ2V0IHRoZSBjbGljayBvbiB0aGUgc2VnbWVudFxuICAgICAgICBpZiAoY2xpY2tlZC50YWdOYW1lICE9PSAnSU9OLVNFR01FTlQtQlVUVE9OJykge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIC8vIElmIHRoZXJlIGFyZSBubyBjaGVja2VkIGJ1dHRvbnMsIHNldCB0aGUgY3VycmVudCBidXR0b24gdG8gY2hlY2tlZFxuICAgICAgICBpZiAoIWNoZWNrZWQpIHtcbiAgICAgICAgICAgIHRoaXMudmFsdWUgPSBjbGlja2VkLnZhbHVlO1xuICAgICAgICAgICAgdGhpcy5zZXRDaGVja2VkQ2xhc3NlcygpO1xuICAgICAgICB9XG4gICAgICAgIC8vIElmIHRoZSBnZXN0dXJlIGJlZ2FuIG9uIHRoZSBjbGlja2VkIGJ1dHRvbiB3aXRoIHRoZSBpbmRpY2F0b3JcbiAgICAgICAgLy8gdGhlbiB3ZSBzaG91bGQgYWN0aXZhdGUgdGhlIGluZGljYXRvclxuICAgICAgICBpZiAodGhpcy52YWx1ZSA9PT0gY2xpY2tlZC52YWx1ZSkge1xuICAgICAgICAgICAgdGhpcy5zZXRBY3RpdmF0ZWQodHJ1ZSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZ2V0SW5kaWNhdG9yKGJ1dHRvbikge1xuICAgICAgICBjb25zdCByb290ID0gYnV0dG9uLnNoYWRvd1Jvb3QgfHwgYnV0dG9uO1xuICAgICAgICByZXR1cm4gcm9vdC5xdWVyeVNlbGVjdG9yKCcuc2VnbWVudC1idXR0b24taW5kaWNhdG9yJyk7XG4gICAgfVxuICAgIGNoZWNrQnV0dG9uKHByZXZpb3VzLCBjdXJyZW50KSB7XG4gICAgICAgIGNvbnN0IHByZXZpb3VzSW5kaWNhdG9yID0gdGhpcy5nZXRJbmRpY2F0b3IocHJldmlvdXMpO1xuICAgICAgICBjb25zdCBjdXJyZW50SW5kaWNhdG9yID0gdGhpcy5nZXRJbmRpY2F0b3IoY3VycmVudCk7XG4gICAgICAgIGlmIChwcmV2aW91c0luZGljYXRvciA9PT0gbnVsbCB8fCBjdXJyZW50SW5kaWNhdG9yID09PSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgcHJldmlvdXNDbGllbnRSZWN0ID0gcHJldmlvdXNJbmRpY2F0b3IuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgICAgIGNvbnN0IGN1cnJlbnRDbGllbnRSZWN0ID0gY3VycmVudEluZGljYXRvci5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICAgICAgY29uc3Qgd2lkdGhEZWx0YSA9IHByZXZpb3VzQ2xpZW50UmVjdC53aWR0aCAvIGN1cnJlbnRDbGllbnRSZWN0LndpZHRoO1xuICAgICAgICBjb25zdCB4UG9zaXRpb24gPSBwcmV2aW91c0NsaWVudFJlY3QubGVmdCAtIGN1cnJlbnRDbGllbnRSZWN0LmxlZnQ7XG4gICAgICAgIC8vIFNjYWxlIHRoZSBpbmRpY2F0b3Igd2lkdGggdG8gbWF0Y2ggdGhlIHByZXZpb3VzIGluZGljYXRvciB3aWR0aFxuICAgICAgICAvLyBhbmQgdHJhbnNsYXRlIGl0IG9uIHRvcCBvZiB0aGUgcHJldmlvdXMgaW5kaWNhdG9yXG4gICAgICAgIGNvbnN0IHRyYW5zZm9ybSA9IGB0cmFuc2xhdGUzZCgke3hQb3NpdGlvbn1weCwgMCwgMCkgc2NhbGVYKCR7d2lkdGhEZWx0YX0pYDtcbiAgICAgICAgd3JpdGVUYXNrKCgpID0+IHtcbiAgICAgICAgICAgIC8vIFJlbW92ZSB0aGUgdHJhbnNpdGlvbiBiZWZvcmUgcG9zaXRpb25pbmcgb24gdG9wIG9mIHRoZSBwcmV2aW91cyBpbmRpY2F0b3JcbiAgICAgICAgICAgIGN1cnJlbnRJbmRpY2F0b3IuY2xhc3NMaXN0LnJlbW92ZSgnc2VnbWVudC1idXR0b24taW5kaWNhdG9yLWFuaW1hdGVkJyk7XG4gICAgICAgICAgICBjdXJyZW50SW5kaWNhdG9yLnN0eWxlLnNldFByb3BlcnR5KCd0cmFuc2Zvcm0nLCB0cmFuc2Zvcm0pO1xuICAgICAgICAgICAgLy8gRm9yY2UgYSByZXBhaW50IHRvIGVuc3VyZSB0aGUgdHJhbnNmb3JtIGhhcHBlbnNcbiAgICAgICAgICAgIGN1cnJlbnRJbmRpY2F0b3IuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgICAgICAgICAvLyBBZGQgdGhlIHRyYW5zaXRpb24gdG8gbW92ZSB0aGUgaW5kaWNhdG9yIGludG8gcGxhY2VcbiAgICAgICAgICAgIGN1cnJlbnRJbmRpY2F0b3IuY2xhc3NMaXN0LmFkZCgnc2VnbWVudC1idXR0b24taW5kaWNhdG9yLWFuaW1hdGVkJyk7XG4gICAgICAgICAgICAvLyBSZW1vdmUgdGhlIHRyYW5zZm9ybSB0byBzbGlkZSB0aGUgaW5kaWNhdG9yIGJhY2sgdG8gdGhlIGJ1dHRvbiBjbGlja2VkXG4gICAgICAgICAgICBjdXJyZW50SW5kaWNhdG9yLnN0eWxlLnNldFByb3BlcnR5KCd0cmFuc2Zvcm0nLCAnJyk7XG4gICAgICAgICAgICB0aGlzLnNjcm9sbEFjdGl2ZUJ1dHRvbkludG9WaWV3KHRydWUpO1xuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy52YWx1ZSA9IGN1cnJlbnQudmFsdWU7XG4gICAgICAgIHRoaXMuc2V0Q2hlY2tlZENsYXNzZXMoKTtcbiAgICB9XG4gICAgc2V0Q2hlY2tlZENsYXNzZXMoKSB7XG4gICAgICAgIGNvbnN0IGJ1dHRvbnMgPSB0aGlzLmdldEJ1dHRvbnMoKTtcbiAgICAgICAgY29uc3QgaW5kZXggPSBidXR0b25zLmZpbmRJbmRleCgoYnV0dG9uKSA9PiBidXR0b24udmFsdWUgPT09IHRoaXMudmFsdWUpO1xuICAgICAgICBjb25zdCBuZXh0ID0gaW5kZXggKyAxO1xuICAgICAgICBmb3IgKGNvbnN0IGJ1dHRvbiBvZiBidXR0b25zKSB7XG4gICAgICAgICAgICBidXR0b24uY2xhc3NMaXN0LnJlbW92ZSgnc2VnbWVudC1idXR0b24tYWZ0ZXItY2hlY2tlZCcpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChuZXh0IDwgYnV0dG9ucy5sZW5ndGgpIHtcbiAgICAgICAgICAgIGJ1dHRvbnNbbmV4dF0uY2xhc3NMaXN0LmFkZCgnc2VnbWVudC1idXR0b24tYWZ0ZXItY2hlY2tlZCcpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGdldFNlZ21lbnRWaWV3KCkge1xuICAgICAgICBjb25zdCBidXR0b25zID0gdGhpcy5nZXRCdXR0b25zKCk7XG4gICAgICAgIC8vIEdldCB0aGUgZmlyc3QgYnV0dG9uIHdpdGggYSBjb250ZW50SWRcbiAgICAgICAgY29uc3QgZmlyc3RDb250ZW50SWQgPSBidXR0b25zLmZpbmQoKGJ1dHRvbikgPT4gYnV0dG9uLmNvbnRlbnRJZCk7XG4gICAgICAgIC8vIEdldCB0aGUgc2VnbWVudCBjb250ZW50IHdpdGggYW4gaWQgbWF0Y2hpbmcgdGhlIGJ1dHRvbidzIGNvbnRlbnRJZFxuICAgICAgICBjb25zdCBzZWdtZW50Q29udGVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoYGlvbi1zZWdtZW50LWNvbnRlbnRbaWQ9XCIke2ZpcnN0Q29udGVudElkID09PSBudWxsIHx8IGZpcnN0Q29udGVudElkID09PSB2b2lkIDAgPyB2b2lkIDAgOiBmaXJzdENvbnRlbnRJZC5jb250ZW50SWR9XCJdYCk7XG4gICAgICAgIC8vIFJldHVybiB0aGUgc2VnbWVudCB2aWV3IGZvciB0aGF0IG1hdGNoaW5nIHNlZ21lbnQgY29udGVudFxuICAgICAgICByZXR1cm4gc2VnbWVudENvbnRlbnQgPT09IG51bGwgfHwgc2VnbWVudENvbnRlbnQgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHNlZ21lbnRDb250ZW50LmNsb3Nlc3QoJ2lvbi1zZWdtZW50LXZpZXcnKTtcbiAgICB9XG4gICAgaGFuZGxlU2VnbWVudFZpZXdTY3JvbGwoZXYpIHtcbiAgICAgICAgY29uc3QgeyBzY3JvbGxSYXRpbywgaXNNYW51YWxTY3JvbGwgfSA9IGV2LmRldGFpbDtcbiAgICAgICAgaWYgKCFpc01hbnVhbFNjcm9sbCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGRpc3BhdGNoZWRGcm9tID0gZXYudGFyZ2V0O1xuICAgICAgICBjb25zdCBzZWdtZW50Vmlld0VsID0gdGhpcy5zZWdtZW50Vmlld0VsO1xuICAgICAgICBjb25zdCBzZWdtZW50RWwgPSB0aGlzLmVsO1xuICAgICAgICAvLyBPbmx5IHVwZGF0ZSB0aGUgaW5kaWNhdG9yIGlmIHRoZSBldmVudCB3YXMgZGlzcGF0Y2hlZCBmcm9tIHRoZSBjb3JyZWN0IHNlZ21lbnQgdmlld1xuICAgICAgICBpZiAoZXYuY29tcG9zZWRQYXRoKCkuaW5jbHVkZXMoc2VnbWVudFZpZXdFbCkgfHwgKGRpc3BhdGNoZWRGcm9tID09PSBudWxsIHx8IGRpc3BhdGNoZWRGcm9tID09PSB2b2lkIDAgPyB2b2lkIDAgOiBkaXNwYXRjaGVkRnJvbS5jb250YWlucyhzZWdtZW50RWwpKSkge1xuICAgICAgICAgICAgY29uc3QgYnV0dG9ucyA9IHRoaXMuZ2V0QnV0dG9ucygpO1xuICAgICAgICAgICAgLy8gSWYgbm8gYnV0dG9ucyBhcmUgZm91bmQgb3IgdGhlcmUgaXMgbm8gdmFsdWUgc2V0IHRoZW4gZG8gbm90aGluZ1xuICAgICAgICAgICAgaWYgKCFidXR0b25zLmxlbmd0aClcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICBjb25zdCBpbmRleCA9IGJ1dHRvbnMuZmluZEluZGV4KChidXR0b24pID0+IGJ1dHRvbi52YWx1ZSA9PT0gdGhpcy52YWx1ZSk7XG4gICAgICAgICAgICBjb25zdCBjdXJyZW50ID0gYnV0dG9uc1tpbmRleF07XG4gICAgICAgICAgICBjb25zdCBuZXh0SW5kZXggPSBNYXRoLnJvdW5kKHNjcm9sbFJhdGlvICogKGJ1dHRvbnMubGVuZ3RoIC0gMSkpO1xuICAgICAgICAgICAgaWYgKHRoaXMubGFzdE5leHRJbmRleCA9PT0gdW5kZWZpbmVkIHx8IHRoaXMubGFzdE5leHRJbmRleCAhPT0gbmV4dEluZGV4KSB7XG4gICAgICAgICAgICAgICAgdGhpcy5sYXN0TmV4dEluZGV4ID0gbmV4dEluZGV4O1xuICAgICAgICAgICAgICAgIHRoaXMudHJpZ2dlclNjcm9sbE9uVmFsdWVDaGFuZ2UgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICB0aGlzLmNoZWNrQnV0dG9uKGN1cnJlbnQsIGJ1dHRvbnNbbmV4dEluZGV4XSk7XG4gICAgICAgICAgICAgICAgdGhpcy5lbWl0VmFsdWVDaGFuZ2UoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBGaW5kcyB0aGUgcmVsYXRlZCBzZWdtZW50IHZpZXcgYW5kIHNldHMgaXRzIGN1cnJlbnQgY29udGVudFxuICAgICAqIGJhc2VkIG9uIHRoZSBzZWxlY3RlZCBzZWdtZW50IGJ1dHRvbi4gVGhpcyBtZXRob2RcbiAgICAgKiBzaG91bGQgYmUgY2FsbGVkIG9uIGluaXRpYWwgbG9hZCBvZiB0aGUgc2VnbWVudCxcbiAgICAgKiBhZnRlciB0aGUgZ2VzdHVyZSBpcyBjb21wbGV0ZWQgKGlmIGRyYWdnaW5nIGJldHdlZW4gc2VnbWVudHMpXG4gICAgICogYW5kIHdoZW4gYSBzZWdtZW50IGJ1dHRvbiBpcyBjbGlja2VkIGRpcmVjdGx5LlxuICAgICAqL1xuICAgIHVwZGF0ZVNlZ21lbnRWaWV3KHNtb290aFNjcm9sbCA9IHRydWUpIHtcbiAgICAgICAgY29uc3QgYnV0dG9ucyA9IHRoaXMuZ2V0QnV0dG9ucygpO1xuICAgICAgICBjb25zdCBidXR0b24gPSBidXR0b25zLmZpbmQoKGJ0bikgPT4gYnRuLnZhbHVlID09PSB0aGlzLnZhbHVlKTtcbiAgICAgICAgLy8gSWYgdGhlIGJ1dHRvbiBkb2VzIG5vdCBoYXZlIGEgY29udGVudElkIHRoZW4gdGhlcmUgaXNcbiAgICAgICAgLy8gbm8gYXNzb2NpYXRlZCBzZWdtZW50IHZpZXcgdG8gdXBkYXRlXG4gICAgICAgIGlmICghKGJ1dHRvbiA9PT0gbnVsbCB8fCBidXR0b24gPT09IHZvaWQgMCA/IHZvaWQgMCA6IGJ1dHRvbi5jb250ZW50SWQpKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgY29uc3Qgc2VnbWVudFZpZXcgPSB0aGlzLnNlZ21lbnRWaWV3RWw7XG4gICAgICAgIGlmIChzZWdtZW50Vmlldykge1xuICAgICAgICAgICAgc2VnbWVudFZpZXcuc2V0Q29udGVudChidXR0b24uY29udGVudElkLCBzbW9vdGhTY3JvbGwpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHNjcm9sbEFjdGl2ZUJ1dHRvbkludG9WaWV3KHNtb290aFNjcm9sbCA9IHRydWUpIHtcbiAgICAgICAgY29uc3QgeyBzY3JvbGxhYmxlLCB2YWx1ZSwgZWwgfSA9IHRoaXM7XG4gICAgICAgIGlmIChzY3JvbGxhYmxlKSB7XG4gICAgICAgICAgICBjb25zdCBidXR0b25zID0gdGhpcy5nZXRCdXR0b25zKCk7XG4gICAgICAgICAgICBjb25zdCBhY3RpdmVCdXR0b24gPSBidXR0b25zLmZpbmQoKGJ1dHRvbikgPT4gYnV0dG9uLnZhbHVlID09PSB2YWx1ZSk7XG4gICAgICAgICAgICBpZiAoYWN0aXZlQnV0dG9uICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBzY3JvbGxDb250YWluZXJCb3ggPSBlbC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICAgICAgICAgICAgICBjb25zdCBhY3RpdmVCdXR0b25Cb3ggPSBhY3RpdmVCdXR0b24uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgICAgICogU3VidHJhY3QgdGhlIGFjdGl2ZSBidXR0b24geCBwb3NpdGlvbiBmcm9tIHRoZSBzY3JvbGxcbiAgICAgICAgICAgICAgICAgKiBjb250YWluZXIgeCBwb3NpdGlvbi4gVGhpcyB3aWxsIGdpdmUgdXMgdGhlIHggcG9zaXRpb25cbiAgICAgICAgICAgICAgICAgKiBvZiB0aGUgYWN0aXZlIGJ1dHRvbiB3aXRoaW4gdGhlIHNjcm9sbCBjb250YWluZXIuXG4gICAgICAgICAgICAgICAgICovXG4gICAgICAgICAgICAgICAgY29uc3QgYWN0aXZlQnV0dG9uTGVmdCA9IGFjdGl2ZUJ1dHRvbkJveC54IC0gc2Nyb2xsQ29udGFpbmVyQm94Lng7XG4gICAgICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgICAgICogSWYgd2UganVzdCB1c2VkIGFjdGl2ZUJ1dHRvbkxlZnQsIHRoZW4gdGhlIGFjdGl2ZSBidXR0b25cbiAgICAgICAgICAgICAgICAgKiB3b3VsZCBiZSBhbGlnbmVkIHdpdGggdGhlIGxlZnQgZWRnZSBvZiB0aGUgc2Nyb2xsIGNvbnRhaW5lci5cbiAgICAgICAgICAgICAgICAgKiBJbnN0ZWFkLCB3ZSB3YW50IHRoZSBzZWdtZW50IGJ1dHRvbiB0byBiZSBjZW50ZXJlZC4gQXMgYSByZXN1bHQsXG4gICAgICAgICAgICAgICAgICogd2Ugc3VidHJhY3QgaGFsZiBvZiB0aGUgc2Nyb2xsIGNvbnRhaW5lciB3aWR0aC4gVGhpcyB3aWxsIHBvc2l0aW9uXG4gICAgICAgICAgICAgICAgICogdGhlIGxlZnQgZWRnZSBvZiB0aGUgYWN0aXZlIGJ1dHRvbiBhdCB0aGUgbWlkcG9pbnQgb2YgdGhlIHNjcm9sbCBjb250YWluZXIuXG4gICAgICAgICAgICAgICAgICogV2UgdGhlbiBhZGQgaGFsZiBvZiB0aGUgYWN0aXZlIGJ1dHRvbiB3aWR0aC4gVGhpcyB3aWxsIHBvc2l0aW9uIHRoZSBhY3RpdmVcbiAgICAgICAgICAgICAgICAgKiBidXR0b24gc3VjaCB0aGF0IHRoZSBtaWRwb2ludCBvZiB0aGUgYWN0aXZlIGJ1dHRvbiBpcyBhdCB0aGUgbWlkcG9pbnQgb2YgdGhlXG4gICAgICAgICAgICAgICAgICogc2Nyb2xsIGNvbnRhaW5lci5cbiAgICAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICAgICBjb25zdCBjZW50ZXJlZFggPSBhY3RpdmVCdXR0b25MZWZ0IC0gc2Nyb2xsQ29udGFpbmVyQm94LndpZHRoIC8gMiArIGFjdGl2ZUJ1dHRvbkJveC53aWR0aCAvIDI7XG4gICAgICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgICAgICogbmV3U2Nyb2xsUG9zaXRpb24gaXMgdGhlIGFic29sdXRlIHNjcm9sbCBwb3NpdGlvbiB0aGF0IHRoZVxuICAgICAgICAgICAgICAgICAqIGNvbnRhaW5lciBuZWVkcyB0byBtb3ZlIHRvIGluIG9yZGVyIHRvIGNlbnRlciB0aGUgYWN0aXZlIGJ1dHRvbi5cbiAgICAgICAgICAgICAgICAgKiBJdCBpcyBjYWxjdWxhdGVkIGJ5IGFkZGluZyB0aGUgY3VycmVudCBzY3JvbGwgcG9zaXRpb25cbiAgICAgICAgICAgICAgICAgKiAoc2Nyb2xsTGVmdCkgdG8gdGhlIG9mZnNldCBuZWVkZWQgdG8gY2VudGVyIHRoZSBidXR0b25cbiAgICAgICAgICAgICAgICAgKiAoY2VudGVyZWRYKS5cbiAgICAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICAgICBjb25zdCBuZXdTY3JvbGxQb3NpdGlvbiA9IGVsLnNjcm9sbExlZnQgKyBjZW50ZXJlZFg7XG4gICAgICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgICAgICogV2UgaW50ZW50aW9uYWxseSB1c2Ugc2Nyb2xsVG8gaGVyZSBpbnN0ZWFkIG9mIHNjcm9sbEludG9WaWV3XG4gICAgICAgICAgICAgICAgICogdG8gYXZvaWQgYSBXZWJLaXQgYnVnIHdoZXJlIGFjY2VsZXJhdGVkIGFuaW1hdGlvbnMgYnJlYWtcbiAgICAgICAgICAgICAgICAgKiB3aGVuIHVzaW5nIHNjcm9sbEludG9WaWV3LiBVc2luZyBzY3JvbGxJbnRvVmlldyB3aWxsIGNhdXNlIHRoZVxuICAgICAgICAgICAgICAgICAqIHNlZ21lbnQgY29udGFpbmVyIHRvIGp1bXAgZHVyaW5nIHRoZSB0cmFuc2l0aW9uIGFuZCB0aGVuIHNuYXAgaW50byBwbGFjZS5cbiAgICAgICAgICAgICAgICAgKiBUaGlzIGlzIGJlY2F1c2Ugc2Nyb2xsSW50b1ZpZXcgY2FuIHBvdGVudGlhbGx5IGNhdXNlIHBhcmVudCBlbGVtZW50XG4gICAgICAgICAgICAgICAgICogY29udGFpbmVycyB0byBhbHNvIHNjcm9sbC4gc2Nyb2xsVG8gZG9lcyBub3QgaGF2ZSB0aGlzIHNhbWUgYmVoYXZpb3IsIHNvXG4gICAgICAgICAgICAgICAgICogd2UgdXNlIHRoaXMgQVBJIGluc3RlYWQuXG4gICAgICAgICAgICAgICAgICpcbiAgICAgICAgICAgICAgICAgKiBzY3JvbGxUbyBpcyB1c2VkIGluc3RlYWQgb2Ygc2Nyb2xsQnkgYmVjYXVzZSB0aGVyZSBpcyBhXG4gICAgICAgICAgICAgICAgICogV2Via2l0IGJ1ZyB0aGF0IGNhdXNlcyBzY3JvbGxCeSB0byBub3Qgd29yayBzbW9vdGhseSB3aGVuXG4gICAgICAgICAgICAgICAgICogdGhlIGFjdGl2ZSBidXR0b24gaXMgbmVhciB0aGUgZWRnZSBvZiB0aGUgc2Nyb2xsIGNvbnRhaW5lci5cbiAgICAgICAgICAgICAgICAgKiBUaGlzIGxlYWRzIHRvIHRoZSBidXR0b25zIHRvIGp1bXAgYXJvdW5kIGR1cmluZyB0aGUgdHJhbnNpdGlvbi5cbiAgICAgICAgICAgICAgICAgKlxuICAgICAgICAgICAgICAgICAqIE5vdGUgdGhhdCBpZiB0aGVyZSBpcyBub3QgZW5vdWdoIHNjcm9sbGluZyBzcGFjZSB0byBjZW50ZXIgdGhlIGVsZW1lbnRcbiAgICAgICAgICAgICAgICAgKiB3aXRoaW4gdGhlIHNjcm9sbCBjb250YWluZXIsIHRoZSBicm93c2VyIHdpbGwgYXR0ZW1wdFxuICAgICAgICAgICAgICAgICAqIHRvIGNlbnRlciBieSBhcyBtdWNoIGFzIGl0IGNhbi5cbiAgICAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICAgICBlbC5zY3JvbGxUbyh7XG4gICAgICAgICAgICAgICAgICAgIHRvcDogMCxcbiAgICAgICAgICAgICAgICAgICAgbGVmdDogbmV3U2Nyb2xsUG9zaXRpb24sXG4gICAgICAgICAgICAgICAgICAgIGJlaGF2aW9yOiBzbW9vdGhTY3JvbGwgPyAnc21vb3RoJyA6ICdpbnN0YW50JyxcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICBzZXROZXh0SW5kZXgoZGV0YWlsLCBpc0VuZCA9IGZhbHNlKSB7XG4gICAgICAgIGNvbnN0IHJ0bCA9IGlzUlRMKHRoaXMuZWwpO1xuICAgICAgICBjb25zdCBhY3RpdmF0ZWQgPSB0aGlzLmFjdGl2YXRlZDtcbiAgICAgICAgY29uc3QgYnV0dG9ucyA9IHRoaXMuZ2V0QnV0dG9ucygpO1xuICAgICAgICBjb25zdCBpbmRleCA9IGJ1dHRvbnMuZmluZEluZGV4KChidXR0b24pID0+IGJ1dHRvbi52YWx1ZSA9PT0gdGhpcy52YWx1ZSk7XG4gICAgICAgIGNvbnN0IHByZXZpb3VzID0gYnV0dG9uc1tpbmRleF07XG4gICAgICAgIGxldCBjdXJyZW50O1xuICAgICAgICBsZXQgbmV4dEluZGV4O1xuICAgICAgICBpZiAoaW5kZXggPT09IC0xKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgLy8gR2V0IHRoZSBlbGVtZW50IHRoYXQgdGhlIHRvdWNoIGV2ZW50IHN0YXJ0ZWQgb24gaW4gY2FzZVxuICAgICAgICAvLyBpdCB3YXMgdGhlIGNoZWNrZWQgYnV0dG9uLCB0aGVuIHdlIHdpbGwgbW92ZSB0aGUgaW5kaWNhdG9yXG4gICAgICAgIGNvbnN0IHJlY3QgPSBwcmV2aW91cy5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICAgICAgY29uc3QgbGVmdCA9IHJlY3QubGVmdDtcbiAgICAgICAgY29uc3Qgd2lkdGggPSByZWN0LndpZHRoO1xuICAgICAgICAvLyBHZXQgdGhlIGVsZW1lbnQgdGhhdCB0aGUgZ2VzdHVyZSBpcyBvbiB0b3Agb2YgYmFzZWQgb24gdGhlIGN1cnJlbnRYIG9mIHRoZVxuICAgICAgICAvLyBnZXN0dXJlIGV2ZW50IGFuZCB0aGUgWSBjb29yZGluYXRlIG9mIHRoZSBzdGFydGluZyBlbGVtZW50LCBzaW5jZSB0aGUgZ2VzdHVyZVxuICAgICAgICAvLyBjYW4gbW92ZSB1cCBhbmQgZG93biBvZmYgb2YgdGhlIHNlZ21lbnRcbiAgICAgICAgY29uc3QgY3VycmVudFggPSBkZXRhaWwuY3VycmVudFg7XG4gICAgICAgIGNvbnN0IHByZXZpb3VzWSA9IHJlY3QudG9wICsgcmVjdC5oZWlnaHQgLyAyO1xuICAgICAgICAvKipcbiAgICAgICAgICogU2VnbWVudCBjYW4gYmUgdXNlZCBpbnNpZGUgdGhlIHNoYWRvdyBkb21cbiAgICAgICAgICogc28gZG9pbmcgZG9jdW1lbnQuZWxlbWVudEZyb21Qb2ludCB3b3VsZCBuZXZlclxuICAgICAgICAgKiByZXR1cm4gYSBzZWdtZW50IGJ1dHRvbiBpbiB0aGF0IGluc3RhbmNlLlxuICAgICAgICAgKiBXZSB1c2UgZ2V0Um9vdE5vZGUgdG8gd2hpY2ggd2lsbCByZXR1cm4gdGhlIHBhcmVudFxuICAgICAgICAgKiBzaGFkb3cgcm9vdCBpZiB1c2VkIGluc2lkZSBhIHNoYWRvdyBjb21wb25lbnQgYW5kXG4gICAgICAgICAqIHJldHVybnMgZG9jdW1lbnQgb3RoZXJ3aXNlLlxuICAgICAgICAgKi9cbiAgICAgICAgY29uc3Qgcm9vdCA9IHRoaXMuZWwuZ2V0Um9vdE5vZGUoKTtcbiAgICAgICAgY29uc3QgbmV4dEVsID0gcm9vdC5lbGVtZW50RnJvbVBvaW50KGN1cnJlbnRYLCBwcmV2aW91c1kpO1xuICAgICAgICBjb25zdCBkZWNyZWFzZUluZGV4ID0gcnRsID8gY3VycmVudFggPiBsZWZ0ICsgd2lkdGggOiBjdXJyZW50WCA8IGxlZnQ7XG4gICAgICAgIGNvbnN0IGluY3JlYXNlSW5kZXggPSBydGwgPyBjdXJyZW50WCA8IGxlZnQgOiBjdXJyZW50WCA+IGxlZnQgKyB3aWR0aDtcbiAgICAgICAgLy8gSWYgdGhlIGluZGljYXRvciBpcyBjdXJyZW50bHkgYWN0aXZhdGVkIHRoZW4gd2UgaGF2ZSBzdGFydGVkIHRoZSBnZXN0dXJlXG4gICAgICAgIC8vIG9uIHRvcCBvZiB0aGUgY2hlY2tlZCBidXR0b24gc28gd2UgbmVlZCB0byBzbGlkZSB0aGUgaW5kaWNhdG9yXG4gICAgICAgIC8vIGJ5IGNoZWNraW5nIHRoZSBidXR0b24gbmV4dCB0byBpdCBhcyB3ZSBtb3ZlXG4gICAgICAgIGlmIChhY3RpdmF0ZWQgJiYgIWlzRW5kKSB7XG4gICAgICAgICAgICAvLyBEZWNyZWFzZSBpbmRleCwgbW92ZSBsZWZ0IGluIExUUiAmIHJpZ2h0IGluIFJUTFxuICAgICAgICAgICAgaWYgKGRlY3JlYXNlSW5kZXgpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBuZXdJbmRleCA9IGluZGV4IC0gMTtcbiAgICAgICAgICAgICAgICBpZiAobmV3SW5kZXggPj0gMCkge1xuICAgICAgICAgICAgICAgICAgICBuZXh0SW5kZXggPSBuZXdJbmRleDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgLy8gSW5jcmVhc2UgaW5kZXgsIG1vdmVzIHJpZ2h0IGluIExUUiAmIGxlZnQgaW4gUlRMXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChpbmNyZWFzZUluZGV4KSB7XG4gICAgICAgICAgICAgICAgaWYgKGFjdGl2YXRlZCAmJiAhaXNFbmQpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgbmV3SW5kZXggPSBpbmRleCArIDE7XG4gICAgICAgICAgICAgICAgICAgIGlmIChuZXdJbmRleCA8IGJ1dHRvbnMubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBuZXh0SW5kZXggPSBuZXdJbmRleDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChuZXh0SW5kZXggIT09IHVuZGVmaW5lZCAmJiAhYnV0dG9uc1tuZXh0SW5kZXhdLmRpc2FibGVkKSB7XG4gICAgICAgICAgICAgICAgY3VycmVudCA9IGJ1dHRvbnNbbmV4dEluZGV4XTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICAvLyBJZiB0aGUgaW5kaWNhdG9yIGlzIG5vdCBhY3RpdmF0ZWQgdGhlbiB3ZSB3aWxsIGp1c3Qgc2V0IHRoZSBpbmRpY2F0b3JcbiAgICAgICAgLy8gdG8gdGhlIGVsZW1lbnQgd2hlcmUgdGhlIGdlc3R1cmUgZW5kZWRcbiAgICAgICAgaWYgKCFhY3RpdmF0ZWQgJiYgaXNFbmQpIHtcbiAgICAgICAgICAgIGN1cnJlbnQgPSBuZXh0RWw7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGN1cnJlbnQgIT0gbnVsbCkge1xuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBJZiBjdXJyZW50IGVsZW1lbnQgaXMgaW9uLXNlZ21lbnQgdGhlbiB0aGF0IG1lYW5zXG4gICAgICAgICAgICAgKiB1c2VyIHRyaWVkIHRvIHNlbGVjdCBhIGRpc2FibGVkIGlvbi1zZWdtZW50LWJ1dHRvbixcbiAgICAgICAgICAgICAqIGFuZCB3ZSBzaG91bGQgbm90IHVwZGF0ZSB0aGUgcmlwcGxlLlxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBpZiAoY3VycmVudC50YWdOYW1lID09PSAnSU9OLVNFR01FTlQnKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHByZXZpb3VzICE9PSBjdXJyZW50KSB7XG4gICAgICAgICAgICAgICAgdGhpcy5jaGVja0J1dHRvbihwcmV2aW91cywgY3VycmVudCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIGVtaXRTdHlsZSgpIHtcbiAgICAgICAgdGhpcy5pb25TdHlsZS5lbWl0KHtcbiAgICAgICAgICAgIHNlZ21lbnQ6IHRydWUsXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBvbktleURvd24oZXYpIHtcbiAgICAgICAgY29uc3QgcnRsID0gaXNSVEwodGhpcy5lbCk7XG4gICAgICAgIGxldCBrZXlEb3duU2VsZWN0c0J1dHRvbiA9IHRoaXMuc2VsZWN0T25Gb2N1cztcbiAgICAgICAgbGV0IGN1cnJlbnQ7XG4gICAgICAgIHN3aXRjaCAoZXYua2V5KSB7XG4gICAgICAgICAgICBjYXNlICdBcnJvd1JpZ2h0JzpcbiAgICAgICAgICAgICAgICBldi5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgICAgIGN1cnJlbnQgPSBydGwgPyB0aGlzLmdldFNlZ21lbnRCdXR0b24oJ3ByZXZpb3VzJykgOiB0aGlzLmdldFNlZ21lbnRCdXR0b24oJ25leHQnKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ0Fycm93TGVmdCc6XG4gICAgICAgICAgICAgICAgZXYucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgICAgICBjdXJyZW50ID0gcnRsID8gdGhpcy5nZXRTZWdtZW50QnV0dG9uKCduZXh0JykgOiB0aGlzLmdldFNlZ21lbnRCdXR0b24oJ3ByZXZpb3VzJyk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdIb21lJzpcbiAgICAgICAgICAgICAgICBldi5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgICAgIGN1cnJlbnQgPSB0aGlzLmdldFNlZ21lbnRCdXR0b24oJ2ZpcnN0Jyk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdFbmQnOlxuICAgICAgICAgICAgICAgIGV2LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICAgICAgY3VycmVudCA9IHRoaXMuZ2V0U2VnbWVudEJ1dHRvbignbGFzdCcpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnICc6XG4gICAgICAgICAgICBjYXNlICdFbnRlcic6XG4gICAgICAgICAgICAgICAgZXYucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgICAgICBjdXJyZW50ID0gZG9jdW1lbnQuYWN0aXZlRWxlbWVudDtcbiAgICAgICAgICAgICAgICBrZXlEb3duU2VsZWN0c0J1dHRvbiA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFjdXJyZW50KSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGtleURvd25TZWxlY3RzQnV0dG9uKSB7XG4gICAgICAgICAgICBjb25zdCBwcmV2aW91cyA9IHRoaXMuY2hlY2tlZDtcbiAgICAgICAgICAgIHRoaXMuY2hlY2tCdXR0b24ocHJldmlvdXMgfHwgY3VycmVudCwgY3VycmVudCk7XG4gICAgICAgICAgICBpZiAoY3VycmVudCAhPT0gcHJldmlvdXMpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmVtaXRWYWx1ZUNoYW5nZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGN1cnJlbnQuc2V0Rm9jdXMoKTtcbiAgICB9XG4gICAgcmVuZGVyKCkge1xuICAgICAgICBjb25zdCBtb2RlID0gZ2V0SW9uTW9kZSh0aGlzKTtcbiAgICAgICAgcmV0dXJuIChoKEhvc3QsIHsga2V5OiAnZTY3ZWQ1MTI3MzljZjJjZmU2NTdiMGM0NGViYzNkZmIxZTlmYmI3OScsIHJvbGU6IFwidGFibGlzdFwiLCBvbkNsaWNrOiB0aGlzLm9uQ2xpY2ssIGNsYXNzOiBjcmVhdGVDb2xvckNsYXNzZXModGhpcy5jb2xvciwge1xuICAgICAgICAgICAgICAgIFttb2RlXTogdHJ1ZSxcbiAgICAgICAgICAgICAgICAnaW4tdG9vbGJhcic6IGhvc3RDb250ZXh0KCdpb24tdG9vbGJhcicsIHRoaXMuZWwpLFxuICAgICAgICAgICAgICAgICdpbi10b29sYmFyLWNvbG9yJzogaG9zdENvbnRleHQoJ2lvbi10b29sYmFyW2NvbG9yXScsIHRoaXMuZWwpLFxuICAgICAgICAgICAgICAgICdzZWdtZW50LWFjdGl2YXRlZCc6IHRoaXMuYWN0aXZhdGVkLFxuICAgICAgICAgICAgICAgICdzZWdtZW50LWRpc2FibGVkJzogdGhpcy5kaXNhYmxlZCxcbiAgICAgICAgICAgICAgICAnc2VnbWVudC1zY3JvbGxhYmxlJzogdGhpcy5zY3JvbGxhYmxlLFxuICAgICAgICAgICAgfSkgfSwgaChcInNsb3RcIiwgeyBrZXk6ICc4MDRkOGFjZmNiOWFiZmVlZWUzODI0NGIwMTVmYmM1YzM2MzMwYjllJywgb25TbG90Y2hhbmdlOiB0aGlzLm9uU2xvdHRlZEl0ZW1zQ2hhbmdlIH0pKSk7XG4gICAgfVxuICAgIGdldCBlbCgpIHsgcmV0dXJuIGdldEVsZW1lbnQodGhpcyk7IH1cbiAgICBzdGF0aWMgZ2V0IHdhdGNoZXJzKCkgeyByZXR1cm4ge1xuICAgICAgICBcImNvbG9yXCI6IFtcImNvbG9yQ2hhbmdlZFwiXSxcbiAgICAgICAgXCJzd2lwZUdlc3R1cmVcIjogW1wic3dpcGVHZXN0dXJlQ2hhbmdlZFwiXSxcbiAgICAgICAgXCJ2YWx1ZVwiOiBbXCJ2YWx1ZUNoYW5nZWRcIl0sXG4gICAgICAgIFwiZGlzYWJsZWRcIjogW1wiZGlzYWJsZWRDaGFuZ2VkXCJdXG4gICAgfTsgfVxufTtcblNlZ21lbnQuc3R5bGUgPSB7XG4gICAgaW9zOiBzZWdtZW50SW9zQ3NzLFxuICAgIG1kOiBzZWdtZW50TWRDc3Ncbn07XG5cbmNvbnN0IHNlZ21lbnRCdXR0b25Jb3NDc3MgPSBcIjpob3N0ey0tY29sb3I6aW5pdGlhbDstLWNvbG9yLWhvdmVyOnZhcigtLWNvbG9yKTstLWNvbG9yLWNoZWNrZWQ6dmFyKC0tY29sb3IpOy0tY29sb3ItZGlzYWJsZWQ6dmFyKC0tY29sb3IpOy0tcGFkZGluZy1zdGFydDowOy0tcGFkZGluZy1lbmQ6MDstLXBhZGRpbmctdG9wOjA7LS1wYWRkaW5nLWJvdHRvbTowO2JvcmRlci1yYWRpdXM6dmFyKC0tYm9yZGVyLXJhZGl1cyk7ZGlzcGxheTotbXMtZmxleGJveDtkaXNwbGF5OmZsZXg7cG9zaXRpb246cmVsYXRpdmU7LW1zLWZsZXgtZGlyZWN0aW9uOmNvbHVtbjtmbGV4LWRpcmVjdGlvbjpjb2x1bW47aGVpZ2h0OmF1dG87YmFja2dyb3VuZDp2YXIoLS1iYWNrZ3JvdW5kKTtjb2xvcjp2YXIoLS1jb2xvcik7dGV4dC1kZWNvcmF0aW9uOm5vbmU7dGV4dC1vdmVyZmxvdzplbGxpcHNpczt3aGl0ZS1zcGFjZTpub3dyYXA7Y3Vyc29yOnBvaW50ZXI7Z3JpZC1yb3c6MTstd2Via2l0LWZvbnQta2VybmluZzpub25lO2ZvbnQta2VybmluZzpub25lfS5idXR0b24tbmF0aXZle2JvcmRlci1yYWRpdXM6MDtmb250LWZhbWlseTppbmhlcml0O2ZvbnQtc2l6ZTppbmhlcml0O2ZvbnQtc3R5bGU6aW5oZXJpdDtmb250LXdlaWdodDppbmhlcml0O2xldHRlci1zcGFjaW5nOmluaGVyaXQ7dGV4dC1kZWNvcmF0aW9uOmluaGVyaXQ7dGV4dC1pbmRlbnQ6aW5oZXJpdDt0ZXh0LW92ZXJmbG93OmluaGVyaXQ7dGV4dC10cmFuc2Zvcm06aW5oZXJpdDt0ZXh0LWFsaWduOmluaGVyaXQ7d2hpdGUtc3BhY2U6aW5oZXJpdDtjb2xvcjppbmhlcml0Oy13ZWJraXQtbWFyZ2luLXN0YXJ0OnZhcigtLW1hcmdpbi1zdGFydCk7bWFyZ2luLWlubGluZS1zdGFydDp2YXIoLS1tYXJnaW4tc3RhcnQpOy13ZWJraXQtbWFyZ2luLWVuZDp2YXIoLS1tYXJnaW4tZW5kKTttYXJnaW4taW5saW5lLWVuZDp2YXIoLS1tYXJnaW4tZW5kKTttYXJnaW4tdG9wOnZhcigtLW1hcmdpbi10b3ApO21hcmdpbi1ib3R0b206dmFyKC0tbWFyZ2luLWJvdHRvbSk7LXdlYmtpdC1wYWRkaW5nLXN0YXJ0OnZhcigtLXBhZGRpbmctc3RhcnQpO3BhZGRpbmctaW5saW5lLXN0YXJ0OnZhcigtLXBhZGRpbmctc3RhcnQpOy13ZWJraXQtcGFkZGluZy1lbmQ6dmFyKC0tcGFkZGluZy1lbmQpO3BhZGRpbmctaW5saW5lLWVuZDp2YXIoLS1wYWRkaW5nLWVuZCk7cGFkZGluZy10b3A6dmFyKC0tcGFkZGluZy10b3ApO3BhZGRpbmctYm90dG9tOnZhcigtLXBhZGRpbmctYm90dG9tKTstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGUzZCgwLCAgMCwgIDApO3RyYW5zZm9ybTp0cmFuc2xhdGUzZCgwLCAgMCwgIDApO2Rpc3BsYXk6LW1zLWZsZXhib3g7ZGlzcGxheTpmbGV4O3Bvc2l0aW9uOnJlbGF0aXZlOy1tcy1mbGV4LWRpcmVjdGlvbjppbmhlcml0O2ZsZXgtZGlyZWN0aW9uOmluaGVyaXQ7LW1zLWZsZXgtcG9zaXRpdmU6MTtmbGV4LWdyb3c6MTstbXMtZmxleC1hbGlnbjpjZW50ZXI7YWxpZ24taXRlbXM6Y2VudGVyOy1tcy1mbGV4LXBhY2s6Y2VudGVyO2p1c3RpZnktY29udGVudDpjZW50ZXI7d2lkdGg6MTAwJTttaW4td2lkdGg6aW5oZXJpdDttYXgtd2lkdGg6aW5oZXJpdDtoZWlnaHQ6YXV0bzttaW4taGVpZ2h0OmluaGVyaXQ7bWF4LWhlaWdodDppbmhlcml0Oy13ZWJraXQtdHJhbnNpdGlvbjp2YXIoLS10cmFuc2l0aW9uKTt0cmFuc2l0aW9uOnZhcigtLXRyYW5zaXRpb24pO2JvcmRlcjpub25lO291dGxpbmU6bm9uZTtiYWNrZ3JvdW5kOnRyYW5zcGFyZW50O2NvbnRhaW46Y29udGVudDtwb2ludGVyLWV2ZW50czpub25lO292ZXJmbG93OmhpZGRlbjt6LWluZGV4OjJ9LmJ1dHRvbi1uYXRpdmU6OmFmdGVye2xlZnQ6MDtyaWdodDowO3RvcDowO2JvdHRvbTowO3Bvc2l0aW9uOmFic29sdXRlO2NvbnRlbnQ6XFxcIlxcXCI7b3BhY2l0eTowfS5idXR0b24taW5uZXJ7ZGlzcGxheTotbXMtZmxleGJveDtkaXNwbGF5OmZsZXg7cG9zaXRpb246cmVsYXRpdmU7LW1zLWZsZXgtZmxvdzppbmhlcml0O2ZsZXgtZmxvdzppbmhlcml0Oy1tcy1mbGV4LWFsaWduOmNlbnRlcjthbGlnbi1pdGVtczpjZW50ZXI7LW1zLWZsZXgtcGFjazpjZW50ZXI7anVzdGlmeS1jb250ZW50OmNlbnRlcjt3aWR0aDoxMDAlO2hlaWdodDoxMDAlO3otaW5kZXg6MX06aG9zdCguc2VnbWVudC1idXR0b24tY2hlY2tlZCl7YmFja2dyb3VuZDp2YXIoLS1iYWNrZ3JvdW5kLWNoZWNrZWQpO2NvbG9yOnZhcigtLWNvbG9yLWNoZWNrZWQpfTpob3N0KC5zZWdtZW50LWJ1dHRvbi1kaXNhYmxlZCl7Y3Vyc29yOmRlZmF1bHQ7cG9pbnRlci1ldmVudHM6bm9uZX06aG9zdCguaW9uLWZvY3VzZWQpIC5idXR0b24tbmF0aXZle2NvbG9yOnZhcigtLWNvbG9yLWZvY3VzZWQpfTpob3N0KC5pb24tZm9jdXNlZCkgLmJ1dHRvbi1uYXRpdmU6OmFmdGVye2JhY2tncm91bmQ6dmFyKC0tYmFja2dyb3VuZC1mb2N1c2VkKTtvcGFjaXR5OnZhcigtLWJhY2tncm91bmQtZm9jdXNlZC1vcGFjaXR5KX06aG9zdCg6Zm9jdXMpe291dGxpbmU6bm9uZX1AbWVkaWEgKGFueS1ob3ZlcjogaG92ZXIpezpob3N0KDpob3ZlcikgLmJ1dHRvbi1uYXRpdmV7Y29sb3I6dmFyKC0tY29sb3ItaG92ZXIpfTpob3N0KDpob3ZlcikgLmJ1dHRvbi1uYXRpdmU6OmFmdGVye2JhY2tncm91bmQ6dmFyKC0tYmFja2dyb3VuZC1ob3Zlcik7b3BhY2l0eTp2YXIoLS1iYWNrZ3JvdW5kLWhvdmVyLW9wYWNpdHkpfTpob3N0KC5zZWdtZW50LWJ1dHRvbi1jaGVja2VkOmhvdmVyKSAuYnV0dG9uLW5hdGl2ZXtjb2xvcjp2YXIoLS1jb2xvci1jaGVja2VkKX19OjpzbG90dGVkKGlvbi1pY29uKXstbXMtZmxleC1uZWdhdGl2ZTowO2ZsZXgtc2hyaW5rOjA7LW1zLWZsZXgtb3JkZXI6LTE7b3JkZXI6LTE7cG9pbnRlci1ldmVudHM6bm9uZX06OnNsb3R0ZWQoaW9uLWxhYmVsKXtkaXNwbGF5OmJsb2NrOy1tcy1mbGV4LWl0ZW0tYWxpZ246Y2VudGVyO2FsaWduLXNlbGY6Y2VudGVyO21heC13aWR0aDoxMDAlO2xpbmUtaGVpZ2h0OjIycHg7dGV4dC1vdmVyZmxvdzplbGxpcHNpczt3aGl0ZS1zcGFjZTpub3dyYXA7b3ZlcmZsb3c6aGlkZGVuOy13ZWJraXQtYm94LXNpemluZzpib3JkZXItYm94O2JveC1zaXppbmc6Ym9yZGVyLWJveDtwb2ludGVyLWV2ZW50czpub25lfTpob3N0KC5zZWdtZW50LWJ1dHRvbi1sYXlvdXQtaWNvbi10b3ApIC5idXR0b24tbmF0aXZley1tcy1mbGV4LWRpcmVjdGlvbjpjb2x1bW47ZmxleC1kaXJlY3Rpb246Y29sdW1ufTpob3N0KC5zZWdtZW50LWJ1dHRvbi1sYXlvdXQtaWNvbi1zdGFydCkgLmJ1dHRvbi1uYXRpdmV7LW1zLWZsZXgtZGlyZWN0aW9uOnJvdztmbGV4LWRpcmVjdGlvbjpyb3d9Omhvc3QoLnNlZ21lbnQtYnV0dG9uLWxheW91dC1pY29uLWVuZCkgLmJ1dHRvbi1uYXRpdmV7LW1zLWZsZXgtZGlyZWN0aW9uOnJvdy1yZXZlcnNlO2ZsZXgtZGlyZWN0aW9uOnJvdy1yZXZlcnNlfTpob3N0KC5zZWdtZW50LWJ1dHRvbi1sYXlvdXQtaWNvbi1ib3R0b20pIC5idXR0b24tbmF0aXZley1tcy1mbGV4LWRpcmVjdGlvbjpjb2x1bW4tcmV2ZXJzZTtmbGV4LWRpcmVjdGlvbjpjb2x1bW4tcmV2ZXJzZX06aG9zdCguc2VnbWVudC1idXR0b24tbGF5b3V0LWljb24taGlkZSkgOjpzbG90dGVkKGlvbi1pY29uKXtkaXNwbGF5Om5vbmV9Omhvc3QoLnNlZ21lbnQtYnV0dG9uLWxheW91dC1sYWJlbC1oaWRlKSA6OnNsb3R0ZWQoaW9uLWxhYmVsKXtkaXNwbGF5Om5vbmV9aW9uLXJpcHBsZS1lZmZlY3R7Y29sb3I6dmFyKC0tcmlwcGxlLWNvbG9yLCB2YXIoLS1jb2xvci1jaGVja2VkKSl9LnNlZ21lbnQtYnV0dG9uLWluZGljYXRvcnstd2Via2l0LXRyYW5zZm9ybS1vcmlnaW46bGVmdDt0cmFuc2Zvcm0tb3JpZ2luOmxlZnQ7cG9zaXRpb246YWJzb2x1dGU7b3BhY2l0eTowOy13ZWJraXQtYm94LXNpemluZzpib3JkZXItYm94O2JveC1zaXppbmc6Ym9yZGVyLWJveDt3aWxsLWNoYW5nZTp0cmFuc2Zvcm0sIG9wYWNpdHk7cG9pbnRlci1ldmVudHM6bm9uZX0uc2VnbWVudC1idXR0b24taW5kaWNhdG9yLWJhY2tncm91bmR7d2lkdGg6MTAwJTtoZWlnaHQ6dmFyKC0taW5kaWNhdG9yLWhlaWdodCk7LXdlYmtpdC10cmFuc2Zvcm06dmFyKC0taW5kaWNhdG9yLXRyYW5zZm9ybSk7dHJhbnNmb3JtOnZhcigtLWluZGljYXRvci10cmFuc2Zvcm0pOy13ZWJraXQtYm94LXNoYWRvdzp2YXIoLS1pbmRpY2F0b3ItYm94LXNoYWRvdyk7Ym94LXNoYWRvdzp2YXIoLS1pbmRpY2F0b3ItYm94LXNoYWRvdyk7cG9pbnRlci1ldmVudHM6bm9uZX0uc2VnbWVudC1idXR0b24taW5kaWNhdG9yLWFuaW1hdGVkey13ZWJraXQtdHJhbnNpdGlvbjp2YXIoLS1pbmRpY2F0b3ItdHJhbnNpdGlvbik7dHJhbnNpdGlvbjp2YXIoLS1pbmRpY2F0b3ItdHJhbnNpdGlvbil9Omhvc3QoLnNlZ21lbnQtYnV0dG9uLWNoZWNrZWQpIC5zZWdtZW50LWJ1dHRvbi1pbmRpY2F0b3J7b3BhY2l0eToxfUBtZWRpYSAocHJlZmVycy1yZWR1Y2VkLW1vdGlvbjogcmVkdWNlKXsuc2VnbWVudC1idXR0b24taW5kaWNhdG9yLWJhY2tncm91bmR7LXdlYmtpdC10cmFuc2Zvcm06bm9uZTt0cmFuc2Zvcm06bm9uZX0uc2VnbWVudC1idXR0b24taW5kaWNhdG9yLWFuaW1hdGVkey13ZWJraXQtdHJhbnNpdGlvbjpub25lO3RyYW5zaXRpb246bm9uZX19Omhvc3R7LS1iYWNrZ3JvdW5kOm5vbmU7LS1iYWNrZ3JvdW5kLWNoZWNrZWQ6bm9uZTstLWJhY2tncm91bmQtaG92ZXI6bm9uZTstLWJhY2tncm91bmQtaG92ZXItb3BhY2l0eTowOy0tYmFja2dyb3VuZC1mb2N1c2VkOm5vbmU7LS1iYWNrZ3JvdW5kLWZvY3VzZWQtb3BhY2l0eTowOy0tYm9yZGVyLXJhZGl1czo3cHg7LS1ib3JkZXItd2lkdGg6MXB4Oy0tYm9yZGVyLWNvbG9yOnJnYmEodmFyKC0taW9uLXRleHQtY29sb3ItcmdiLCAwLCAwLCAwKSwgMC4xMik7LS1ib3JkZXItc3R5bGU6c29saWQ7LS1pbmRpY2F0b3ItYm94LXNoYWRvdzowIDAgNXB4IHJnYmEoMCwgMCwgMCwgMC4xNik7LS1pbmRpY2F0b3ItY29sb3I6dmFyKC0taW9uLWNvbG9yLXN0ZXAtMzUwLCB2YXIoLS1pb24tYmFja2dyb3VuZC1jb2xvci1zdGVwLTM1MCwgdmFyKC0taW9uLWJhY2tncm91bmQtY29sb3IsICNmZmYpKSk7LS1pbmRpY2F0b3ItaGVpZ2h0OjEwMCU7LS1pbmRpY2F0b3ItdHJhbnNpdGlvbjp0cmFuc2Zvcm0gMjYwbXMgY3ViaWMtYmV6aWVyKDAuNCwgMCwgMC4yLCAxKTstLWluZGljYXRvci10cmFuc2Zvcm06bm9uZTstLXRyYW5zaXRpb246MTAwbXMgYWxsIGxpbmVhcjstLXBhZGRpbmctdG9wOjA7LS1wYWRkaW5nLWVuZDoxM3B4Oy0tcGFkZGluZy1ib3R0b206MDstLXBhZGRpbmctc3RhcnQ6MTNweDttYXJnaW4tdG9wOjJweDttYXJnaW4tYm90dG9tOjJweDtwb3NpdGlvbjpyZWxhdGl2ZTstbXMtZmxleC1kaXJlY3Rpb246cm93O2ZsZXgtZGlyZWN0aW9uOnJvdzttaW4td2lkdGg6NzBweDttaW4taGVpZ2h0OjI4cHg7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlM2QoMCwgMCwgMCk7dHJhbnNmb3JtOnRyYW5zbGF0ZTNkKDAsIDAsIDApO2ZvbnQtc2l6ZToxM3B4O2ZvbnQtd2VpZ2h0OjQ1MDtsaW5lLWhlaWdodDozN3B4fTpob3N0OjpiZWZvcmV7bWFyZ2luLWxlZnQ6MDttYXJnaW4tcmlnaHQ6MDttYXJnaW4tdG9wOjVweDttYXJnaW4tYm90dG9tOjVweDstd2Via2l0LXRyYW5zaXRpb246MTYwbXMgb3BhY2l0eSBlYXNlLWluLW91dDt0cmFuc2l0aW9uOjE2MG1zIG9wYWNpdHkgZWFzZS1pbi1vdXQ7LXdlYmtpdC10cmFuc2l0aW9uLWRlbGF5OjEwMG1zO3RyYW5zaXRpb24tZGVsYXk6MTAwbXM7Ym9yZGVyLWxlZnQ6dmFyKC0tYm9yZGVyLXdpZHRoKSB2YXIoLS1ib3JkZXItc3R5bGUpIHZhcigtLWJvcmRlci1jb2xvcik7Y29udGVudDpcXFwiXFxcIjtvcGFjaXR5OjE7d2lsbC1jaGFuZ2U6b3BhY2l0eX06aG9zdCg6Zmlyc3Qtb2YtdHlwZSk6OmJlZm9yZXtib3JkZXItbGVmdC1jb2xvcjp0cmFuc3BhcmVudH06aG9zdCguc2VnbWVudC1idXR0b24tZGlzYWJsZWQpe29wYWNpdHk6MC4zfTo6c2xvdHRlZChpb24taWNvbil7Zm9udC1zaXplOjI0cHh9Omhvc3QoLnNlZ21lbnQtYnV0dG9uLWxheW91dC1pY29uLXN0YXJ0KSA6OnNsb3R0ZWQoaW9uLWxhYmVsKXstd2Via2l0LW1hcmdpbi1zdGFydDoycHg7bWFyZ2luLWlubGluZS1zdGFydDoycHg7LXdlYmtpdC1tYXJnaW4tZW5kOjA7bWFyZ2luLWlubGluZS1lbmQ6MH06aG9zdCguc2VnbWVudC1idXR0b24tbGF5b3V0LWljb24tZW5kKSA6OnNsb3R0ZWQoaW9uLWxhYmVsKXstd2Via2l0LW1hcmdpbi1zdGFydDowO21hcmdpbi1pbmxpbmUtc3RhcnQ6MDstd2Via2l0LW1hcmdpbi1lbmQ6MnB4O21hcmdpbi1pbmxpbmUtZW5kOjJweH0uc2VnbWVudC1idXR0b24taW5kaWNhdG9yey13ZWJraXQtcGFkZGluZy1zdGFydDoycHg7cGFkZGluZy1pbmxpbmUtc3RhcnQ6MnB4Oy13ZWJraXQtcGFkZGluZy1lbmQ6MnB4O3BhZGRpbmctaW5saW5lLWVuZDoycHg7bGVmdDowO3JpZ2h0OjA7dG9wOjA7Ym90dG9tOjB9LnNlZ21lbnQtYnV0dG9uLWluZGljYXRvci1iYWNrZ3JvdW5ke2JvcmRlci1yYWRpdXM6dmFyKC0tYm9yZGVyLXJhZGl1cyk7YmFja2dyb3VuZDp2YXIoLS1pbmRpY2F0b3ItY29sb3IpfS5zZWdtZW50LWJ1dHRvbi1pbmRpY2F0b3ItYmFja2dyb3VuZHstd2Via2l0LXRyYW5zaXRpb246dmFyKC0taW5kaWNhdG9yLXRyYW5zaXRpb24pO3RyYW5zaXRpb246dmFyKC0taW5kaWNhdG9yLXRyYW5zaXRpb24pfTpob3N0KC5zZWdtZW50LWJ1dHRvbi1jaGVja2VkKTo6YmVmb3JlLDpob3N0KC5zZWdtZW50LWJ1dHRvbi1hZnRlci1jaGVja2VkKTo6YmVmb3Jle29wYWNpdHk6MH06aG9zdCguc2VnbWVudC1idXR0b24tY2hlY2tlZCl7ei1pbmRleDotMX06aG9zdCguc2VnbWVudC1idXR0b24tYWN0aXZhdGVkKXstLWluZGljYXRvci10cmFuc2Zvcm06c2NhbGUoMC45NSl9Omhvc3QoLmlvbi1mb2N1c2VkKSAuYnV0dG9uLW5hdGl2ZXtvcGFjaXR5OjAuN31AbWVkaWEgKGFueS1ob3ZlcjogaG92ZXIpezpob3N0KDpob3ZlcikgLmJ1dHRvbi1uYXRpdmV7b3BhY2l0eTowLjV9Omhvc3QoLnNlZ21lbnQtYnV0dG9uLWNoZWNrZWQ6aG92ZXIpIC5idXR0b24tbmF0aXZle29wYWNpdHk6MX19Omhvc3QoLmluLXNlZ21lbnQtY29sb3Ipe2JhY2tncm91bmQ6bm9uZTtjb2xvcjp2YXIoLS1pb24tdGV4dC1jb2xvciwgIzAwMCl9Omhvc3QoLmluLXNlZ21lbnQtY29sb3IpIC5zZWdtZW50LWJ1dHRvbi1pbmRpY2F0b3ItYmFja2dyb3VuZHtiYWNrZ3JvdW5kOnZhcigtLWlvbi1jb2xvci1zdGVwLTM1MCwgdmFyKC0taW9uLWJhY2tncm91bmQtY29sb3Itc3RlcC0zNTAsIHZhcigtLWlvbi1iYWNrZ3JvdW5kLWNvbG9yLCAjZmZmKSkpfUBtZWRpYSAoYW55LWhvdmVyOiBob3Zlcil7Omhvc3QoLmluLXNlZ21lbnQtY29sb3I6aG92ZXIpIC5idXR0b24tbmF0aXZlLDpob3N0KC5pbi1zZWdtZW50LWNvbG9yLnNlZ21lbnQtYnV0dG9uLWNoZWNrZWQ6aG92ZXIpIC5idXR0b24tbmF0aXZle2NvbG9yOnZhcigtLWlvbi10ZXh0LWNvbG9yLCAjMDAwKX19Omhvc3QoLmluLXRvb2xiYXI6bm90KC5pbi1zZWdtZW50LWNvbG9yKSl7LS1iYWNrZ3JvdW5kLWNoZWNrZWQ6dmFyKC0taW9uLXRvb2xiYXItc2VnbWVudC1iYWNrZ3JvdW5kLWNoZWNrZWQsIG5vbmUpOy0tY29sb3I6dmFyKC0taW9uLXRvb2xiYXItc2VnbWVudC1jb2xvciwgdmFyKC0taW9uLXRvb2xiYXItY29sb3IpLCBpbml0aWFsKTstLWNvbG9yLWNoZWNrZWQ6dmFyKC0taW9uLXRvb2xiYXItc2VnbWVudC1jb2xvci1jaGVja2VkLCB2YXIoLS1pb24tdG9vbGJhci1jb2xvciksIGluaXRpYWwpOy0taW5kaWNhdG9yLWNvbG9yOnZhcigtLWlvbi10b29sYmFyLXNlZ21lbnQtaW5kaWNhdG9yLWNvbG9yLCB2YXIoLS1pb24tY29sb3Itc3RlcC0zNTAsIHZhcigtLWlvbi1iYWNrZ3JvdW5kLWNvbG9yLXN0ZXAtMzUwLCB2YXIoLS1pb24tYmFja2dyb3VuZC1jb2xvciwgI2ZmZikpKSl9Omhvc3QoLmluLXRvb2xiYXItY29sb3IpIC5zZWdtZW50LWJ1dHRvbi1pbmRpY2F0b3ItYmFja2dyb3VuZHtiYWNrZ3JvdW5kOnZhcigtLWlvbi1jb2xvci1jb250cmFzdCl9Omhvc3QoLmluLXRvb2xiYXItY29sb3I6bm90KC5pbi1zZWdtZW50LWNvbG9yKSkgLmJ1dHRvbi1uYXRpdmV7Y29sb3I6dmFyKC0taW9uLWNvbG9yLWNvbnRyYXN0KX06aG9zdCguaW4tdG9vbGJhci1jb2xvci5zZWdtZW50LWJ1dHRvbi1jaGVja2VkOm5vdCguaW4tc2VnbWVudC1jb2xvcikpIC5idXR0b24tbmF0aXZle2NvbG9yOnZhcigtLWlvbi1jb2xvci1iYXNlKX1AbWVkaWEgKGFueS1ob3ZlcjogaG92ZXIpezpob3N0KC5pbi10b29sYmFyLWNvbG9yOm5vdCguaW4tc2VnbWVudC1jb2xvcik6aG92ZXIpIC5idXR0b24tbmF0aXZle2NvbG9yOnZhcigtLWlvbi1jb2xvci1jb250cmFzdCl9Omhvc3QoLmluLXRvb2xiYXItY29sb3Iuc2VnbWVudC1idXR0b24tY2hlY2tlZDpub3QoLmluLXNlZ21lbnQtY29sb3IpOmhvdmVyKSAuYnV0dG9uLW5hdGl2ZXtjb2xvcjp2YXIoLS1pb24tY29sb3ItYmFzZSl9fVwiO1xuXG5jb25zdCBzZWdtZW50QnV0dG9uTWRDc3MgPSBcIjpob3N0ey0tY29sb3I6aW5pdGlhbDstLWNvbG9yLWhvdmVyOnZhcigtLWNvbG9yKTstLWNvbG9yLWNoZWNrZWQ6dmFyKC0tY29sb3IpOy0tY29sb3ItZGlzYWJsZWQ6dmFyKC0tY29sb3IpOy0tcGFkZGluZy1zdGFydDowOy0tcGFkZGluZy1lbmQ6MDstLXBhZGRpbmctdG9wOjA7LS1wYWRkaW5nLWJvdHRvbTowO2JvcmRlci1yYWRpdXM6dmFyKC0tYm9yZGVyLXJhZGl1cyk7ZGlzcGxheTotbXMtZmxleGJveDtkaXNwbGF5OmZsZXg7cG9zaXRpb246cmVsYXRpdmU7LW1zLWZsZXgtZGlyZWN0aW9uOmNvbHVtbjtmbGV4LWRpcmVjdGlvbjpjb2x1bW47aGVpZ2h0OmF1dG87YmFja2dyb3VuZDp2YXIoLS1iYWNrZ3JvdW5kKTtjb2xvcjp2YXIoLS1jb2xvcik7dGV4dC1kZWNvcmF0aW9uOm5vbmU7dGV4dC1vdmVyZmxvdzplbGxpcHNpczt3aGl0ZS1zcGFjZTpub3dyYXA7Y3Vyc29yOnBvaW50ZXI7Z3JpZC1yb3c6MTstd2Via2l0LWZvbnQta2VybmluZzpub25lO2ZvbnQta2VybmluZzpub25lfS5idXR0b24tbmF0aXZle2JvcmRlci1yYWRpdXM6MDtmb250LWZhbWlseTppbmhlcml0O2ZvbnQtc2l6ZTppbmhlcml0O2ZvbnQtc3R5bGU6aW5oZXJpdDtmb250LXdlaWdodDppbmhlcml0O2xldHRlci1zcGFjaW5nOmluaGVyaXQ7dGV4dC1kZWNvcmF0aW9uOmluaGVyaXQ7dGV4dC1pbmRlbnQ6aW5oZXJpdDt0ZXh0LW92ZXJmbG93OmluaGVyaXQ7dGV4dC10cmFuc2Zvcm06aW5oZXJpdDt0ZXh0LWFsaWduOmluaGVyaXQ7d2hpdGUtc3BhY2U6aW5oZXJpdDtjb2xvcjppbmhlcml0Oy13ZWJraXQtbWFyZ2luLXN0YXJ0OnZhcigtLW1hcmdpbi1zdGFydCk7bWFyZ2luLWlubGluZS1zdGFydDp2YXIoLS1tYXJnaW4tc3RhcnQpOy13ZWJraXQtbWFyZ2luLWVuZDp2YXIoLS1tYXJnaW4tZW5kKTttYXJnaW4taW5saW5lLWVuZDp2YXIoLS1tYXJnaW4tZW5kKTttYXJnaW4tdG9wOnZhcigtLW1hcmdpbi10b3ApO21hcmdpbi1ib3R0b206dmFyKC0tbWFyZ2luLWJvdHRvbSk7LXdlYmtpdC1wYWRkaW5nLXN0YXJ0OnZhcigtLXBhZGRpbmctc3RhcnQpO3BhZGRpbmctaW5saW5lLXN0YXJ0OnZhcigtLXBhZGRpbmctc3RhcnQpOy13ZWJraXQtcGFkZGluZy1lbmQ6dmFyKC0tcGFkZGluZy1lbmQpO3BhZGRpbmctaW5saW5lLWVuZDp2YXIoLS1wYWRkaW5nLWVuZCk7cGFkZGluZy10b3A6dmFyKC0tcGFkZGluZy10b3ApO3BhZGRpbmctYm90dG9tOnZhcigtLXBhZGRpbmctYm90dG9tKTstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGUzZCgwLCAgMCwgIDApO3RyYW5zZm9ybTp0cmFuc2xhdGUzZCgwLCAgMCwgIDApO2Rpc3BsYXk6LW1zLWZsZXhib3g7ZGlzcGxheTpmbGV4O3Bvc2l0aW9uOnJlbGF0aXZlOy1tcy1mbGV4LWRpcmVjdGlvbjppbmhlcml0O2ZsZXgtZGlyZWN0aW9uOmluaGVyaXQ7LW1zLWZsZXgtcG9zaXRpdmU6MTtmbGV4LWdyb3c6MTstbXMtZmxleC1hbGlnbjpjZW50ZXI7YWxpZ24taXRlbXM6Y2VudGVyOy1tcy1mbGV4LXBhY2s6Y2VudGVyO2p1c3RpZnktY29udGVudDpjZW50ZXI7d2lkdGg6MTAwJTttaW4td2lkdGg6aW5oZXJpdDttYXgtd2lkdGg6aW5oZXJpdDtoZWlnaHQ6YXV0bzttaW4taGVpZ2h0OmluaGVyaXQ7bWF4LWhlaWdodDppbmhlcml0Oy13ZWJraXQtdHJhbnNpdGlvbjp2YXIoLS10cmFuc2l0aW9uKTt0cmFuc2l0aW9uOnZhcigtLXRyYW5zaXRpb24pO2JvcmRlcjpub25lO291dGxpbmU6bm9uZTtiYWNrZ3JvdW5kOnRyYW5zcGFyZW50O2NvbnRhaW46Y29udGVudDtwb2ludGVyLWV2ZW50czpub25lO292ZXJmbG93OmhpZGRlbjt6LWluZGV4OjJ9LmJ1dHRvbi1uYXRpdmU6OmFmdGVye2xlZnQ6MDtyaWdodDowO3RvcDowO2JvdHRvbTowO3Bvc2l0aW9uOmFic29sdXRlO2NvbnRlbnQ6XFxcIlxcXCI7b3BhY2l0eTowfS5idXR0b24taW5uZXJ7ZGlzcGxheTotbXMtZmxleGJveDtkaXNwbGF5OmZsZXg7cG9zaXRpb246cmVsYXRpdmU7LW1zLWZsZXgtZmxvdzppbmhlcml0O2ZsZXgtZmxvdzppbmhlcml0Oy1tcy1mbGV4LWFsaWduOmNlbnRlcjthbGlnbi1pdGVtczpjZW50ZXI7LW1zLWZsZXgtcGFjazpjZW50ZXI7anVzdGlmeS1jb250ZW50OmNlbnRlcjt3aWR0aDoxMDAlO2hlaWdodDoxMDAlO3otaW5kZXg6MX06aG9zdCguc2VnbWVudC1idXR0b24tY2hlY2tlZCl7YmFja2dyb3VuZDp2YXIoLS1iYWNrZ3JvdW5kLWNoZWNrZWQpO2NvbG9yOnZhcigtLWNvbG9yLWNoZWNrZWQpfTpob3N0KC5zZWdtZW50LWJ1dHRvbi1kaXNhYmxlZCl7Y3Vyc29yOmRlZmF1bHQ7cG9pbnRlci1ldmVudHM6bm9uZX06aG9zdCguaW9uLWZvY3VzZWQpIC5idXR0b24tbmF0aXZle2NvbG9yOnZhcigtLWNvbG9yLWZvY3VzZWQpfTpob3N0KC5pb24tZm9jdXNlZCkgLmJ1dHRvbi1uYXRpdmU6OmFmdGVye2JhY2tncm91bmQ6dmFyKC0tYmFja2dyb3VuZC1mb2N1c2VkKTtvcGFjaXR5OnZhcigtLWJhY2tncm91bmQtZm9jdXNlZC1vcGFjaXR5KX06aG9zdCg6Zm9jdXMpe291dGxpbmU6bm9uZX1AbWVkaWEgKGFueS1ob3ZlcjogaG92ZXIpezpob3N0KDpob3ZlcikgLmJ1dHRvbi1uYXRpdmV7Y29sb3I6dmFyKC0tY29sb3ItaG92ZXIpfTpob3N0KDpob3ZlcikgLmJ1dHRvbi1uYXRpdmU6OmFmdGVye2JhY2tncm91bmQ6dmFyKC0tYmFja2dyb3VuZC1ob3Zlcik7b3BhY2l0eTp2YXIoLS1iYWNrZ3JvdW5kLWhvdmVyLW9wYWNpdHkpfTpob3N0KC5zZWdtZW50LWJ1dHRvbi1jaGVja2VkOmhvdmVyKSAuYnV0dG9uLW5hdGl2ZXtjb2xvcjp2YXIoLS1jb2xvci1jaGVja2VkKX19OjpzbG90dGVkKGlvbi1pY29uKXstbXMtZmxleC1uZWdhdGl2ZTowO2ZsZXgtc2hyaW5rOjA7LW1zLWZsZXgtb3JkZXI6LTE7b3JkZXI6LTE7cG9pbnRlci1ldmVudHM6bm9uZX06OnNsb3R0ZWQoaW9uLWxhYmVsKXtkaXNwbGF5OmJsb2NrOy1tcy1mbGV4LWl0ZW0tYWxpZ246Y2VudGVyO2FsaWduLXNlbGY6Y2VudGVyO21heC13aWR0aDoxMDAlO2xpbmUtaGVpZ2h0OjIycHg7dGV4dC1vdmVyZmxvdzplbGxpcHNpczt3aGl0ZS1zcGFjZTpub3dyYXA7b3ZlcmZsb3c6aGlkZGVuOy13ZWJraXQtYm94LXNpemluZzpib3JkZXItYm94O2JveC1zaXppbmc6Ym9yZGVyLWJveDtwb2ludGVyLWV2ZW50czpub25lfTpob3N0KC5zZWdtZW50LWJ1dHRvbi1sYXlvdXQtaWNvbi10b3ApIC5idXR0b24tbmF0aXZley1tcy1mbGV4LWRpcmVjdGlvbjpjb2x1bW47ZmxleC1kaXJlY3Rpb246Y29sdW1ufTpob3N0KC5zZWdtZW50LWJ1dHRvbi1sYXlvdXQtaWNvbi1zdGFydCkgLmJ1dHRvbi1uYXRpdmV7LW1zLWZsZXgtZGlyZWN0aW9uOnJvdztmbGV4LWRpcmVjdGlvbjpyb3d9Omhvc3QoLnNlZ21lbnQtYnV0dG9uLWxheW91dC1pY29uLWVuZCkgLmJ1dHRvbi1uYXRpdmV7LW1zLWZsZXgtZGlyZWN0aW9uOnJvdy1yZXZlcnNlO2ZsZXgtZGlyZWN0aW9uOnJvdy1yZXZlcnNlfTpob3N0KC5zZWdtZW50LWJ1dHRvbi1sYXlvdXQtaWNvbi1ib3R0b20pIC5idXR0b24tbmF0aXZley1tcy1mbGV4LWRpcmVjdGlvbjpjb2x1bW4tcmV2ZXJzZTtmbGV4LWRpcmVjdGlvbjpjb2x1bW4tcmV2ZXJzZX06aG9zdCguc2VnbWVudC1idXR0b24tbGF5b3V0LWljb24taGlkZSkgOjpzbG90dGVkKGlvbi1pY29uKXtkaXNwbGF5Om5vbmV9Omhvc3QoLnNlZ21lbnQtYnV0dG9uLWxheW91dC1sYWJlbC1oaWRlKSA6OnNsb3R0ZWQoaW9uLWxhYmVsKXtkaXNwbGF5Om5vbmV9aW9uLXJpcHBsZS1lZmZlY3R7Y29sb3I6dmFyKC0tcmlwcGxlLWNvbG9yLCB2YXIoLS1jb2xvci1jaGVja2VkKSl9LnNlZ21lbnQtYnV0dG9uLWluZGljYXRvcnstd2Via2l0LXRyYW5zZm9ybS1vcmlnaW46bGVmdDt0cmFuc2Zvcm0tb3JpZ2luOmxlZnQ7cG9zaXRpb246YWJzb2x1dGU7b3BhY2l0eTowOy13ZWJraXQtYm94LXNpemluZzpib3JkZXItYm94O2JveC1zaXppbmc6Ym9yZGVyLWJveDt3aWxsLWNoYW5nZTp0cmFuc2Zvcm0sIG9wYWNpdHk7cG9pbnRlci1ldmVudHM6bm9uZX0uc2VnbWVudC1idXR0b24taW5kaWNhdG9yLWJhY2tncm91bmR7d2lkdGg6MTAwJTtoZWlnaHQ6dmFyKC0taW5kaWNhdG9yLWhlaWdodCk7LXdlYmtpdC10cmFuc2Zvcm06dmFyKC0taW5kaWNhdG9yLXRyYW5zZm9ybSk7dHJhbnNmb3JtOnZhcigtLWluZGljYXRvci10cmFuc2Zvcm0pOy13ZWJraXQtYm94LXNoYWRvdzp2YXIoLS1pbmRpY2F0b3ItYm94LXNoYWRvdyk7Ym94LXNoYWRvdzp2YXIoLS1pbmRpY2F0b3ItYm94LXNoYWRvdyk7cG9pbnRlci1ldmVudHM6bm9uZX0uc2VnbWVudC1idXR0b24taW5kaWNhdG9yLWFuaW1hdGVkey13ZWJraXQtdHJhbnNpdGlvbjp2YXIoLS1pbmRpY2F0b3ItdHJhbnNpdGlvbik7dHJhbnNpdGlvbjp2YXIoLS1pbmRpY2F0b3ItdHJhbnNpdGlvbil9Omhvc3QoLnNlZ21lbnQtYnV0dG9uLWNoZWNrZWQpIC5zZWdtZW50LWJ1dHRvbi1pbmRpY2F0b3J7b3BhY2l0eToxfUBtZWRpYSAocHJlZmVycy1yZWR1Y2VkLW1vdGlvbjogcmVkdWNlKXsuc2VnbWVudC1idXR0b24taW5kaWNhdG9yLWJhY2tncm91bmR7LXdlYmtpdC10cmFuc2Zvcm06bm9uZTt0cmFuc2Zvcm06bm9uZX0uc2VnbWVudC1idXR0b24taW5kaWNhdG9yLWFuaW1hdGVkey13ZWJraXQtdHJhbnNpdGlvbjpub25lO3RyYW5zaXRpb246bm9uZX19Omhvc3R7LS1iYWNrZ3JvdW5kOm5vbmU7LS1iYWNrZ3JvdW5kLWNoZWNrZWQ6bm9uZTstLWJhY2tncm91bmQtaG92ZXI6dmFyKC0tY29sb3ItY2hlY2tlZCk7LS1iYWNrZ3JvdW5kLWZvY3VzZWQ6dmFyKC0tY29sb3ItY2hlY2tlZCk7LS1iYWNrZ3JvdW5kLWFjdGl2YXRlZC1vcGFjaXR5OjA7LS1iYWNrZ3JvdW5kLWZvY3VzZWQtb3BhY2l0eTouMTI7LS1iYWNrZ3JvdW5kLWhvdmVyLW9wYWNpdHk6LjA0Oy0tY29sb3I6cmdiYSh2YXIoLS1pb24tdGV4dC1jb2xvci1yZ2IsIDAsIDAsIDApLCAwLjYpOy0tY29sb3ItY2hlY2tlZDp2YXIoLS1pb24tY29sb3ItcHJpbWFyeSwgIzAwNTRlOSk7LS1pbmRpY2F0b3ItYm94LXNoYWRvdzpub25lOy0taW5kaWNhdG9yLWNvbG9yOnZhcigtLWNvbG9yLWNoZWNrZWQpOy0taW5kaWNhdG9yLWhlaWdodDoycHg7LS1pbmRpY2F0b3ItdHJhbnNpdGlvbjp0cmFuc2Zvcm0gMjUwbXMgY3ViaWMtYmV6aWVyKDAuNCwgMCwgMC4yLCAxKTstLWluZGljYXRvci10cmFuc2Zvcm06bm9uZTstLXBhZGRpbmctdG9wOjA7LS1wYWRkaW5nLWVuZDoxNnB4Oy0tcGFkZGluZy1ib3R0b206MDstLXBhZGRpbmctc3RhcnQ6MTZweDstLXRyYW5zaXRpb246Y29sb3IgMC4xNXMgbGluZWFyIDBzLCBvcGFjaXR5IDAuMTVzIGxpbmVhciAwczttaW4td2lkdGg6OTBweDttaW4taGVpZ2h0OjQ4cHg7Ym9yZGVyLXdpZHRoOnZhcigtLWJvcmRlci13aWR0aCk7Ym9yZGVyLXN0eWxlOnZhcigtLWJvcmRlci1zdHlsZSk7Ym9yZGVyLWNvbG9yOnZhcigtLWJvcmRlci1jb2xvcik7Zm9udC1zaXplOjE0cHg7Zm9udC13ZWlnaHQ6NTAwO2xldHRlci1zcGFjaW5nOjAuMDZlbTtsaW5lLWhlaWdodDo0MHB4O3RleHQtdHJhbnNmb3JtOnVwcGVyY2FzZX06aG9zdCguc2VnbWVudC1idXR0b24tZGlzYWJsZWQpe29wYWNpdHk6MC4zfTpob3N0KC5pbi1zZWdtZW50LWNvbG9yKXtiYWNrZ3JvdW5kOm5vbmU7Y29sb3I6cmdiYSh2YXIoLS1pb24tdGV4dC1jb2xvci1yZ2IsIDAsIDAsIDApLCAwLjYpfTpob3N0KC5pbi1zZWdtZW50LWNvbG9yKSBpb24tcmlwcGxlLWVmZmVjdHtjb2xvcjp2YXIoLS1pb24tY29sb3ItYmFzZSl9Omhvc3QoLmluLXNlZ21lbnQtY29sb3IpIC5zZWdtZW50LWJ1dHRvbi1pbmRpY2F0b3ItYmFja2dyb3VuZHtiYWNrZ3JvdW5kOnZhcigtLWlvbi1jb2xvci1iYXNlKX06aG9zdCguaW4tc2VnbWVudC1jb2xvci5zZWdtZW50LWJ1dHRvbi1jaGVja2VkKSAuYnV0dG9uLW5hdGl2ZXtjb2xvcjp2YXIoLS1pb24tY29sb3ItYmFzZSl9Omhvc3QoLmluLXNlZ21lbnQtY29sb3IuaW9uLWZvY3VzZWQpIC5idXR0b24tbmF0aXZlOjphZnRlcntiYWNrZ3JvdW5kOnZhcigtLWlvbi1jb2xvci1iYXNlKX1AbWVkaWEgKGFueS1ob3ZlcjogaG92ZXIpezpob3N0KC5pbi1zZWdtZW50LWNvbG9yOmhvdmVyKSAuYnV0dG9uLW5hdGl2ZXtjb2xvcjpyZ2JhKHZhcigtLWlvbi10ZXh0LWNvbG9yLXJnYiwgMCwgMCwgMCksIDAuNil9Omhvc3QoLmluLXNlZ21lbnQtY29sb3I6aG92ZXIpIC5idXR0b24tbmF0aXZlOjphZnRlcntiYWNrZ3JvdW5kOnZhcigtLWlvbi1jb2xvci1iYXNlKX06aG9zdCguaW4tc2VnbWVudC1jb2xvci5zZWdtZW50LWJ1dHRvbi1jaGVja2VkOmhvdmVyKSAuYnV0dG9uLW5hdGl2ZXtjb2xvcjp2YXIoLS1pb24tY29sb3ItYmFzZSl9fTpob3N0KC5pbi10b29sYmFyOm5vdCguaW4tc2VnbWVudC1jb2xvcikpey0tYmFja2dyb3VuZDp2YXIoLS1pb24tdG9vbGJhci1zZWdtZW50LWJhY2tncm91bmQsIG5vbmUpOy0tYmFja2dyb3VuZC1jaGVja2VkOnZhcigtLWlvbi10b29sYmFyLXNlZ21lbnQtYmFja2dyb3VuZC1jaGVja2VkLCBub25lKTstLWNvbG9yOnZhcigtLWlvbi10b29sYmFyLXNlZ21lbnQtY29sb3IsIHJnYmEodmFyKC0taW9uLXRleHQtY29sb3ItcmdiLCAwLCAwLCAwKSwgMC42KSk7LS1jb2xvci1jaGVja2VkOnZhcigtLWlvbi10b29sYmFyLXNlZ21lbnQtY29sb3ItY2hlY2tlZCwgdmFyKC0taW9uLWNvbG9yLXByaW1hcnksICMwMDU0ZTkpKTstLWluZGljYXRvci1jb2xvcjp2YXIoLS1pb24tdG9vbGJhci1zZWdtZW50LWNvbG9yLWNoZWNrZWQsIHZhcigtLWNvbG9yLWNoZWNrZWQpKX06aG9zdCguaW4tdG9vbGJhci1jb2xvcjpub3QoLmluLXNlZ21lbnQtY29sb3IpKSAuYnV0dG9uLW5hdGl2ZXtjb2xvcjpyZ2JhKHZhcigtLWlvbi1jb2xvci1jb250cmFzdC1yZ2IpLCAwLjYpfTpob3N0KC5pbi10b29sYmFyLWNvbG9yLnNlZ21lbnQtYnV0dG9uLWNoZWNrZWQ6bm90KC5pbi1zZWdtZW50LWNvbG9yKSkgLmJ1dHRvbi1uYXRpdmV7Y29sb3I6dmFyKC0taW9uLWNvbG9yLWNvbnRyYXN0KX1AbWVkaWEgKGFueS1ob3ZlcjogaG92ZXIpezpob3N0KC5pbi10b29sYmFyLWNvbG9yOm5vdCguaW4tc2VnbWVudC1jb2xvcikpIC5idXR0b24tbmF0aXZlOjphZnRlcntiYWNrZ3JvdW5kOnZhcigtLWlvbi1jb2xvci1jb250cmFzdCl9fTo6c2xvdHRlZChpb24taWNvbil7bWFyZ2luLXRvcDoxMnB4O21hcmdpbi1ib3R0b206MTJweDtmb250LXNpemU6MjRweH06OnNsb3R0ZWQoaW9uLWxhYmVsKXttYXJnaW4tdG9wOjEycHg7bWFyZ2luLWJvdHRvbToxMnB4fTpob3N0KC5zZWdtZW50LWJ1dHRvbi1sYXlvdXQtaWNvbi10b3ApIDo6c2xvdHRlZChpb24tbGFiZWwpLDpob3N0KC5zZWdtZW50LWJ1dHRvbi1sYXlvdXQtaWNvbi1ib3R0b20pIDo6c2xvdHRlZChpb24taWNvbil7bWFyZ2luLXRvcDowfTpob3N0KC5zZWdtZW50LWJ1dHRvbi1sYXlvdXQtaWNvbi10b3ApIDo6c2xvdHRlZChpb24taWNvbiksOmhvc3QoLnNlZ21lbnQtYnV0dG9uLWxheW91dC1pY29uLWJvdHRvbSkgOjpzbG90dGVkKGlvbi1sYWJlbCl7bWFyZ2luLWJvdHRvbTowfTpob3N0KC5zZWdtZW50LWJ1dHRvbi1sYXlvdXQtaWNvbi1zdGFydCkgOjpzbG90dGVkKGlvbi1sYWJlbCl7LXdlYmtpdC1tYXJnaW4tc3RhcnQ6OHB4O21hcmdpbi1pbmxpbmUtc3RhcnQ6OHB4Oy13ZWJraXQtbWFyZ2luLWVuZDowO21hcmdpbi1pbmxpbmUtZW5kOjB9Omhvc3QoLnNlZ21lbnQtYnV0dG9uLWxheW91dC1pY29uLWVuZCkgOjpzbG90dGVkKGlvbi1sYWJlbCl7LXdlYmtpdC1tYXJnaW4tc3RhcnQ6MDttYXJnaW4taW5saW5lLXN0YXJ0OjA7LXdlYmtpdC1tYXJnaW4tZW5kOjhweDttYXJnaW4taW5saW5lLWVuZDo4cHh9Omhvc3QoLnNlZ21lbnQtYnV0dG9uLWhhcy1pY29uLW9ubHkpIDo6c2xvdHRlZChpb24taWNvbil7bWFyZ2luLXRvcDoxMnB4O21hcmdpbi1ib3R0b206MTJweH06aG9zdCguc2VnbWVudC1idXR0b24taGFzLWxhYmVsLW9ubHkpIDo6c2xvdHRlZChpb24tbGFiZWwpe21hcmdpbi10b3A6MTJweDttYXJnaW4tYm90dG9tOjEycHh9LnNlZ21lbnQtYnV0dG9uLWluZGljYXRvcntsZWZ0OjA7cmlnaHQ6MDtib3R0b206MH0uc2VnbWVudC1idXR0b24taW5kaWNhdG9yLWJhY2tncm91bmR7YmFja2dyb3VuZDp2YXIoLS1pbmRpY2F0b3ItY29sb3IpfTpob3N0KC5pbi10b29sYmFyOm5vdCguaW4tc2VnbWVudC1jb2xvcikpIC5zZWdtZW50LWJ1dHRvbi1pbmRpY2F0b3ItYmFja2dyb3VuZHtiYWNrZ3JvdW5kOnZhcigtLWlvbi10b29sYmFyLXNlZ21lbnQtaW5kaWNhdG9yLWNvbG9yLCB2YXIoLS1pbmRpY2F0b3ItY29sb3IpKX06aG9zdCguaW4tdG9vbGJhci1jb2xvcjpub3QoLmluLXNlZ21lbnQtY29sb3IpKSAuc2VnbWVudC1idXR0b24taW5kaWNhdG9yLWJhY2tncm91bmR7YmFja2dyb3VuZDp2YXIoLS1pb24tY29sb3ItY29udHJhc3QpfVwiO1xuXG5sZXQgaWRzID0gMDtcbmNvbnN0IFNlZ21lbnRCdXR0b24gPSBjbGFzcyB7XG4gICAgY29uc3RydWN0b3IoaG9zdFJlZikge1xuICAgICAgICByZWdpc3Rlckluc3RhbmNlKHRoaXMsIGhvc3RSZWYpO1xuICAgICAgICB0aGlzLnNlZ21lbnRFbCA9IG51bGw7XG4gICAgICAgIHRoaXMuaW5oZXJpdGVkQXR0cmlidXRlcyA9IHt9O1xuICAgICAgICB0aGlzLmNoZWNrZWQgPSBmYWxzZTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIElmIGB0cnVlYCwgdGhlIHVzZXIgY2Fubm90IGludGVyYWN0IHdpdGggdGhlIHNlZ21lbnQgYnV0dG9uLlxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5kaXNhYmxlZCA9IGZhbHNlO1xuICAgICAgICAvKipcbiAgICAgICAgICogU2V0IHRoZSBsYXlvdXQgb2YgdGhlIHRleHQgYW5kIGljb24gaW4gdGhlIHNlZ21lbnQuXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLmxheW91dCA9ICdpY29uLXRvcCc7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBUaGUgdHlwZSBvZiB0aGUgYnV0dG9uLlxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy50eXBlID0gJ2J1dHRvbic7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBUaGUgdmFsdWUgb2YgdGhlIHNlZ21lbnQgYnV0dG9uLlxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy52YWx1ZSA9ICdpb24tc2ItJyArIGlkcysrO1xuICAgICAgICB0aGlzLnVwZGF0ZVN0eWxlID0gKCkgPT4ge1xuICAgICAgICAgICAgZm9yY2VVcGRhdGUodGhpcyk7XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMudXBkYXRlU3RhdGUgPSAoKSA9PiB7XG4gICAgICAgICAgICBjb25zdCB7IHNlZ21lbnRFbCB9ID0gdGhpcztcbiAgICAgICAgICAgIGlmIChzZWdtZW50RWwpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmNoZWNrZWQgPSBzZWdtZW50RWwudmFsdWUgPT09IHRoaXMudmFsdWU7XG4gICAgICAgICAgICAgICAgaWYgKHNlZ21lbnRFbC5kaXNhYmxlZCkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmRpc2FibGVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgfVxuICAgIHZhbHVlQ2hhbmdlZCgpIHtcbiAgICAgICAgdGhpcy51cGRhdGVTdGF0ZSgpO1xuICAgIH1cbiAgICBjb25uZWN0ZWRDYWxsYmFjaygpIHtcbiAgICAgICAgY29uc3Qgc2VnbWVudEVsID0gKHRoaXMuc2VnbWVudEVsID0gdGhpcy5lbC5jbG9zZXN0KCdpb24tc2VnbWVudCcpKTtcbiAgICAgICAgaWYgKHNlZ21lbnRFbCkge1xuICAgICAgICAgICAgdGhpcy51cGRhdGVTdGF0ZSgpO1xuICAgICAgICAgICAgYWRkRXZlbnRMaXN0ZW5lcihzZWdtZW50RWwsICdpb25TZWxlY3QnLCB0aGlzLnVwZGF0ZVN0YXRlKTtcbiAgICAgICAgICAgIGFkZEV2ZW50TGlzdGVuZXIoc2VnbWVudEVsLCAnaW9uU3R5bGUnLCB0aGlzLnVwZGF0ZVN0eWxlKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBQcmV2ZW50IGJ1dHRvbnMgZnJvbSBiZWluZyBkaXNhYmxlZCB3aGVuIGFzc29jaWF0ZWQgd2l0aCBzZWdtZW50IGNvbnRlbnRcbiAgICAgICAgaWYgKHRoaXMuY29udGVudElkICYmIHRoaXMuZGlzYWJsZWQpIHtcbiAgICAgICAgICAgIHByaW50SW9uV2FybmluZyhgW2lvbi1zZWdtZW50LWJ1dHRvbl0gLSBTZWdtZW50IGJ1dHRvbnMgY2Fubm90IGJlIGRpc2FibGVkIHdoZW4gYXNzb2NpYXRlZCB3aXRoIGFuIDxpb24tc2VnbWVudC1jb250ZW50Pi5gKTtcbiAgICAgICAgICAgIHRoaXMuZGlzYWJsZWQgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBkaXNjb25uZWN0ZWRDYWxsYmFjaygpIHtcbiAgICAgICAgY29uc3Qgc2VnbWVudEVsID0gdGhpcy5zZWdtZW50RWw7XG4gICAgICAgIGlmIChzZWdtZW50RWwpIHtcbiAgICAgICAgICAgIHJlbW92ZUV2ZW50TGlzdGVuZXIoc2VnbWVudEVsLCAnaW9uU2VsZWN0JywgdGhpcy51cGRhdGVTdGF0ZSk7XG4gICAgICAgICAgICByZW1vdmVFdmVudExpc3RlbmVyKHNlZ21lbnRFbCwgJ2lvblN0eWxlJywgdGhpcy51cGRhdGVTdHlsZSk7XG4gICAgICAgICAgICB0aGlzLnNlZ21lbnRFbCA9IG51bGw7XG4gICAgICAgIH1cbiAgICB9XG4gICAgY29tcG9uZW50V2lsbExvYWQoKSB7XG4gICAgICAgIHRoaXMuaW5oZXJpdGVkQXR0cmlidXRlcyA9IE9iamVjdC5hc3NpZ24oe30sIGluaGVyaXRBdHRyaWJ1dGVzKHRoaXMuZWwsIFsnYXJpYS1sYWJlbCddKSk7XG4gICAgICAgIC8vIFJldHVybiBpZiB0aGVyZSBpcyBubyBjb250ZW50SWQgZGVmaW5lZFxuICAgICAgICBpZiAoIXRoaXMuY29udGVudElkKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAvLyBBdHRlbXB0IHRvIGZpbmQgdGhlIFNlZ21lbnQgQ29udGVudCBieSBpdHMgY29udGVudElkXG4gICAgICAgIGNvbnN0IHNlZ21lbnRDb250ZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQodGhpcy5jb250ZW50SWQpO1xuICAgICAgICAvLyBJZiBubyBhc3NvY2lhdGVkIFNlZ21lbnQgQ29udGVudCBleGlzdHMsIGxvZyBhbiBlcnJvciBhbmQgcmV0dXJuXG4gICAgICAgIGlmICghc2VnbWVudENvbnRlbnQpIHtcbiAgICAgICAgICAgIHByaW50SW9uRXJyb3IoYFtpb24tc2VnbWVudC1idXR0b25dIC0gVW5hYmxlIHRvIGZpbmQgU2VnbWVudCBDb250ZW50IHdpdGggaWQ9XCIke3RoaXMuY29udGVudElkfVwiLmApO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIC8vIEVuc3VyZSB0aGUgZm91bmQgZWxlbWVudCBpcyBhIHZhbGlkIElPTi1TRUdNRU5ULUNPTlRFTlRcbiAgICAgICAgaWYgKHNlZ21lbnRDb250ZW50LnRhZ05hbWUgIT09ICdJT04tU0VHTUVOVC1DT05URU5UJykge1xuICAgICAgICAgICAgcHJpbnRJb25FcnJvcihgW2lvbi1zZWdtZW50LWJ1dHRvbl0gLSBFbGVtZW50IHdpdGggaWQ9XCIke3RoaXMuY29udGVudElkfVwiIGlzIG5vdCBhbiA8aW9uLXNlZ21lbnQtY29udGVudD4gZWxlbWVudC5gKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgIH1cbiAgICBnZXQgaGFzTGFiZWwoKSB7XG4gICAgICAgIHJldHVybiAhIXRoaXMuZWwucXVlcnlTZWxlY3RvcignaW9uLWxhYmVsJyk7XG4gICAgfVxuICAgIGdldCBoYXNJY29uKCkge1xuICAgICAgICByZXR1cm4gISF0aGlzLmVsLnF1ZXJ5U2VsZWN0b3IoJ2lvbi1pY29uJyk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEBpbnRlcm5hbFxuICAgICAqIEZvY3VzZXMgdGhlIG5hdGl2ZSA8YnV0dG9uPiBlbGVtZW50XG4gICAgICogaW5zaWRlIG9mIGlvbi1zZWdtZW50LWJ1dHRvbi5cbiAgICAgKi9cbiAgICBhc3luYyBzZXRGb2N1cygpIHtcbiAgICAgICAgY29uc3QgeyBuYXRpdmVFbCB9ID0gdGhpcztcbiAgICAgICAgaWYgKG5hdGl2ZUVsICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIG5hdGl2ZUVsLmZvY3VzKCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmVuZGVyKCkge1xuICAgICAgICBjb25zdCB7IGNoZWNrZWQsIHR5cGUsIGRpc2FibGVkLCBoYXNJY29uLCBoYXNMYWJlbCwgbGF5b3V0LCBzZWdtZW50RWwgfSA9IHRoaXM7XG4gICAgICAgIGNvbnN0IG1vZGUgPSBnZXRJb25Nb2RlKHRoaXMpO1xuICAgICAgICBjb25zdCBoYXNTZWdtZW50Q29sb3IgPSAoKSA9PiAoc2VnbWVudEVsID09PSBudWxsIHx8IHNlZ21lbnRFbCA9PT0gdm9pZCAwID8gdm9pZCAwIDogc2VnbWVudEVsLmNvbG9yKSAhPT0gdW5kZWZpbmVkO1xuICAgICAgICByZXR1cm4gKGgoSG9zdCwgeyBrZXk6ICcyNmNiN2VlOTA0NTViY2FhNjQxNjEyNTgwMmQ3ZTU3MjlmYTA1YjViJywgY2xhc3M6IHtcbiAgICAgICAgICAgICAgICBbbW9kZV06IHRydWUsXG4gICAgICAgICAgICAgICAgJ2luLXRvb2xiYXInOiBob3N0Q29udGV4dCgnaW9uLXRvb2xiYXInLCB0aGlzLmVsKSxcbiAgICAgICAgICAgICAgICAnaW4tdG9vbGJhci1jb2xvcic6IGhvc3RDb250ZXh0KCdpb24tdG9vbGJhcltjb2xvcl0nLCB0aGlzLmVsKSxcbiAgICAgICAgICAgICAgICAnaW4tc2VnbWVudCc6IGhvc3RDb250ZXh0KCdpb24tc2VnbWVudCcsIHRoaXMuZWwpLFxuICAgICAgICAgICAgICAgICdpbi1zZWdtZW50LWNvbG9yJzogaGFzU2VnbWVudENvbG9yKCksXG4gICAgICAgICAgICAgICAgJ3NlZ21lbnQtYnV0dG9uLWhhcy1sYWJlbCc6IGhhc0xhYmVsLFxuICAgICAgICAgICAgICAgICdzZWdtZW50LWJ1dHRvbi1oYXMtaWNvbic6IGhhc0ljb24sXG4gICAgICAgICAgICAgICAgJ3NlZ21lbnQtYnV0dG9uLWhhcy1sYWJlbC1vbmx5JzogaGFzTGFiZWwgJiYgIWhhc0ljb24sXG4gICAgICAgICAgICAgICAgJ3NlZ21lbnQtYnV0dG9uLWhhcy1pY29uLW9ubHknOiBoYXNJY29uICYmICFoYXNMYWJlbCxcbiAgICAgICAgICAgICAgICAnc2VnbWVudC1idXR0b24tZGlzYWJsZWQnOiBkaXNhYmxlZCxcbiAgICAgICAgICAgICAgICAnc2VnbWVudC1idXR0b24tY2hlY2tlZCc6IGNoZWNrZWQsXG4gICAgICAgICAgICAgICAgW2BzZWdtZW50LWJ1dHRvbi1sYXlvdXQtJHtsYXlvdXR9YF06IHRydWUsXG4gICAgICAgICAgICAgICAgJ2lvbi1hY3RpdmF0YWJsZSc6IHRydWUsXG4gICAgICAgICAgICAgICAgJ2lvbi1hY3RpdmF0YWJsZS1pbnN0YW50JzogdHJ1ZSxcbiAgICAgICAgICAgICAgICAnaW9uLWZvY3VzYWJsZSc6IHRydWUsXG4gICAgICAgICAgICB9IH0sIGgoXCJidXR0b25cIiwgT2JqZWN0LmFzc2lnbih7IGtleTogJzc1YWRkMzdmMTFjMTA3ZDFlMmNmZGIxNTRlMDgwMDRlOTU3OWU4NjMnLCBcImFyaWEtc2VsZWN0ZWRcIjogY2hlY2tlZCA/ICd0cnVlJyA6ICdmYWxzZScsIHJvbGU6IFwidGFiXCIsIHJlZjogKGVsKSA9PiAodGhpcy5uYXRpdmVFbCA9IGVsKSwgdHlwZTogdHlwZSwgY2xhc3M6IFwiYnV0dG9uLW5hdGl2ZVwiLCBwYXJ0OiBcIm5hdGl2ZVwiLCBkaXNhYmxlZDogZGlzYWJsZWQgfSwgdGhpcy5pbmhlcml0ZWRBdHRyaWJ1dGVzKSwgaChcInNwYW5cIiwgeyBrZXk6ICc4ZTcyMGQyYTNlMzA0OTAzNjg1YmYwOWQyMjZhNjRlOTQ0ZDc4YTIyJywgY2xhc3M6IFwiYnV0dG9uLWlubmVyXCIgfSwgaChcInNsb3RcIiwgeyBrZXk6ICdjOGU3YjNlYmY4ZjAzMDQyYTEwMDExNTU2NDNiNTg1MjgzYzczYzY1JyB9KSksIG1vZGUgPT09ICdtZCcgJiYgaChcImlvbi1yaXBwbGUtZWZmZWN0XCIsIHsga2V5OiAnMzU4NmFjMzE3YjhkODJjOTJiMGNjZmJmYWU0MmY4Nzc4NjEyMzIxYicgfSkpLCBoKFwiZGl2XCIsIHsga2V5OiAnOWNmOTM5NTdkYTllOGRjMzMzYzhiMDUzMjdiYjkwMzM4NWIxYzVmNCcsIHBhcnQ6IFwiaW5kaWNhdG9yXCIsIGNsYXNzOiBcInNlZ21lbnQtYnV0dG9uLWluZGljYXRvciBzZWdtZW50LWJ1dHRvbi1pbmRpY2F0b3ItYW5pbWF0ZWRcIiB9LCBoKFwiZGl2XCIsIHsga2V5OiAnZDNiNmYwYjM4NjBlYzY4OTZiNDY3MDNmNjRlZDFjYzhjNzU2MTJlMycsIHBhcnQ6IFwiaW5kaWNhdG9yLWJhY2tncm91bmRcIiwgY2xhc3M6IFwic2VnbWVudC1idXR0b24taW5kaWNhdG9yLWJhY2tncm91bmRcIiB9KSkpKTtcbiAgICB9XG4gICAgZ2V0IGVsKCkgeyByZXR1cm4gZ2V0RWxlbWVudCh0aGlzKTsgfVxuICAgIHN0YXRpYyBnZXQgd2F0Y2hlcnMoKSB7IHJldHVybiB7XG4gICAgICAgIFwidmFsdWVcIjogW1widmFsdWVDaGFuZ2VkXCJdXG4gICAgfTsgfVxufTtcblNlZ21lbnRCdXR0b24uc3R5bGUgPSB7XG4gICAgaW9zOiBzZWdtZW50QnV0dG9uSW9zQ3NzLFxuICAgIG1kOiBzZWdtZW50QnV0dG9uTWRDc3Ncbn07XG5cbmV4cG9ydCB7IFNlZ21lbnQgYXMgaW9uX3NlZ21lbnQsIFNlZ21lbnRCdXR0b24gYXMgaW9uX3NlZ21lbnRfYnV0dG9uIH07XG4iXSwibmFtZXMiOlsiciIsInJlZ2lzdGVySW5zdGFuY2UiLCJkIiwiY3JlYXRlRXZlbnQiLCJ3Iiwid3JpdGVUYXNrIiwiZSIsImdldElvbk1vZGUiLCJoIiwiaiIsIkhvc3QiLCJrIiwiZ2V0RWxlbWVudCIsIm4iLCJmb3JjZVVwZGF0ZSIsIm0iLCJwcmludElvbldhcm5pbmciLCJvIiwicHJpbnRJb25FcnJvciIsInJhZiIsImYiLCJhZGRFdmVudExpc3RlbmVyIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsImIiLCJpbmhlcml0QXR0cmlidXRlcyIsImkiLCJpc1JUTCIsImMiLCJjcmVhdGVDb2xvckNsYXNzZXMiLCJob3N0Q29udGV4dCIsInNlZ21lbnRJb3NDc3MiLCJzZWdtZW50TWRDc3MiLCJTZWdtZW50IiwiY29uc3RydWN0b3IiLCJob3N0UmVmIiwiaW9uQ2hhbmdlIiwiaW9uU2VsZWN0IiwiaW9uU3R5bGUiLCJzZWdtZW50Vmlld0VsIiwiYWN0aXZhdGVkIiwiZGlzYWJsZWQiLCJzY3JvbGxhYmxlIiwic3dpcGVHZXN0dXJlIiwic2VsZWN0T25Gb2N1cyIsIm9uQ2xpY2siLCJldiIsImN1cnJlbnQiLCJ0YXJnZXQiLCJwcmV2aW91cyIsImNoZWNrZWQiLCJ0YWdOYW1lIiwidmFsdWUiLCJlbWl0VmFsdWVDaGFuZ2UiLCJ1cGRhdGVTZWdtZW50VmlldyIsImNoZWNrQnV0dG9uIiwic2V0Q2hlY2tlZENsYXNzZXMiLCJvblNsb3R0ZWRJdGVtc0NoYW5nZSIsInZhbHVlQ2hhbmdlZCIsImdldFNlZ21lbnRCdXR0b24iLCJzZWxlY3RvciIsIl9hIiwiX2IiLCJidXR0b25zIiwiZ2V0QnV0dG9ucyIsImZpbHRlciIsImJ1dHRvbiIsImN1cnJJbmRleCIsImZpbmRJbmRleCIsImRvY3VtZW50IiwiYWN0aXZlRWxlbWVudCIsImxlbmd0aCIsImNvbG9yQ2hhbmdlZCIsIm9sZFZhbHVlIiwidW5kZWZpbmVkIiwiZW1pdFN0eWxlIiwic3dpcGVHZXN0dXJlQ2hhbmdlZCIsImdlc3R1cmVDaGFuZ2VkIiwiZmluZCIsInRyaWdnZXJTY3JvbGxPblZhbHVlQ2hhbmdlIiwiZW1pdCIsInNjcm9sbEFjdGl2ZUJ1dHRvbkludG9WaWV3IiwiZGlzYWJsZWRDaGFuZ2VkIiwiZ2VzdHVyZSIsImVuYWJsZSIsImNvbm5lY3RlZENhbGxiYWNrIiwiZ2V0U2VnbWVudFZpZXciLCJkaXNjb25uZWN0ZWRDYWxsYmFjayIsImNvbXBvbmVudFdpbGxMb2FkIiwiY29tcG9uZW50RGlkTG9hZCIsIl90aGlzIiwiX2FzeW5jVG9HZW5lcmF0b3IiLCJjcmVhdGVHZXN0dXJlIiwiZWwiLCJnZXN0dXJlTmFtZSIsImdlc3R1cmVQcmlvcml0eSIsInRocmVzaG9sZCIsInBhc3NpdmUiLCJvblN0YXJ0Iiwib25Nb3ZlIiwib25FbmQiLCJkZXRhaWwiLCJ2YWx1ZUJlZm9yZUdlc3R1cmUiLCJhY3RpdmF0ZSIsInNldE5leHRJbmRleCIsInNldEFjdGl2YXRlZCIsImV2ZW50Iiwic3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uIiwiQXJyYXkiLCJmcm9tIiwicXVlcnlTZWxlY3RvckFsbCIsImZvckVhY2giLCJjbGFzc0xpc3QiLCJ0b2dnbGUiLCJjbGlja2VkIiwiZ2V0SW5kaWNhdG9yIiwicm9vdCIsInNoYWRvd1Jvb3QiLCJxdWVyeVNlbGVjdG9yIiwicHJldmlvdXNJbmRpY2F0b3IiLCJjdXJyZW50SW5kaWNhdG9yIiwicHJldmlvdXNDbGllbnRSZWN0IiwiZ2V0Qm91bmRpbmdDbGllbnRSZWN0IiwiY3VycmVudENsaWVudFJlY3QiLCJ3aWR0aERlbHRhIiwid2lkdGgiLCJ4UG9zaXRpb24iLCJsZWZ0IiwidHJhbnNmb3JtIiwicmVtb3ZlIiwic3R5bGUiLCJzZXRQcm9wZXJ0eSIsImFkZCIsImluZGV4IiwibmV4dCIsImZpcnN0Q29udGVudElkIiwiY29udGVudElkIiwic2VnbWVudENvbnRlbnQiLCJjbG9zZXN0IiwiaGFuZGxlU2VnbWVudFZpZXdTY3JvbGwiLCJzY3JvbGxSYXRpbyIsImlzTWFudWFsU2Nyb2xsIiwiZGlzcGF0Y2hlZEZyb20iLCJzZWdtZW50RWwiLCJjb21wb3NlZFBhdGgiLCJpbmNsdWRlcyIsImNvbnRhaW5zIiwibmV4dEluZGV4IiwiTWF0aCIsInJvdW5kIiwibGFzdE5leHRJbmRleCIsInNtb290aFNjcm9sbCIsImJ0biIsInNlZ21lbnRWaWV3Iiwic2V0Q29udGVudCIsImFjdGl2ZUJ1dHRvbiIsInNjcm9sbENvbnRhaW5lckJveCIsImFjdGl2ZUJ1dHRvbkJveCIsImFjdGl2ZUJ1dHRvbkxlZnQiLCJ4IiwiY2VudGVyZWRYIiwibmV3U2Nyb2xsUG9zaXRpb24iLCJzY3JvbGxMZWZ0Iiwic2Nyb2xsVG8iLCJ0b3AiLCJiZWhhdmlvciIsImlzRW5kIiwicnRsIiwicmVjdCIsImN1cnJlbnRYIiwicHJldmlvdXNZIiwiaGVpZ2h0IiwiZ2V0Um9vdE5vZGUiLCJuZXh0RWwiLCJlbGVtZW50RnJvbVBvaW50IiwiZGVjcmVhc2VJbmRleCIsImluY3JlYXNlSW5kZXgiLCJuZXdJbmRleCIsInNlZ21lbnQiLCJvbktleURvd24iLCJrZXlEb3duU2VsZWN0c0J1dHRvbiIsImtleSIsInByZXZlbnREZWZhdWx0Iiwic2V0Rm9jdXMiLCJyZW5kZXIiLCJtb2RlIiwicm9sZSIsImNsYXNzIiwiY29sb3IiLCJvblNsb3RjaGFuZ2UiLCJ3YXRjaGVycyIsImlvcyIsIm1kIiwic2VnbWVudEJ1dHRvbklvc0NzcyIsInNlZ21lbnRCdXR0b25NZENzcyIsImlkcyIsIlNlZ21lbnRCdXR0b24iLCJpbmhlcml0ZWRBdHRyaWJ1dGVzIiwibGF5b3V0IiwidHlwZSIsInVwZGF0ZVN0eWxlIiwidXBkYXRlU3RhdGUiLCJPYmplY3QiLCJhc3NpZ24iLCJnZXRFbGVtZW50QnlJZCIsImhhc0xhYmVsIiwiaGFzSWNvbiIsIl90aGlzMiIsIm5hdGl2ZUVsIiwiZm9jdXMiLCJoYXNTZWdtZW50Q29sb3IiLCJyZWYiLCJwYXJ0IiwiaW9uX3NlZ21lbnQiLCJpb25fc2VnbWVudF9idXR0b24iXSwic291cmNlUm9vdCI6IndlYnBhY2s6Ly8vIiwieF9nb29nbGVfaWdub3JlTGlzdCI6WzBdfQ==