"use strict";
(self["webpackChunkapp"] = self["webpackChunkapp"] || []).push([["node_modules_ionic_core_dist_esm_ion-segment_2_entry_js"],{

/***/ 469:
/*!******************************************************************!*\
  !*** ./node_modules/@ionic/core/dist/esm/ion-segment_2.entry.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ion_segment: () => (/* binding */ Segment),
/* harmony export */   ion_segment_button: () => (/* binding */ SegmentButton)
/* harmony export */ });
/* harmony import */ var C_Users_faiza_OneDrive_Desktop_desko_On_Going_Tactical_Traps_ble_lock_v1_4_1_ble_lock_capacitor_v1_4_1_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js */ 9204);
/* harmony import */ var _index_527b9e34_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./index-527b9e34.js */ 4514);
/* harmony import */ var _helpers_78efeec3_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./helpers-78efeec3.js */ 9522);
/* harmony import */ var _dir_babeabeb_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./dir-babeabeb.js */ 7280);
/* harmony import */ var _theme_01f3f29c_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./theme-01f3f29c.js */ 1882);
/* harmony import */ var _ionic_global_ca86cf32_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./ionic-global-ca86cf32.js */ 1367);

/*!
 * (C) Ionic http://ionicframework.com - MIT License
 */





const segmentIosCss = ":host{--ripple-color:currentColor;-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased;display:grid;grid-auto-columns:1fr;position:relative;-ms-flex-align:stretch;align-items:stretch;-ms-flex-pack:center;justify-content:center;width:100%;background:var(--background);font-family:var(--ion-font-family, inherit);text-align:center;contain:paint;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}:host(.segment-scrollable){-ms-flex-pack:start;justify-content:start;width:auto;overflow-x:auto;grid-auto-columns:minmax(-webkit-min-content, 1fr);grid-auto-columns:minmax(min-content, 1fr)}:host(.segment-scrollable::-webkit-scrollbar){display:none}:host{--background:rgba(var(--ion-text-color-rgb, 0, 0, 0), 0.065);border-radius:8px;overflow:hidden;z-index:0}:host(.ion-color){background:rgba(var(--ion-color-base-rgb), 0.065)}:host(.in-toolbar){-webkit-margin-start:auto;margin-inline-start:auto;-webkit-margin-end:auto;margin-inline-end:auto;margin-top:0;margin-bottom:0;width:auto}:host(.in-toolbar:not(.ion-color)){background:var(--ion-toolbar-segment-background, var(--background))}:host(.in-toolbar-color:not(.ion-color)){background:rgba(var(--ion-color-contrast-rgb), 0.11)}";
const IonSegmentIosStyle0 = segmentIosCss;
const segmentMdCss = ":host{--ripple-color:currentColor;-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased;display:grid;grid-auto-columns:1fr;position:relative;-ms-flex-align:stretch;align-items:stretch;-ms-flex-pack:center;justify-content:center;width:100%;background:var(--background);font-family:var(--ion-font-family, inherit);text-align:center;contain:paint;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}:host(.segment-scrollable){-ms-flex-pack:start;justify-content:start;width:auto;overflow-x:auto;grid-auto-columns:minmax(-webkit-min-content, 1fr);grid-auto-columns:minmax(min-content, 1fr)}:host(.segment-scrollable::-webkit-scrollbar){display:none}:host{--background:transparent;grid-auto-columns:minmax(auto, 360px)}:host(.in-toolbar){min-height:var(--min-height)}:host(.segment-scrollable) ::slotted(ion-segment-button){min-width:auto}";
const IonSegmentMdStyle0 = segmentMdCss;
const Segment = class {
  constructor(hostRef) {
    (0,_index_527b9e34_js__WEBPACK_IMPORTED_MODULE_1__.r)(this, hostRef);
    this.ionChange = (0,_index_527b9e34_js__WEBPACK_IMPORTED_MODULE_1__.c)(this, "ionChange", 7);
    this.ionSelect = (0,_index_527b9e34_js__WEBPACK_IMPORTED_MODULE_1__.c)(this, "ionSelect", 7);
    this.ionStyle = (0,_index_527b9e34_js__WEBPACK_IMPORTED_MODULE_1__.c)(this, "ionStyle", 7);
    this.segmentViewEl = null;
    this.onClick = ev => {
      const current = ev.target;
      const previous = this.checked;
      // If the current element is a segment then that means
      // the user tried to swipe to a segment button and
      // click a segment button at the same time so we should
      // not update the checked segment button
      if (current.tagName === 'ION-SEGMENT') {
        return;
      }
      this.value = current.value;
      if (current !== previous) {
        this.emitValueChange();
      }
      if (this.segmentViewEl) {
        this.updateSegmentView();
        if (this.scrollable && previous) {
          this.checkButton(previous, current);
        }
      } else if (this.scrollable || !this.swipeGesture) {
        if (previous) {
          this.checkButton(previous, current);
        } else {
          this.setCheckedClasses();
        }
      }
    };
    this.onSlottedItemsChange = () => {
      /**
       * When the slotted segment buttons change we need to
       * ensure that the new segment buttons are checked if
       * the value matches the segment button value.
       */
      this.valueChanged(this.value);
    };
    this.getSegmentButton = selector => {
      var _a, _b;
      const buttons = this.getButtons().filter(button => !button.disabled);
      const currIndex = buttons.findIndex(button => button === document.activeElement);
      switch (selector) {
        case 'first':
          return buttons[0];
        case 'last':
          return buttons[buttons.length - 1];
        case 'next':
          return (_a = buttons[currIndex + 1]) !== null && _a !== void 0 ? _a : buttons[0];
        case 'previous':
          return (_b = buttons[currIndex - 1]) !== null && _b !== void 0 ? _b : buttons[buttons.length - 1];
        default:
          return null;
      }
    };
    this.activated = false;
    this.color = undefined;
    this.disabled = false;
    this.scrollable = false;
    this.swipeGesture = true;
    this.value = undefined;
    this.selectOnFocus = false;
  }
  colorChanged(value, oldValue) {
    /**
     * If color is set after not having
     * previously been set (or vice versa),
     * we need to emit style so the segment-buttons
     * can apply their color classes properly.
     */
    if (oldValue === undefined && value !== undefined || oldValue !== undefined && value === undefined) {
      this.emitStyle();
    }
  }
  swipeGestureChanged() {
    this.gestureChanged();
  }
  valueChanged(value, oldValue) {
    // Force a value to exist if we're using a segment view
    if (this.segmentViewEl && value === undefined) {
      this.value = this.getButtons()[0].value;
      return;
    }
    if (oldValue !== undefined && value !== undefined) {
      const buttons = this.getButtons();
      const previous = buttons.find(button => button.value === oldValue);
      const current = buttons.find(button => button.value === value);
      if (previous && current) {
        if (!this.segmentViewEl) {
          this.checkButton(previous, current);
        } else if (this.triggerScrollOnValueChange !== false) {
          this.updateSegmentView();
        }
      }
    } else if (value !== undefined && oldValue === undefined && this.segmentViewEl) {
      this.updateSegmentView();
    }
    /**
     * `ionSelect` is emitted every time the value changes (internal or external changes).
     * Used by `ion-segment-button` to determine if the button should be checked.
     */
    this.ionSelect.emit({
      value
    });
    // The scroll listener should handle scrolling the active button into view as needed
    if (!this.segmentViewEl) {
      this.scrollActiveButtonIntoView();
    }
    this.triggerScrollOnValueChange = undefined;
  }
  disabledChanged() {
    this.gestureChanged();
    if (!this.segmentViewEl) {
      const buttons = this.getButtons();
      for (const button of buttons) {
        button.disabled = this.disabled;
      }
    } else {
      this.segmentViewEl.disabled = this.disabled;
    }
  }
  gestureChanged() {
    if (this.gesture) {
      this.gesture.enable(!this.scrollable && !this.disabled && this.swipeGesture);
    }
  }
  connectedCallback() {
    this.emitStyle();
    this.segmentViewEl = this.getSegmentView();
  }
  disconnectedCallback() {
    this.segmentViewEl = null;
  }
  componentWillLoad() {
    this.emitStyle();
  }
  componentDidLoad() {
    var _this = this;
    return (0,C_Users_faiza_OneDrive_Desktop_desko_On_Going_Tactical_Traps_ble_lock_v1_4_1_ble_lock_capacitor_v1_4_1_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      _this.segmentViewEl = _this.getSegmentView();
      _this.setCheckedClasses();
      /**
       * We need to wait for the buttons to all be rendered
       * before we can scroll.
       */
      (0,_helpers_78efeec3_js__WEBPACK_IMPORTED_MODULE_2__.r)(() => {
        /**
         * When the segment loads for the first
         * time we just want to snap the active button into
         * place instead of scroll. Smooth scrolling should only
         * happen when the user interacts with the segment.
         */
        _this.scrollActiveButtonIntoView(false);
      });
      _this.gesture = (yield Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ./index-39782642.js */ 2976))).createGesture({
        el: _this.el,
        gestureName: 'segment',
        gesturePriority: 100,
        threshold: 0,
        passive: false,
        onStart: ev => _this.onStart(ev),
        onMove: ev => _this.onMove(ev),
        onEnd: ev => _this.onEnd(ev)
      });
      _this.gestureChanged();
      if (_this.disabled) {
        _this.disabledChanged();
      }
      // Update segment view based on the initial value,
      // but do not animate the scroll
      _this.updateSegmentView(false);
    })();
  }
  onStart(detail) {
    this.valueBeforeGesture = this.value;
    this.activate(detail);
  }
  onMove(detail) {
    this.setNextIndex(detail);
  }
  onEnd(detail) {
    this.setActivated(false);
    this.setNextIndex(detail, true);
    detail.event.stopImmediatePropagation();
    const value = this.value;
    if (value !== undefined) {
      if (this.valueBeforeGesture !== value) {
        this.emitValueChange();
        this.updateSegmentView();
      }
    }
    this.valueBeforeGesture = undefined;
  }
  /**
   * Emits an `ionChange` event.
   *
   * This API should be called for user committed changes.
   * This API should not be used for external value changes.
   */
  emitValueChange() {
    const {
      value
    } = this;
    this.ionChange.emit({
      value
    });
  }
  getButtons() {
    return Array.from(this.el.querySelectorAll('ion-segment-button'));
  }
  get checked() {
    return this.getButtons().find(button => button.value === this.value);
  }
  /*
   * Activate both the segment and the buttons
   * due to a bug with ::slotted in Safari
   */
  setActivated(activated) {
    const buttons = this.getButtons();
    buttons.forEach(button => {
      button.classList.toggle('segment-button-activated', activated);
    });
    this.activated = activated;
  }
  activate(detail) {
    const clicked = detail.event.target;
    const buttons = this.getButtons();
    const checked = buttons.find(button => button.value === this.value);
    // Make sure we are only checking for activation on a segment button
    // since disabled buttons will get the click on the segment
    if (clicked.tagName !== 'ION-SEGMENT-BUTTON') {
      return;
    }
    // If there are no checked buttons, set the current button to checked
    if (!checked) {
      this.value = clicked.value;
      this.setCheckedClasses();
    }
    // If the gesture began on the clicked button with the indicator
    // then we should activate the indicator
    if (this.value === clicked.value) {
      this.setActivated(true);
    }
  }
  getIndicator(button) {
    const root = button.shadowRoot || button;
    return root.querySelector('.segment-button-indicator');
  }
  checkButton(previous, current) {
    const previousIndicator = this.getIndicator(previous);
    const currentIndicator = this.getIndicator(current);
    if (previousIndicator === null || currentIndicator === null) {
      return;
    }
    const previousClientRect = previousIndicator.getBoundingClientRect();
    const currentClientRect = currentIndicator.getBoundingClientRect();
    const widthDelta = previousClientRect.width / currentClientRect.width;
    const xPosition = previousClientRect.left - currentClientRect.left;
    // Scale the indicator width to match the previous indicator width
    // and translate it on top of the previous indicator
    const transform = `translate3d(${xPosition}px, 0, 0) scaleX(${widthDelta})`;
    (0,_index_527b9e34_js__WEBPACK_IMPORTED_MODULE_1__.w)(() => {
      // Remove the transition before positioning on top of the previous indicator
      currentIndicator.classList.remove('segment-button-indicator-animated');
      currentIndicator.style.setProperty('transform', transform);
      // Force a repaint to ensure the transform happens
      currentIndicator.getBoundingClientRect();
      // Add the transition to move the indicator into place
      currentIndicator.classList.add('segment-button-indicator-animated');
      // Remove the transform to slide the indicator back to the button clicked
      currentIndicator.style.setProperty('transform', '');
      this.scrollActiveButtonIntoView(true);
    });
    this.value = current.value;
    this.setCheckedClasses();
  }
  setCheckedClasses() {
    const buttons = this.getButtons();
    const index = buttons.findIndex(button => button.value === this.value);
    const next = index + 1;
    for (const button of buttons) {
      button.classList.remove('segment-button-after-checked');
    }
    if (next < buttons.length) {
      buttons[next].classList.add('segment-button-after-checked');
    }
  }
  getSegmentView() {
    const buttons = this.getButtons();
    // Get the first button with a contentId
    const firstContentId = buttons.find(button => button.contentId);
    // Get the segment content with an id matching the button's contentId
    const segmentContent = document.querySelector(`ion-segment-content[id="${firstContentId === null || firstContentId === void 0 ? void 0 : firstContentId.contentId}"]`);
    // Return the segment view for that matching segment content
    return segmentContent === null || segmentContent === void 0 ? void 0 : segmentContent.closest('ion-segment-view');
  }
  handleSegmentViewScroll(ev) {
    const {
      scrollRatio,
      isManualScroll
    } = ev.detail;
    if (!isManualScroll) {
      return;
    }
    const dispatchedFrom = ev.target;
    const segmentViewEl = this.segmentViewEl;
    const segmentEl = this.el;
    // Only update the indicator if the event was dispatched from the correct segment view
    if (ev.composedPath().includes(segmentViewEl) || (dispatchedFrom === null || dispatchedFrom === void 0 ? void 0 : dispatchedFrom.contains(segmentEl))) {
      const buttons = this.getButtons();
      // If no buttons are found or there is no value set then do nothing
      if (!buttons.length) return;
      const index = buttons.findIndex(button => button.value === this.value);
      const current = buttons[index];
      const nextIndex = Math.round(scrollRatio * (buttons.length - 1));
      if (this.lastNextIndex === undefined || this.lastNextIndex !== nextIndex) {
        this.lastNextIndex = nextIndex;
        this.triggerScrollOnValueChange = false;
        this.checkButton(current, buttons[nextIndex]);
        this.emitValueChange();
      }
    }
  }
  /**
   * Finds the related segment view and sets its current content
   * based on the selected segment button. This method
   * should be called on initial load of the segment,
   * after the gesture is completed (if dragging between segments)
   * and when a segment button is clicked directly.
   */
  updateSegmentView(smoothScroll = true) {
    const buttons = this.getButtons();
    const button = buttons.find(btn => btn.value === this.value);
    // If the button does not have a contentId then there is
    // no associated segment view to update
    if (!(button === null || button === void 0 ? void 0 : button.contentId)) {
      return;
    }
    const segmentView = this.segmentViewEl;
    if (segmentView) {
      segmentView.setContent(button.contentId, smoothScroll);
    }
  }
  scrollActiveButtonIntoView(smoothScroll = true) {
    const {
      scrollable,
      value,
      el
    } = this;
    if (scrollable) {
      const buttons = this.getButtons();
      const activeButton = buttons.find(button => button.value === value);
      if (activeButton !== undefined) {
        const scrollContainerBox = el.getBoundingClientRect();
        const activeButtonBox = activeButton.getBoundingClientRect();
        /**
         * Subtract the active button x position from the scroll
         * container x position. This will give us the x position
         * of the active button within the scroll container.
         */
        const activeButtonLeft = activeButtonBox.x - scrollContainerBox.x;
        /**
         * If we just used activeButtonLeft, then the active button
         * would be aligned with the left edge of the scroll container.
         * Instead, we want the segment button to be centered. As a result,
         * we subtract half of the scroll container width. This will position
         * the left edge of the active button at the midpoint of the scroll container.
         * We then add half of the active button width. This will position the active
         * button such that the midpoint of the active button is at the midpoint of the
         * scroll container.
         */
        const centeredX = activeButtonLeft - scrollContainerBox.width / 2 + activeButtonBox.width / 2;
        /**
         * newScrollPosition is the absolute scroll position that the
         * container needs to move to in order to center the active button.
         * It is calculated by adding the current scroll position
         * (scrollLeft) to the offset needed to center the button
         * (centeredX).
         */
        const newScrollPosition = el.scrollLeft + centeredX;
        /**
         * We intentionally use scrollTo here instead of scrollIntoView
         * to avoid a WebKit bug where accelerated animations break
         * when using scrollIntoView. Using scrollIntoView will cause the
         * segment container to jump during the transition and then snap into place.
         * This is because scrollIntoView can potentially cause parent element
         * containers to also scroll. scrollTo does not have this same behavior, so
         * we use this API instead.
         *
         * scrollTo is used instead of scrollBy because there is a
         * Webkit bug that causes scrollBy to not work smoothly when
         * the active button is near the edge of the scroll container.
         * This leads to the buttons to jump around during the transition.
         *
         * Note that if there is not enough scrolling space to center the element
         * within the scroll container, the browser will attempt
         * to center by as much as it can.
         */
        el.scrollTo({
          top: 0,
          left: newScrollPosition,
          behavior: smoothScroll ? 'smooth' : 'instant'
        });
      }
    }
  }
  setNextIndex(detail, isEnd = false) {
    const rtl = (0,_dir_babeabeb_js__WEBPACK_IMPORTED_MODULE_3__.i)(this.el);
    const activated = this.activated;
    const buttons = this.getButtons();
    const index = buttons.findIndex(button => button.value === this.value);
    const previous = buttons[index];
    let current;
    let nextIndex;
    if (index === -1) {
      return;
    }
    // Get the element that the touch event started on in case
    // it was the checked button, then we will move the indicator
    const rect = previous.getBoundingClientRect();
    const left = rect.left;
    const width = rect.width;
    // Get the element that the gesture is on top of based on the currentX of the
    // gesture event and the Y coordinate of the starting element, since the gesture
    // can move up and down off of the segment
    const currentX = detail.currentX;
    const previousY = rect.top + rect.height / 2;
    /**
     * Segment can be used inside the shadow dom
     * so doing document.elementFromPoint would never
     * return a segment button in that instance.
     * We use getRootNode to which will return the parent
     * shadow root if used inside a shadow component and
     * returns document otherwise.
     */
    const root = this.el.getRootNode();
    const nextEl = root.elementFromPoint(currentX, previousY);
    const decreaseIndex = rtl ? currentX > left + width : currentX < left;
    const increaseIndex = rtl ? currentX < left : currentX > left + width;
    // If the indicator is currently activated then we have started the gesture
    // on top of the checked button so we need to slide the indicator
    // by checking the button next to it as we move
    if (activated && !isEnd) {
      // Decrease index, move left in LTR & right in RTL
      if (decreaseIndex) {
        const newIndex = index - 1;
        if (newIndex >= 0) {
          nextIndex = newIndex;
        }
        // Increase index, moves right in LTR & left in RTL
      } else if (increaseIndex) {
        if (activated && !isEnd) {
          const newIndex = index + 1;
          if (newIndex < buttons.length) {
            nextIndex = newIndex;
          }
        }
      }
      if (nextIndex !== undefined && !buttons[nextIndex].disabled) {
        current = buttons[nextIndex];
      }
    }
    // If the indicator is not activated then we will just set the indicator
    // to the element where the gesture ended
    if (!activated && isEnd) {
      current = nextEl;
    }
    if (current != null) {
      /**
       * If current element is ion-segment then that means
       * user tried to select a disabled ion-segment-button,
       * and we should not update the ripple.
       */
      if (current.tagName === 'ION-SEGMENT') {
        return false;
      }
      if (previous !== current) {
        this.checkButton(previous, current);
      }
    }
    return true;
  }
  emitStyle() {
    this.ionStyle.emit({
      segment: true
    });
  }
  onKeyDown(ev) {
    const rtl = (0,_dir_babeabeb_js__WEBPACK_IMPORTED_MODULE_3__.i)(this.el);
    let keyDownSelectsButton = this.selectOnFocus;
    let current;
    switch (ev.key) {
      case 'ArrowRight':
        ev.preventDefault();
        current = rtl ? this.getSegmentButton('previous') : this.getSegmentButton('next');
        break;
      case 'ArrowLeft':
        ev.preventDefault();
        current = rtl ? this.getSegmentButton('next') : this.getSegmentButton('previous');
        break;
      case 'Home':
        ev.preventDefault();
        current = this.getSegmentButton('first');
        break;
      case 'End':
        ev.preventDefault();
        current = this.getSegmentButton('last');
        break;
      case ' ':
      case 'Enter':
        ev.preventDefault();
        current = document.activeElement;
        keyDownSelectsButton = true;
    }
    if (!current) {
      return;
    }
    if (keyDownSelectsButton) {
      const previous = this.checked;
      this.checkButton(previous || current, current);
      if (current !== previous) {
        this.emitValueChange();
      }
    }
    current.setFocus();
  }
  render() {
    const mode = (0,_ionic_global_ca86cf32_js__WEBPACK_IMPORTED_MODULE_5__.b)(this);
    return (0,_index_527b9e34_js__WEBPACK_IMPORTED_MODULE_1__.h)(_index_527b9e34_js__WEBPACK_IMPORTED_MODULE_1__.e, {
      key: 'a64e39352050b516f7dc82ce95a4bcff8431d1d0',
      role: "tablist",
      onClick: this.onClick,
      class: (0,_theme_01f3f29c_js__WEBPACK_IMPORTED_MODULE_4__.c)(this.color, {
        [mode]: true,
        'in-toolbar': (0,_theme_01f3f29c_js__WEBPACK_IMPORTED_MODULE_4__.h)('ion-toolbar', this.el),
        'in-toolbar-color': (0,_theme_01f3f29c_js__WEBPACK_IMPORTED_MODULE_4__.h)('ion-toolbar[color]', this.el),
        'segment-activated': this.activated,
        'segment-disabled': this.disabled,
        'segment-scrollable': this.scrollable
      })
    }, (0,_index_527b9e34_js__WEBPACK_IMPORTED_MODULE_1__.h)("slot", {
      key: 'bb3f3ec30e59e0461fa620d8961ab730cc802a4e',
      onSlotchange: this.onSlottedItemsChange
    }));
  }
  get el() {
    return (0,_index_527b9e34_js__WEBPACK_IMPORTED_MODULE_1__.f)(this);
  }
  static get watchers() {
    return {
      "color": ["colorChanged"],
      "swipeGesture": ["swipeGestureChanged"],
      "value": ["valueChanged"],
      "disabled": ["disabledChanged"]
    };
  }
};
Segment.style = {
  ios: IonSegmentIosStyle0,
  md: IonSegmentMdStyle0
};
const segmentButtonIosCss = ":host{--color:initial;--color-hover:var(--color);--color-checked:var(--color);--color-disabled:var(--color);--padding-start:0;--padding-end:0;--padding-top:0;--padding-bottom:0;border-radius:var(--border-radius);display:-ms-flexbox;display:flex;position:relative;-ms-flex-direction:column;flex-direction:column;height:auto;background:var(--background);color:var(--color);text-decoration:none;text-overflow:ellipsis;white-space:nowrap;cursor:pointer;grid-row:1;-webkit-font-kerning:none;font-kerning:none}.button-native{border-radius:0;font-family:inherit;font-size:inherit;font-style:inherit;font-weight:inherit;letter-spacing:inherit;text-decoration:inherit;text-indent:inherit;text-overflow:inherit;text-transform:inherit;text-align:inherit;white-space:inherit;color:inherit;-webkit-margin-start:var(--margin-start);margin-inline-start:var(--margin-start);-webkit-margin-end:var(--margin-end);margin-inline-end:var(--margin-end);margin-top:var(--margin-top);margin-bottom:var(--margin-bottom);-webkit-padding-start:var(--padding-start);padding-inline-start:var(--padding-start);-webkit-padding-end:var(--padding-end);padding-inline-end:var(--padding-end);padding-top:var(--padding-top);padding-bottom:var(--padding-bottom);-webkit-transform:translate3d(0,  0,  0);transform:translate3d(0,  0,  0);display:-ms-flexbox;display:flex;position:relative;-ms-flex-direction:inherit;flex-direction:inherit;-ms-flex-positive:1;flex-grow:1;-ms-flex-align:center;align-items:center;-ms-flex-pack:center;justify-content:center;width:100%;min-width:inherit;max-width:inherit;height:auto;min-height:inherit;max-height:inherit;-webkit-transition:var(--transition);transition:var(--transition);border:none;outline:none;background:transparent;contain:content;pointer-events:none;overflow:hidden;z-index:2}.button-native::after{left:0;right:0;top:0;bottom:0;position:absolute;content:\"\";opacity:0}.button-inner{display:-ms-flexbox;display:flex;position:relative;-ms-flex-flow:inherit;flex-flow:inherit;-ms-flex-align:center;align-items:center;-ms-flex-pack:center;justify-content:center;width:100%;height:100%;z-index:1}:host(.segment-button-checked){background:var(--background-checked);color:var(--color-checked)}:host(.segment-button-disabled){cursor:default;pointer-events:none}:host(.ion-focused) .button-native{color:var(--color-focused)}:host(.ion-focused) .button-native::after{background:var(--background-focused);opacity:var(--background-focused-opacity)}:host(:focus){outline:none}@media (any-hover: hover){:host(:hover) .button-native{color:var(--color-hover)}:host(:hover) .button-native::after{background:var(--background-hover);opacity:var(--background-hover-opacity)}:host(.segment-button-checked:hover) .button-native{color:var(--color-checked)}}::slotted(ion-icon){-ms-flex-negative:0;flex-shrink:0;-ms-flex-order:-1;order:-1;pointer-events:none}::slotted(ion-label){display:block;-ms-flex-item-align:center;align-self:center;max-width:100%;line-height:22px;text-overflow:ellipsis;white-space:nowrap;overflow:hidden;-webkit-box-sizing:border-box;box-sizing:border-box;pointer-events:none}:host(.segment-button-layout-icon-top) .button-native{-ms-flex-direction:column;flex-direction:column}:host(.segment-button-layout-icon-start) .button-native{-ms-flex-direction:row;flex-direction:row}:host(.segment-button-layout-icon-end) .button-native{-ms-flex-direction:row-reverse;flex-direction:row-reverse}:host(.segment-button-layout-icon-bottom) .button-native{-ms-flex-direction:column-reverse;flex-direction:column-reverse}:host(.segment-button-layout-icon-hide) ::slotted(ion-icon){display:none}:host(.segment-button-layout-label-hide) ::slotted(ion-label){display:none}ion-ripple-effect{color:var(--ripple-color, var(--color-checked))}.segment-button-indicator{-webkit-transform-origin:left;transform-origin:left;position:absolute;opacity:0;-webkit-box-sizing:border-box;box-sizing:border-box;will-change:transform, opacity;pointer-events:none}.segment-button-indicator-background{width:100%;height:var(--indicator-height);-webkit-transform:var(--indicator-transform);transform:var(--indicator-transform);-webkit-box-shadow:var(--indicator-box-shadow);box-shadow:var(--indicator-box-shadow);pointer-events:none}.segment-button-indicator-animated{-webkit-transition:var(--indicator-transition);transition:var(--indicator-transition)}:host(.segment-button-checked) .segment-button-indicator{opacity:1}@media (prefers-reduced-motion: reduce){.segment-button-indicator-background{-webkit-transform:none;transform:none}.segment-button-indicator-animated{-webkit-transition:none;transition:none}}:host{--background:none;--background-checked:none;--background-hover:none;--background-hover-opacity:0;--background-focused:none;--background-focused-opacity:0;--border-radius:7px;--border-width:1px;--border-color:rgba(var(--ion-text-color-rgb, 0, 0, 0), 0.12);--border-style:solid;--indicator-box-shadow:0 0 5px rgba(0, 0, 0, 0.16);--indicator-color:var(--ion-color-step-350, var(--ion-background-color-step-350, var(--ion-background-color, #fff)));--indicator-height:100%;--indicator-transition:transform 260ms cubic-bezier(0.4, 0, 0.2, 1);--indicator-transform:none;--transition:100ms all linear;--padding-top:0;--padding-end:13px;--padding-bottom:0;--padding-start:13px;margin-top:2px;margin-bottom:2px;position:relative;-ms-flex-direction:row;flex-direction:row;min-width:70px;min-height:28px;-webkit-transform:translate3d(0, 0, 0);transform:translate3d(0, 0, 0);font-size:13px;font-weight:450;line-height:37px}:host::before{margin-left:0;margin-right:0;margin-top:5px;margin-bottom:5px;-webkit-transition:160ms opacity ease-in-out;transition:160ms opacity ease-in-out;-webkit-transition-delay:100ms;transition-delay:100ms;border-left:var(--border-width) var(--border-style) var(--border-color);content:\"\";opacity:1;will-change:opacity}:host(:first-of-type)::before{border-left-color:transparent}:host(.segment-button-disabled){opacity:0.3}::slotted(ion-icon){font-size:24px}:host(.segment-button-layout-icon-start) ::slotted(ion-label){-webkit-margin-start:2px;margin-inline-start:2px;-webkit-margin-end:0;margin-inline-end:0}:host(.segment-button-layout-icon-end) ::slotted(ion-label){-webkit-margin-start:0;margin-inline-start:0;-webkit-margin-end:2px;margin-inline-end:2px}.segment-button-indicator{-webkit-padding-start:2px;padding-inline-start:2px;-webkit-padding-end:2px;padding-inline-end:2px;left:0;right:0;top:0;bottom:0}.segment-button-indicator-background{border-radius:var(--border-radius);background:var(--indicator-color)}.segment-button-indicator-background{-webkit-transition:var(--indicator-transition);transition:var(--indicator-transition)}:host(.segment-button-checked)::before,:host(.segment-button-after-checked)::before{opacity:0}:host(.segment-button-checked){z-index:-1}:host(.segment-button-activated){--indicator-transform:scale(0.95)}:host(.ion-focused) .button-native{opacity:0.7}@media (any-hover: hover){:host(:hover) .button-native{opacity:0.5}:host(.segment-button-checked:hover) .button-native{opacity:1}}:host(.in-segment-color){background:none;color:var(--ion-text-color, #000)}:host(.in-segment-color) .segment-button-indicator-background{background:var(--ion-color-step-350, var(--ion-background-color-step-350, var(--ion-background-color, #fff)))}@media (any-hover: hover){:host(.in-segment-color:hover) .button-native,:host(.in-segment-color.segment-button-checked:hover) .button-native{color:var(--ion-text-color, #000)}}:host(.in-toolbar:not(.in-segment-color)){--background-checked:var(--ion-toolbar-segment-background-checked, none);--color:var(--ion-toolbar-segment-color, var(--ion-toolbar-color), initial);--color-checked:var(--ion-toolbar-segment-color-checked, var(--ion-toolbar-color), initial);--indicator-color:var(--ion-toolbar-segment-indicator-color, var(--ion-color-step-350, var(--ion-background-color-step-350, var(--ion-background-color, #fff))))}:host(.in-toolbar-color) .segment-button-indicator-background{background:var(--ion-color-contrast)}:host(.in-toolbar-color:not(.in-segment-color)) .button-native{color:var(--ion-color-contrast)}:host(.in-toolbar-color.segment-button-checked:not(.in-segment-color)) .button-native{color:var(--ion-color-base)}@media (any-hover: hover){:host(.in-toolbar-color:not(.in-segment-color):hover) .button-native{color:var(--ion-color-contrast)}:host(.in-toolbar-color.segment-button-checked:not(.in-segment-color):hover) .button-native{color:var(--ion-color-base)}}";
const IonSegmentButtonIosStyle0 = segmentButtonIosCss;
const segmentButtonMdCss = ":host{--color:initial;--color-hover:var(--color);--color-checked:var(--color);--color-disabled:var(--color);--padding-start:0;--padding-end:0;--padding-top:0;--padding-bottom:0;border-radius:var(--border-radius);display:-ms-flexbox;display:flex;position:relative;-ms-flex-direction:column;flex-direction:column;height:auto;background:var(--background);color:var(--color);text-decoration:none;text-overflow:ellipsis;white-space:nowrap;cursor:pointer;grid-row:1;-webkit-font-kerning:none;font-kerning:none}.button-native{border-radius:0;font-family:inherit;font-size:inherit;font-style:inherit;font-weight:inherit;letter-spacing:inherit;text-decoration:inherit;text-indent:inherit;text-overflow:inherit;text-transform:inherit;text-align:inherit;white-space:inherit;color:inherit;-webkit-margin-start:var(--margin-start);margin-inline-start:var(--margin-start);-webkit-margin-end:var(--margin-end);margin-inline-end:var(--margin-end);margin-top:var(--margin-top);margin-bottom:var(--margin-bottom);-webkit-padding-start:var(--padding-start);padding-inline-start:var(--padding-start);-webkit-padding-end:var(--padding-end);padding-inline-end:var(--padding-end);padding-top:var(--padding-top);padding-bottom:var(--padding-bottom);-webkit-transform:translate3d(0,  0,  0);transform:translate3d(0,  0,  0);display:-ms-flexbox;display:flex;position:relative;-ms-flex-direction:inherit;flex-direction:inherit;-ms-flex-positive:1;flex-grow:1;-ms-flex-align:center;align-items:center;-ms-flex-pack:center;justify-content:center;width:100%;min-width:inherit;max-width:inherit;height:auto;min-height:inherit;max-height:inherit;-webkit-transition:var(--transition);transition:var(--transition);border:none;outline:none;background:transparent;contain:content;pointer-events:none;overflow:hidden;z-index:2}.button-native::after{left:0;right:0;top:0;bottom:0;position:absolute;content:\"\";opacity:0}.button-inner{display:-ms-flexbox;display:flex;position:relative;-ms-flex-flow:inherit;flex-flow:inherit;-ms-flex-align:center;align-items:center;-ms-flex-pack:center;justify-content:center;width:100%;height:100%;z-index:1}:host(.segment-button-checked){background:var(--background-checked);color:var(--color-checked)}:host(.segment-button-disabled){cursor:default;pointer-events:none}:host(.ion-focused) .button-native{color:var(--color-focused)}:host(.ion-focused) .button-native::after{background:var(--background-focused);opacity:var(--background-focused-opacity)}:host(:focus){outline:none}@media (any-hover: hover){:host(:hover) .button-native{color:var(--color-hover)}:host(:hover) .button-native::after{background:var(--background-hover);opacity:var(--background-hover-opacity)}:host(.segment-button-checked:hover) .button-native{color:var(--color-checked)}}::slotted(ion-icon){-ms-flex-negative:0;flex-shrink:0;-ms-flex-order:-1;order:-1;pointer-events:none}::slotted(ion-label){display:block;-ms-flex-item-align:center;align-self:center;max-width:100%;line-height:22px;text-overflow:ellipsis;white-space:nowrap;overflow:hidden;-webkit-box-sizing:border-box;box-sizing:border-box;pointer-events:none}:host(.segment-button-layout-icon-top) .button-native{-ms-flex-direction:column;flex-direction:column}:host(.segment-button-layout-icon-start) .button-native{-ms-flex-direction:row;flex-direction:row}:host(.segment-button-layout-icon-end) .button-native{-ms-flex-direction:row-reverse;flex-direction:row-reverse}:host(.segment-button-layout-icon-bottom) .button-native{-ms-flex-direction:column-reverse;flex-direction:column-reverse}:host(.segment-button-layout-icon-hide) ::slotted(ion-icon){display:none}:host(.segment-button-layout-label-hide) ::slotted(ion-label){display:none}ion-ripple-effect{color:var(--ripple-color, var(--color-checked))}.segment-button-indicator{-webkit-transform-origin:left;transform-origin:left;position:absolute;opacity:0;-webkit-box-sizing:border-box;box-sizing:border-box;will-change:transform, opacity;pointer-events:none}.segment-button-indicator-background{width:100%;height:var(--indicator-height);-webkit-transform:var(--indicator-transform);transform:var(--indicator-transform);-webkit-box-shadow:var(--indicator-box-shadow);box-shadow:var(--indicator-box-shadow);pointer-events:none}.segment-button-indicator-animated{-webkit-transition:var(--indicator-transition);transition:var(--indicator-transition)}:host(.segment-button-checked) .segment-button-indicator{opacity:1}@media (prefers-reduced-motion: reduce){.segment-button-indicator-background{-webkit-transform:none;transform:none}.segment-button-indicator-animated{-webkit-transition:none;transition:none}}:host{--background:none;--background-checked:none;--background-hover:var(--color-checked);--background-focused:var(--color-checked);--background-activated-opacity:0;--background-focused-opacity:.12;--background-hover-opacity:.04;--color:rgba(var(--ion-text-color-rgb, 0, 0, 0), 0.6);--color-checked:var(--ion-color-primary, #0054e9);--indicator-box-shadow:none;--indicator-color:var(--color-checked);--indicator-height:2px;--indicator-transition:transform 250ms cubic-bezier(0.4, 0, 0.2, 1);--indicator-transform:none;--padding-top:0;--padding-end:16px;--padding-bottom:0;--padding-start:16px;--transition:color 0.15s linear 0s, opacity 0.15s linear 0s;min-width:90px;min-height:48px;border-width:var(--border-width);border-style:var(--border-style);border-color:var(--border-color);font-size:14px;font-weight:500;letter-spacing:0.06em;line-height:40px;text-transform:uppercase}:host(.segment-button-disabled){opacity:0.3}:host(.in-segment-color){background:none;color:rgba(var(--ion-text-color-rgb, 0, 0, 0), 0.6)}:host(.in-segment-color) ion-ripple-effect{color:var(--ion-color-base)}:host(.in-segment-color) .segment-button-indicator-background{background:var(--ion-color-base)}:host(.in-segment-color.segment-button-checked) .button-native{color:var(--ion-color-base)}:host(.in-segment-color.ion-focused) .button-native::after{background:var(--ion-color-base)}@media (any-hover: hover){:host(.in-segment-color:hover) .button-native{color:rgba(var(--ion-text-color-rgb, 0, 0, 0), 0.6)}:host(.in-segment-color:hover) .button-native::after{background:var(--ion-color-base)}:host(.in-segment-color.segment-button-checked:hover) .button-native{color:var(--ion-color-base)}}:host(.in-toolbar:not(.in-segment-color)){--background:var(--ion-toolbar-segment-background, none);--background-checked:var(--ion-toolbar-segment-background-checked, none);--color:var(--ion-toolbar-segment-color, rgba(var(--ion-text-color-rgb, 0, 0, 0), 0.6));--color-checked:var(--ion-toolbar-segment-color-checked, var(--ion-color-primary, #0054e9));--indicator-color:var(--ion-toolbar-segment-color-checked, var(--color-checked))}:host(.in-toolbar-color:not(.in-segment-color)) .button-native{color:rgba(var(--ion-color-contrast-rgb), 0.6)}:host(.in-toolbar-color.segment-button-checked:not(.in-segment-color)) .button-native{color:var(--ion-color-contrast)}@media (any-hover: hover){:host(.in-toolbar-color:not(.in-segment-color)) .button-native::after{background:var(--ion-color-contrast)}}::slotted(ion-icon){margin-top:12px;margin-bottom:12px;font-size:24px}::slotted(ion-label){margin-top:12px;margin-bottom:12px}:host(.segment-button-layout-icon-top) ::slotted(ion-label),:host(.segment-button-layout-icon-bottom) ::slotted(ion-icon){margin-top:0}:host(.segment-button-layout-icon-top) ::slotted(ion-icon),:host(.segment-button-layout-icon-bottom) ::slotted(ion-label){margin-bottom:0}:host(.segment-button-layout-icon-start) ::slotted(ion-label){-webkit-margin-start:8px;margin-inline-start:8px;-webkit-margin-end:0;margin-inline-end:0}:host(.segment-button-layout-icon-end) ::slotted(ion-label){-webkit-margin-start:0;margin-inline-start:0;-webkit-margin-end:8px;margin-inline-end:8px}:host(.segment-button-has-icon-only) ::slotted(ion-icon){margin-top:12px;margin-bottom:12px}:host(.segment-button-has-label-only) ::slotted(ion-label){margin-top:12px;margin-bottom:12px}.segment-button-indicator{left:0;right:0;bottom:0}.segment-button-indicator-background{background:var(--indicator-color)}:host(.in-toolbar:not(.in-segment-color)) .segment-button-indicator-background{background:var(--ion-toolbar-segment-indicator-color, var(--indicator-color))}:host(.in-toolbar-color:not(.in-segment-color)) .segment-button-indicator-background{background:var(--ion-color-contrast)}";
const IonSegmentButtonMdStyle0 = segmentButtonMdCss;
let ids = 0;
const SegmentButton = class {
  constructor(hostRef) {
    (0,_index_527b9e34_js__WEBPACK_IMPORTED_MODULE_1__.r)(this, hostRef);
    this.segmentEl = null;
    this.inheritedAttributes = {};
    this.updateStyle = () => {
      (0,_index_527b9e34_js__WEBPACK_IMPORTED_MODULE_1__.i)(this);
    };
    this.updateState = () => {
      const {
        segmentEl
      } = this;
      if (segmentEl) {
        this.checked = segmentEl.value === this.value;
        if (segmentEl.disabled) {
          this.disabled = true;
        }
      }
    };
    this.checked = false;
    this.contentId = undefined;
    this.disabled = false;
    this.layout = 'icon-top';
    this.type = 'button';
    this.value = 'ion-sb-' + ids++;
  }
  valueChanged() {
    this.updateState();
  }
  connectedCallback() {
    const segmentEl = this.segmentEl = this.el.closest('ion-segment');
    if (segmentEl) {
      this.updateState();
      (0,_helpers_78efeec3_js__WEBPACK_IMPORTED_MODULE_2__.a)(segmentEl, 'ionSelect', this.updateState);
      (0,_helpers_78efeec3_js__WEBPACK_IMPORTED_MODULE_2__.a)(segmentEl, 'ionStyle', this.updateStyle);
    }
    // Prevent buttons from being disabled when associated with segment content
    if (this.contentId && this.disabled) {
      console.warn(`Segment Button: Segment buttons cannot be disabled when associated with an <ion-segment-content>.`);
      this.disabled = false;
    }
  }
  disconnectedCallback() {
    const segmentEl = this.segmentEl;
    if (segmentEl) {
      (0,_helpers_78efeec3_js__WEBPACK_IMPORTED_MODULE_2__.b)(segmentEl, 'ionSelect', this.updateState);
      (0,_helpers_78efeec3_js__WEBPACK_IMPORTED_MODULE_2__.b)(segmentEl, 'ionStyle', this.updateStyle);
      this.segmentEl = null;
    }
  }
  componentWillLoad() {
    this.inheritedAttributes = Object.assign({}, (0,_helpers_78efeec3_js__WEBPACK_IMPORTED_MODULE_2__.h)(this.el, ['aria-label']));
    // Return if there is no contentId defined
    if (!this.contentId) return;
    // Attempt to find the Segment Content by its contentId
    const segmentContent = document.getElementById(this.contentId);
    // If no associated Segment Content exists, log an error and return
    if (!segmentContent) {
      console.error(`Segment Button: Unable to find Segment Content with id="${this.contentId}".`);
      return;
    }
    // Ensure the found element is a valid ION-SEGMENT-CONTENT
    if (segmentContent.tagName !== 'ION-SEGMENT-CONTENT') {
      console.error(`Segment Button: Element with id="${this.contentId}" is not an <ion-segment-content> element.`);
      return;
    }
  }
  get hasLabel() {
    return !!this.el.querySelector('ion-label');
  }
  get hasIcon() {
    return !!this.el.querySelector('ion-icon');
  }
  /**
   * @internal
   * Focuses the native <button> element
   * inside of ion-segment-button.
   */
  setFocus() {
    var _this2 = this;
    return (0,C_Users_faiza_OneDrive_Desktop_desko_On_Going_Tactical_Traps_ble_lock_v1_4_1_ble_lock_capacitor_v1_4_1_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      const {
        nativeEl
      } = _this2;
      if (nativeEl !== undefined) {
        nativeEl.focus();
      }
    })();
  }
  render() {
    const {
      checked,
      type,
      disabled,
      hasIcon,
      hasLabel,
      layout,
      segmentEl
    } = this;
    const mode = (0,_ionic_global_ca86cf32_js__WEBPACK_IMPORTED_MODULE_5__.b)(this);
    const hasSegmentColor = () => (segmentEl === null || segmentEl === void 0 ? void 0 : segmentEl.color) !== undefined;
    return (0,_index_527b9e34_js__WEBPACK_IMPORTED_MODULE_1__.h)(_index_527b9e34_js__WEBPACK_IMPORTED_MODULE_1__.e, {
      key: 'f2f679a08b131cd35d63f649b9d1f1907df30a89',
      class: {
        [mode]: true,
        'in-toolbar': (0,_theme_01f3f29c_js__WEBPACK_IMPORTED_MODULE_4__.h)('ion-toolbar', this.el),
        'in-toolbar-color': (0,_theme_01f3f29c_js__WEBPACK_IMPORTED_MODULE_4__.h)('ion-toolbar[color]', this.el),
        'in-segment': (0,_theme_01f3f29c_js__WEBPACK_IMPORTED_MODULE_4__.h)('ion-segment', this.el),
        'in-segment-color': hasSegmentColor(),
        'segment-button-has-label': hasLabel,
        'segment-button-has-icon': hasIcon,
        'segment-button-has-label-only': hasLabel && !hasIcon,
        'segment-button-has-icon-only': hasIcon && !hasLabel,
        'segment-button-disabled': disabled,
        'segment-button-checked': checked,
        [`segment-button-layout-${layout}`]: true,
        'ion-activatable': true,
        'ion-activatable-instant': true,
        'ion-focusable': true
      }
    }, (0,_index_527b9e34_js__WEBPACK_IMPORTED_MODULE_1__.h)("button", Object.assign({
      key: '8e887b5031da705a3695c0870be08696d66188de',
      "aria-selected": checked ? 'true' : 'false',
      role: "tab",
      ref: el => this.nativeEl = el,
      type: type,
      class: "button-native",
      part: "native",
      disabled: disabled
    }, this.inheritedAttributes), (0,_index_527b9e34_js__WEBPACK_IMPORTED_MODULE_1__.h)("span", {
      key: '73b795c39cb09438e50922abf6b3a010e31fa2b6',
      class: "button-inner"
    }, (0,_index_527b9e34_js__WEBPACK_IMPORTED_MODULE_1__.h)("slot", {
      key: '9769ddc917d7e459bd80dcd81c10c379e73d1b3e'
    })), mode === 'md' && (0,_index_527b9e34_js__WEBPACK_IMPORTED_MODULE_1__.h)("ion-ripple-effect", {
      key: '8e4c06d6bae1034af8cc5db86fcca0ae72d042b1'
    })), (0,_index_527b9e34_js__WEBPACK_IMPORTED_MODULE_1__.h)("div", {
      key: 'ae73ee0e429e54a43269f99b6d3d7e1c6e8f60cc',
      part: "indicator",
      class: "segment-button-indicator segment-button-indicator-animated"
    }, (0,_index_527b9e34_js__WEBPACK_IMPORTED_MODULE_1__.h)("div", {
      key: 'd38eabe8161403799cfbad73dd6bf912d965442c',
      part: "indicator-background",
      class: "segment-button-indicator-background"
    })));
  }
  get el() {
    return (0,_index_527b9e34_js__WEBPACK_IMPORTED_MODULE_1__.f)(this);
  }
  static get watchers() {
    return {
      "value": ["valueChanged"]
    };
  }
};
SegmentButton.style = {
  ios: IonSegmentButtonIosStyle0,
  md: IonSegmentButtonMdStyle0
};


/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibm9kZV9tb2R1bGVzX2lvbmljX2NvcmVfZGlzdF9lc21faW9uLXNlZ21lbnRfMl9lbnRyeV9qcy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDK0k7QUFDckI7QUFDM0U7QUFDaUM7QUFDbkI7QUFFN0QsTUFBTXVCLGFBQWEsR0FBRyw0c0NBQTRzQztBQUNsdUMsTUFBTUMsbUJBQW1CLEdBQUdELGFBQWE7QUFFekMsTUFBTUUsWUFBWSxHQUFHLG8zQkFBbzNCO0FBQ3o0QixNQUFNQyxrQkFBa0IsR0FBR0QsWUFBWTtBQUV2QyxNQUFNRSxPQUFPLEdBQUcsTUFBTTtFQUNsQkMsV0FBV0EsQ0FBQ0MsT0FBTyxFQUFFO0lBQ2pCNUIscURBQWdCLENBQUMsSUFBSSxFQUFFNEIsT0FBTyxDQUFDO0lBQy9CLElBQUksQ0FBQ0MsU0FBUyxHQUFHM0IscURBQVcsQ0FBQyxJQUFJLEVBQUUsV0FBVyxFQUFFLENBQUMsQ0FBQztJQUNsRCxJQUFJLENBQUM0QixTQUFTLEdBQUc1QixxREFBVyxDQUFDLElBQUksRUFBRSxXQUFXLEVBQUUsQ0FBQyxDQUFDO0lBQ2xELElBQUksQ0FBQzZCLFFBQVEsR0FBRzdCLHFEQUFXLENBQUMsSUFBSSxFQUFFLFVBQVUsRUFBRSxDQUFDLENBQUM7SUFDaEQsSUFBSSxDQUFDOEIsYUFBYSxHQUFHLElBQUk7SUFDekIsSUFBSSxDQUFDQyxPQUFPLEdBQUlDLEVBQUUsSUFBSztNQUNuQixNQUFNQyxPQUFPLEdBQUdELEVBQUUsQ0FBQ0UsTUFBTTtNQUN6QixNQUFNQyxRQUFRLEdBQUcsSUFBSSxDQUFDQyxPQUFPO01BQzdCO01BQ0E7TUFDQTtNQUNBO01BQ0EsSUFBSUgsT0FBTyxDQUFDSSxPQUFPLEtBQUssYUFBYSxFQUFFO1FBQ25DO01BQ0o7TUFDQSxJQUFJLENBQUNDLEtBQUssR0FBR0wsT0FBTyxDQUFDSyxLQUFLO01BQzFCLElBQUlMLE9BQU8sS0FBS0UsUUFBUSxFQUFFO1FBQ3RCLElB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QUVBLENBQUEsRUFBRztJQUFFLE9BQU85RSxxREFBVSxDQUFDLElBQUksQ0FBQztFQUFFO0VBQ3BDLFdBQVc4SyxRQUFRQSxDQUFBLEVBQUc7SUFBRSxPQUFPO01BQzNCLE9BQU8sRUFBRSxDQUFDLGNBQWM7SUFDNUIsQ0FBQztFQUFFO0FBQ1AsQ0FBQztBQUNEUSxhQUFhLENBQUNuRSxLQUFLLEdBQUc7RUFDbEI0RCxHQUFHLEVBQUVHLHlCQUF5QjtFQUM5QkYsRUFBRSxFQUFFSTtBQUNSLENBQUMiLCJzb3VyY2VzIjpbIi4vbm9kZV9tb2R1bGVzL0Bpb25pYy9jb3JlL2Rpc3QvZXNtL2lvbi1zZWdtZW50XzIuZW50cnkuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLyohXG4gKiAoQykgSW9uaWMgaHR0cDovL2lvbmljZnJhbWV3b3JrLmNvbSAtIE1JVCBMaWNlbnNlXG4gKi9cbmltcG9ydCB7IHIgYXMgcmVnaXN0ZXJJbnN0YW5jZSwgYyBhcyBjcmVhdGVFdmVudCwgdyBhcyB3cml0ZVRhc2ssIGgsIGUgYXMgSG9zdCwgZiBhcyBnZXRFbGVtZW50LCBpIGFzIGZvcmNlVXBkYXRlIH0gZnJvbSAnLi9pbmRleC01MjdiOWUzNC5qcyc7XG5pbXBvcnQgeyByIGFzIHJhZiwgYSBhcyBhZGRFdmVudExpc3RlbmVyLCBiIGFzIHJlbW92ZUV2ZW50TGlzdGVuZXIsIGggYXMgaW5oZXJpdEF0dHJpYnV0ZXMgfSBmcm9tICcuL2hlbHBlcnMtNzhlZmVlYzMuanMnO1xuaW1wb3J0IHsgaSBhcyBpc1JUTCB9IGZyb20gJy4vZGlyLWJhYmVhYmViLmpzJztcbmltcG9ydCB7IGMgYXMgY3JlYXRlQ29sb3JDbGFzc2VzLCBoIGFzIGhvc3RDb250ZXh0IH0gZnJvbSAnLi90aGVtZS0wMWYzZjI5Yy5qcyc7XG5pbXBvcnQgeyBiIGFzIGdldElvbk1vZGUgfSBmcm9tICcuL2lvbmljLWdsb2JhbC1jYTg2Y2YzMi5qcyc7XG5cbmNvbnN0IHNlZ21lbnRJb3NDc3MgPSBcIjpob3N0ey0tcmlwcGxlLWNvbG9yOmN1cnJlbnRDb2xvcjstbW96LW9zeC1mb250LXNtb290aGluZzpncmF5c2NhbGU7LXdlYmtpdC1mb250LXNtb290aGluZzphbnRpYWxpYXNlZDtkaXNwbGF5OmdyaWQ7Z3JpZC1hdXRvLWNvbHVtbnM6MWZyO3Bvc2l0aW9uOnJlbGF0aXZlOy1tcy1mbGV4LWFsaWduOnN0cmV0Y2g7YWxpZ24taXRlbXM6c3RyZXRjaDstbXMtZmxleC1wYWNrOmNlbnRlcjtqdXN0aWZ5LWNvbnRlbnQ6Y2VudGVyO3dpZHRoOjEwMCU7YmFja2dyb3VuZDp2YXIoLS1iYWNrZ3JvdW5kKTtmb250LWZhbWlseTp2YXIoLS1pb24tZm9udC1mYW1pbHksIGluaGVyaXQpO3RleHQtYWxpZ246Y2VudGVyO2NvbnRhaW46cGFpbnQ7LXdlYmtpdC11c2VyLXNlbGVjdDpub25lOy1tb3otdXNlci1zZWxlY3Q6bm9uZTstbXMtdXNlci1zZWxlY3Q6bm9uZTt1c2VyLXNlbGVjdDpub25lfTpob3N0KC5zZWdtZW50LXNjcm9sbGFibGUpey1tcy1mbGV4LXBhY2s6c3RhcnQ7anVzdGlmeS1jb250ZW50OnN0YXJ0O3dpZHRoOmF1dG87b3ZlcmZsb3cteDphdXRvO2dyaWQtYXV0by1jb2x1bW5zOm1pbm1heCgtd2Via2l0LW1pbi1jb250ZW50LCAxZnIpO2dyaWQtYXV0by1jb2x1bW5zOm1pbm1heChtaW4tY29udGVudCwgMWZyKX06aG9zdCguc2VnbWVudC1zY3JvbGxhYmxlOjotd2Via2l0LXNjcm9sbGJhcil7ZGlzcGxheTpub25lfTpob3N0ey0tYmFja2dyb3VuZDpyZ2JhKHZhcigtLWlvbi10ZXh0LWNvbG9yLXJnYiwgMCwgMCwgMCksIDAuMDY1KTtib3JkZXItcmFkaXVzOjhweDtvdmVyZmxvdzpoaWRkZW47ei1pbmRleDowfTpob3N0KC5pb24tY29sb3Ipe2JhY2tncm91bmQ6cmdiYSh2YXIoLS1pb24tY29sb3ItYmFzZS1yZ2IpLCAwLjA2NSl9Omhvc3QoLmluLXRvb2xiYXIpey13ZWJraXQtbWFyZ2luLXN0YXJ0OmF1dG87bWFyZ2luLWlubGluZS1zdGFydDphdXRvOy13ZWJraXQtbWFyZ2luLWVuZDphdXRvO21hcmdpbi1pbmxpbmUtZW5kOmF1dG87bWFyZ2luLXRvcDowO21hcmdpbi1ib3R0b206MDt3aWR0aDphdXRvfTpob3N0KC5pbi10b29sYmFyOm5vdCguaW9uLWNvbG9yKSl7YmFja2dyb3VuZDp2YXIoLS1pb24tdG9vbGJhci1zZWdtZW50LWJhY2tncm91bmQsIHZhcigtLWJhY2tncm91bmQpKX06aG9zdCguaW4tdG9vbGJhci1jb2xvcjpub3QoLmlvbi1jb2xvcikpe2JhY2tncm91bmQ6cmdiYSh2YXIoLS1pb24tY29sb3ItY29udHJhc3QtcmdiKSwgMC4xMSl9XCI7XG5jb25zdCBJb25TZWdtZW50SW9zU3R5bGUwID0gc2VnbWVudElvc0NzcztcblxuY29uc3Qgc2VnbWVudE1kQ3NzID0gXCI6aG9zdHstLXJpcHBsZS1jb2xvcjpjdXJyZW50Q29sb3I7LW1vei1vc3gtZm9udC1zbW9vdGhpbmc6Z3JheXNjYWxlOy13ZWJraXQtZm9udC1zbW9vdGhpbmc6YW50aWFsaWFzZWQ7ZGlzcGxheTpncmlkO2dyaWQtYXV0by1jb2x1bW5zOjFmcjtwb3NpdGlvbjpyZWxhdGl2ZTstbXMtZmxleC1hbGlnbjpzdHJldGNoO2FsaWduLWl0ZW1zOnN0cmV0Y2g7LW1zLWZsZXgtcGFjazpjZW50ZXI7anVzdGlmeS1jb250ZW50OmNlbnRlcjt3aWR0aDoxMDAlO2JhY2tncm91bmQ6dmFyKC0tYmFja2dyb3VuZCk7Zm9udC1mYW1pbHk6dmFyKC0taW9uLWZvbnQtZmFtaWx5LCBpbmhlcml0KTt0ZXh0LWFsaWduOmNlbnRlcjtjb250YWluOnBhaW50Oy13ZWJraXQtdXNlci1zZWxlY3Q6bm9uZTstbW96LXVzZXItc2VsZWN0Om5vbmU7LW1zLXVzZXItc2VsZWN0Om5vbmU7dXNlci1zZWxlY3Q6bm9uZX06aG9zdCguc2VnbWVudC1zY3JvbGxhYmxlKXstbXMtZmxleC1wYWNrOnN0YXJ0O2p1c3RpZnktY29udGVudDpzdGFydDt3aWR0aDphdXRvO292ZXJmbG93LXg6YXV0bztncmlkLWF1dG8tY29sdW1uczptaW5tYXgoLXdlYmtpdC1taW4tY29udGVudCwgMWZyKTtncmlkLWF1dG8tY29sdW1uczptaW5tYXgobWluLWNvbnRlbnQsIDFmcil9Omhvc3QoLnNlZ21lbnQtc2Nyb2xsYWJsZTo6LXdlYmtpdC1zY3JvbGxiYXIpe2Rpc3BsYXk6bm9uZX06aG9zdHstLWJhY2tncm91bmQ6dHJhbnNwYXJlbnQ7Z3JpZC1hdXRvLWNvbHVtbnM6bWlubWF4KGF1dG8sIDM2MHB4KX06aG9zdCguaW4tdG9vbGJhcil7bWluLWhlaWdodDp2YXIoLS1taW4taGVpZ2h0KX06aG9zdCguc2VnbWVudC1zY3JvbGxhYmxlKSA6OnNsb3R0ZWQoaW9uLXNlZ21lbnQtYnV0dG9uKXttaW4td2lkdGg6YXV0b31cIjtcbmNvbnN0IElvblNlZ21lbnRNZFN0eWxlMCA9IHNlZ21lbnRNZENzcztcblxuY29uc3QgU2VnbWVudCA9IGNsYXNzIHtcbiAgICBjb25zdHJ1Y3Rvcihob3N0UmVmKSB7XG4gICAgICAgIHJlZ2lzdGVySW5zdGFuY2UodGhpcywgaG9zdFJlZik7XG4gICAgICAgIHRoaXMuaW9uQ2hhbmdlID0gY3JlYXRlRXZlbnQodGhpcywgXCJpb25DaGFuZ2VcIiwgNyk7XG4gICAgICAgIHRoaXMuaW9uU2VsZWN0ID0gY3JlYXRlRXZlbnQodGhpcywgXCJpb25TZWxlY3RcIiwgNyk7XG4gICAgICAgIHRoaXMuaW9uU3R5bGUgPSBjcmVhdGVFdmVudCh0aGlzLCBcImlvblN0eWxlXCIsIDcpO1xuICAgICAgICB0aGlzLnNlZ21lbnRWaWV3RWwgPSBudWxsO1xuICAgICAgICB0aGlzLm9uQ2xpY2sgPSAoZXYpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGN1cnJlbnQgPSBldi50YXJnZXQ7XG4gICAgICAgICAgICBjb25zdCBwcmV2aW91cyA9IHRoaXMuY2hlY2tlZDtcbiAgICAgICAgICAgIC8vIElmIHRoZSBjdXJyZW50IGVsZW1lbnQgaXMgYSBzZWdtZW50IHRoZW4gdGhhdCBtZWFuc1xuICAgICAgICAgICAgLy8gdGhlIHVzZXIgdHJpZWQgdG8gc3dpcGUgdG8gYSBzZWdtZW50IGJ1dHRvbiBhbmRcbiAgICAgICAgICAgIC8vIGNsaWNrIGEgc2VnbWVudCBidXR0b24gYXQgdGhlIHNhbWUgdGltZSBzbyB3ZSBzaG91bGRcbiAgICAgICAgICAgIC8vIG5vdCB1cGRhdGUgdGhlIGNoZWNrZWQgc2VnbWVudCBidXR0b25cbiAgICAgICAgICAgIGlmIChjdXJyZW50LnRhZ05hbWUgPT09ICdJT04tU0VHTUVOVCcpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLnZhbHVlID0gY3VycmVudC52YWx1ZTtcbiAgICAgICAgICAgIGlmIChjdXJyZW50ICE9PSBwcmV2aW91cykge1xuICAgICAgICAgICAgICAgIHRoaXMuZW1pdFZhbHVlQ2hhbmdlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodGhpcy5zZWdtZW50Vmlld0VsKSB7XG4gICAgICAgICAgICAgICAgdGhpcy51cGRhdGVTZWdtZW50VmlldygpO1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLnNjcm9sbGFibGUgJiYgcHJldmlvdXMpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jaGVja0J1dHRvbihwcmV2aW91cywgY3VycmVudCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAodGhpcy5zY3JvbGxhYmxlIHx8ICF0aGlzLnN3aXBlR2VzdHVyZSkge1xuICAgICAgICAgICAgICAgIGlmIChwcmV2aW91cykge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmNoZWNrQnV0dG9uKHByZXZpb3VzLCBjdXJyZW50KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2V0Q2hlY2tlZENsYXNzZXMoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMub25TbG90dGVkSXRlbXNDaGFuZ2UgPSAoKSA9PiB7XG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIFdoZW4gdGhlIHNsb3R0ZWQgc2VnbWVudCBidXR0b25zIGNoYW5nZSB3ZSBuZWVkIHRvXG4gICAgICAgICAgICAgKiBlbnN1cmUgdGhhdCB0aGUgbmV3IHNlZ21lbnQgYnV0dG9ucyBhcmUgY2hlY2tlZCBpZlxuICAgICAgICAgICAgICogdGhlIHZhbHVlIG1hdGNoZXMgdGhlIHNlZ21lbnQgYnV0dG9uIHZhbHVlLlxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICB0aGlzLnZhbHVlQ2hhbmdlZCh0aGlzLnZhbHVlKTtcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5nZXRTZWdtZW50QnV0dG9uID0gKHNlbGVjdG9yKSA9PiB7XG4gICAgICAgICAgICB2YXIgX2EsIF9iO1xuICAgICAgICAgICAgY29uc3QgYnV0dG9ucyA9IHRoaXMuZ2V0QnV0dG9ucygpLmZpbHRlcigoYnV0dG9uKSA9PiAhYnV0dG9uLmRpc2FibGVkKTtcbiAgICAgICAgICAgIGNvbnN0IGN1cnJJbmRleCA9IGJ1dHRvbnMuZmluZEluZGV4KChidXR0b24pID0+IGJ1dHRvbiA9PT0gZG9jdW1lbnQuYWN0aXZlRWxlbWVudCk7XG4gICAgICAgICAgICBzd2l0Y2ggKHNlbGVjdG9yKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAnZmlyc3QnOlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gYnV0dG9uc1swXTtcbiAgICAgICAgICAgICAgICBjYXNlICdsYXN0JzpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGJ1dHRvbnNbYnV0dG9ucy5sZW5ndGggLSAxXTtcbiAgICAgICAgICAgICAgICBjYXNlICduZXh0JzpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIChfYSA9IGJ1dHRvbnNbY3VyckluZGV4ICsgMV0pICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6IGJ1dHRvbnNbMF07XG4gICAgICAgICAgICAgICAgY2FzZSAncHJldmlvdXMnOlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gKF9iID0gYnV0dG9uc1tjdXJySW5kZXggLSAxXSkgIT09IG51bGwgJiYgX2IgIT09IHZvaWQgMCA/IF9iIDogYnV0dG9uc1tidXR0b25zLmxlbmd0aCAtIDFdO1xuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICB0aGlzLmFjdGl2YXRlZCA9IGZhbHNlO1xuICAgICAgICB0aGlzLmNvbG9yID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLmRpc2FibGVkID0gZmFsc2U7XG4gICAgICAgIHRoaXMuc2Nyb2xsYWJsZSA9IGZhbHNlO1xuICAgICAgICB0aGlzLnN3aXBlR2VzdHVyZSA9IHRydWU7XG4gICAgICAgIHRoaXMudmFsdWUgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMuc2VsZWN0T25Gb2N1cyA9IGZhbHNlO1xuICAgIH1cbiAgICBjb2xvckNoYW5nZWQodmFsdWUsIG9sZFZhbHVlKSB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBJZiBjb2xvciBpcyBzZXQgYWZ0ZXIgbm90IGhhdmluZ1xuICAgICAgICAgKiBwcmV2aW91c2x5IGJlZW4gc2V0IChvciB2aWNlIHZlcnNhKSxcbiAgICAgICAgICogd2UgbmVlZCB0byBlbWl0IHN0eWxlIHNvIHRoZSBzZWdtZW50LWJ1dHRvbnNcbiAgICAgICAgICogY2FuIGFwcGx5IHRoZWlyIGNvbG9yIGNsYXNzZXMgcHJvcGVybHkuXG4gICAgICAgICAqL1xuICAgICAgICBpZiAoKG9sZFZhbHVlID09PSB1bmRlZmluZWQgJiYgdmFsdWUgIT09IHVuZGVmaW5lZCkgfHwgKG9sZFZhbHVlICE9PSB1bmRlZmluZWQgJiYgdmFsdWUgPT09IHVuZGVmaW5lZCkpIHtcbiAgICAgICAgICAgIHRoaXMuZW1pdFN0eWxlKCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgc3dpcGVHZXN0dXJlQ2hhbmdlZCgpIHtcbiAgICAgICAgdGhpcy5nZXN0dXJlQ2hhbmdlZCgpO1xuICAgIH1cbiAgICB2YWx1ZUNoYW5nZWQodmFsdWUsIG9sZFZhbHVlKSB7XG4gICAgICAgIC8vIEZvcmNlIGEgdmFsdWUgdG8gZXhpc3QgaWYgd2UncmUgdXNpbmcgYSBzZWdtZW50IHZpZXdcbiAgICAgICAgaWYgKHRoaXMuc2VnbWVudFZpZXdFbCAmJiB2YWx1ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aGlzLnZhbHVlID0gdGhpcy5nZXRCdXR0b25zKClbMF0udmFsdWU7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG9sZFZhbHVlICE9PSB1bmRlZmluZWQgJiYgdmFsdWUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgY29uc3QgYnV0dG9ucyA9IHRoaXMuZ2V0QnV0dG9ucygpO1xuICAgICAgICAgICAgY29uc3QgcHJldmlvdXMgPSBidXR0b25zLmZpbmQoKGJ1dHRvbikgPT4gYnV0dG9uLnZhbHVlID09PSBvbGRWYWx1ZSk7XG4gICAgICAgICAgICBjb25zdCBjdXJyZW50ID0gYnV0dG9ucy5maW5kKChidXR0b24pID0+IGJ1dHRvbi52YWx1ZSA9PT0gdmFsdWUpO1xuICAgICAgICAgICAgaWYgKHByZXZpb3VzICYmIGN1cnJlbnQpIHtcbiAgICAgICAgICAgICAgICBpZiAoIXRoaXMuc2VnbWVudFZpZXdFbCkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmNoZWNrQnV0dG9uKHByZXZpb3VzLCBjdXJyZW50KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAodGhpcy50cmlnZ2VyU2Nyb2xsT25WYWx1ZUNoYW5nZSAhPT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy51cGRhdGVTZWdtZW50VmlldygpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICh2YWx1ZSAhPT0gdW5kZWZpbmVkICYmIG9sZFZhbHVlID09PSB1bmRlZmluZWQgJiYgdGhpcy5zZWdtZW50Vmlld0VsKSB7XG4gICAgICAgICAgICB0aGlzLnVwZGF0ZVNlZ21lbnRWaWV3KCk7XG4gICAgICAgIH1cbiAgICAgICAgLyoqXG4gICAgICAgICAqIGBpb25TZWxlY3RgIGlzIGVtaXR0ZWQgZXZlcnkgdGltZSB0aGUgdmFsdWUgY2hhbmdlcyAoaW50ZXJuYWwgb3IgZXh0ZXJuYWwgY2hhbmdlcykuXG4gICAgICAgICAqIFVzZWQgYnkgYGlvbi1zZWdtZW50LWJ1dHRvbmAgdG8gZGV0ZXJtaW5lIGlmIHRoZSBidXR0b24gc2hvdWxkIGJlIGNoZWNrZWQuXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLmlvblNlbGVjdC5lbWl0KHsgdmFsdWUgfSk7XG4gICAgICAgIC8vIFRoZSBzY3JvbGwgbGlzdGVuZXIgc2hvdWxkIGhhbmRsZSBzY3JvbGxpbmcgdGhlIGFjdGl2ZSBidXR0b24gaW50byB2aWV3IGFzIG5lZWRlZFxuICAgICAgICBpZiAoIXRoaXMuc2VnbWVudFZpZXdFbCkge1xuICAgICAgICAgICAgdGhpcy5zY3JvbGxBY3RpdmVCdXR0b25JbnRvVmlldygpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMudHJpZ2dlclNjcm9sbE9uVmFsdWVDaGFuZ2UgPSB1bmRlZmluZWQ7XG4gICAgfVxuICAgIGRpc2FibGVkQ2hhbmdlZCgpIHtcbiAgICAgICAgdGhpcy5nZXN0dXJlQ2hhbmdlZCgpO1xuICAgICAgICBpZiAoIXRoaXMuc2VnbWVudFZpZXdFbCkge1xuICAgICAgICAgICAgY29uc3QgYnV0dG9ucyA9IHRoaXMuZ2V0QnV0dG9ucygpO1xuICAgICAgICAgICAgZm9yIChjb25zdCBidXR0b24gb2YgYnV0dG9ucykge1xuICAgICAgICAgICAgICAgIGJ1dHRvbi5kaXNhYmxlZCA9IHRoaXMuZGlzYWJsZWQ7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLnNlZ21lbnRWaWV3RWwuZGlzYWJsZWQgPSB0aGlzLmRpc2FibGVkO1xuICAgICAgICB9XG4gICAgfVxuICAgIGdlc3R1cmVDaGFuZ2VkKCkge1xuICAgICAgICBpZiAodGhpcy5nZXN0dXJlKSB7XG4gICAgICAgICAgICB0aGlzLmdlc3R1cmUuZW5hYmxlKCF0aGlzLnNjcm9sbGFibGUgJiYgIXRoaXMuZGlzYWJsZWQgJiYgdGhpcy5zd2lwZUdlc3R1cmUpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGNvbm5lY3RlZENhbGxiYWNrKCkge1xuICAgICAgICB0aGlzLmVtaXRTdHlsZSgpO1xuICAgICAgICB0aGlzLnNlZ21lbnRWaWV3RWwgPSB0aGlzLmdldFNlZ21lbnRWaWV3KCk7XG4gICAgfVxuICAgIGRpc2Nvbm5lY3RlZENhbGxiYWNrKCkge1xuICAgICAgICB0aGlzLnNlZ21lbnRWaWV3RWwgPSBudWxsO1xuICAgIH1cbiAgICBjb21wb25lbnRXaWxsTG9hZCgpIHtcbiAgICAgICAgdGhpcy5lbWl0U3R5bGUoKTtcbiAgICB9XG4gICAgYXN5bmMgY29tcG9uZW50RGlkTG9hZCgpIHtcbiAgICAgICAgdGhpcy5zZWdtZW50Vmlld0VsID0gdGhpcy5nZXRTZWdtZW50VmlldygpO1xuICAgICAgICB0aGlzLnNldENoZWNrZWRDbGFzc2VzKCk7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBXZSBuZWVkIHRvIHdhaXQgZm9yIHRoZSBidXR0b25zIHRvIGFsbCBiZSByZW5kZXJlZFxuICAgICAgICAgKiBiZWZvcmUgd2UgY2FuIHNjcm9sbC5cbiAgICAgICAgICovXG4gICAgICAgIHJhZigoKSA9PiB7XG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIFdoZW4gdGhlIHNlZ21lbnQgbG9hZHMgZm9yIHRoZSBmaXJzdFxuICAgICAgICAgICAgICogdGltZSB3ZSBqdXN0IHdhbnQgdG8gc25hcCB0aGUgYWN0aXZlIGJ1dHRvbiBpbnRvXG4gICAgICAgICAgICAgKiBwbGFjZSBpbnN0ZWFkIG9mIHNjcm9sbC4gU21vb3RoIHNjcm9sbGluZyBzaG91bGQgb25seVxuICAgICAgICAgICAgICogaGFwcGVuIHdoZW4gdGhlIHVzZXIgaW50ZXJhY3RzIHdpdGggdGhlIHNlZ21lbnQuXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIHRoaXMuc2Nyb2xsQWN0aXZlQnV0dG9uSW50b1ZpZXcoZmFsc2UpO1xuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5nZXN0dXJlID0gKGF3YWl0IGltcG9ydCgnLi9pbmRleC0zOTc4MjY0Mi5qcycpKS5jcmVhdGVHZXN0dXJlKHtcbiAgICAgICAgICAgIGVsOiB0aGlzLmVsLFxuICAgICAgICAgICAgZ2VzdHVyZU5hbWU6ICdzZWdtZW50JyxcbiAgICAgICAgICAgIGdlc3R1cmVQcmlvcml0eTogMTAwLFxuICAgICAgICAgICAgdGhyZXNob2xkOiAwLFxuICAgICAgICAgICAgcGFzc2l2ZTogZmFsc2UsXG4gICAgICAgICAgICBvblN0YXJ0OiAoZXYpID0+IHRoaXMub25TdGFydChldiksXG4gICAgICAgICAgICBvbk1vdmU6IChldikgPT4gdGhpcy5vbk1vdmUoZXYpLFxuICAgICAgICAgICAgb25FbmQ6IChldikgPT4gdGhpcy5vbkVuZChldiksXG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLmdlc3R1cmVDaGFuZ2VkKCk7XG4gICAgICAgIGlmICh0aGlzLmRpc2FibGVkKSB7XG4gICAgICAgICAgICB0aGlzLmRpc2FibGVkQ2hhbmdlZCgpO1xuICAgICAgICB9XG4gICAgICAgIC8vIFVwZGF0ZSBzZWdtZW50IHZpZXcgYmFzZWQgb24gdGhlIGluaXRpYWwgdmFsdWUsXG4gICAgICAgIC8vIGJ1dCBkbyBub3QgYW5pbWF0ZSB0aGUgc2Nyb2xsXG4gICAgICAgIHRoaXMudXBkYXRlU2VnbWVudFZpZXcoZmFsc2UpO1xuICAgIH1cbiAgICBvblN0YXJ0KGRldGFpbCkge1xuICAgICAgICB0aGlzLnZhbHVlQmVmb3JlR2VzdHVyZSA9IHRoaXMudmFsdWU7XG4gICAgICAgIHRoaXMuYWN0aXZhdGUoZGV0YWlsKTtcbiAgICB9XG4gICAgb25Nb3ZlKGRldGFpbCkge1xuICAgICAgICB0aGlzLnNldE5leHRJbmRleChkZXRhaWwpO1xuICAgIH1cbiAgICBvbkVuZChkZXRhaWwpIHtcbiAgICAgICAgdGhpcy5zZXRBY3RpdmF0ZWQoZmFsc2UpO1xuICAgICAgICB0aGlzLnNldE5leHRJbmRleChkZXRhaWwsIHRydWUpO1xuICAgICAgICBkZXRhaWwuZXZlbnQuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKCk7XG4gICAgICAgIGNvbnN0IHZhbHVlID0gdGhpcy52YWx1ZTtcbiAgICAgICAgaWYgKHZhbHVlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLnZhbHVlQmVmb3JlR2VzdHVyZSAhPT0gdmFsdWUpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmVtaXRWYWx1ZUNoYW5nZSgpO1xuICAgICAgICAgICAgICAgIHRoaXMudXBkYXRlU2VnbWVudFZpZXcoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB0aGlzLnZhbHVlQmVmb3JlR2VzdHVyZSA9IHVuZGVmaW5lZDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogRW1pdHMgYW4gYGlvbkNoYW5nZWAgZXZlbnQuXG4gICAgICpcbiAgICAgKiBUaGlzIEFQSSBzaG91bGQgYmUgY2FsbGVkIGZvciB1c2VyIGNvbW1pdHRlZCBjaGFuZ2VzLlxuICAgICAqIFRoaXMgQVBJIHNob3VsZCBub3QgYmUgdXNlZCBmb3IgZXh0ZXJuYWwgdmFsdWUgY2hhbmdlcy5cbiAgICAgKi9cbiAgICBlbWl0VmFsdWVDaGFuZ2UoKSB7XG4gICAgICAgIGNvbnN0IHsgdmFsdWUgfSA9IHRoaXM7XG4gICAgICAgIHRoaXMuaW9uQ2hhbmdlLmVtaXQoeyB2YWx1ZSB9KTtcbiAgICB9XG4gICAgZ2V0QnV0dG9ucygpIHtcbiAgICAgICAgcmV0dXJuIEFycmF5LmZyb20odGhpcy5lbC5xdWVyeVNlbGVjdG9yQWxsKCdpb24tc2VnbWVudC1idXR0b24nKSk7XG4gICAgfVxuICAgIGdldCBjaGVja2VkKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5nZXRCdXR0b25zKCkuZmluZCgoYnV0dG9uKSA9PiBidXR0b24udmFsdWUgPT09IHRoaXMudmFsdWUpO1xuICAgIH1cbiAgICAvKlxuICAgICAqIEFjdGl2YXRlIGJvdGggdGhlIHNlZ21lbnQgYW5kIHRoZSBidXR0b25zXG4gICAgICogZHVlIHRvIGEgYnVnIHdpdGggOjpzbG90dGVkIGluIFNhZmFyaVxuICAgICAqL1xuICAgIHNldEFjdGl2YXRlZChhY3RpdmF0ZWQpIHtcbiAgICAgICAgY29uc3QgYnV0dG9ucyA9IHRoaXMuZ2V0QnV0dG9ucygpO1xuICAgICAgICBidXR0b25zLmZvckVhY2goKGJ1dHRvbikgPT4ge1xuICAgICAgICAgICAgYnV0dG9uLmNsYXNzTGlzdC50b2dnbGUoJ3NlZ21lbnQtYnV0dG9uLWFjdGl2YXRlZCcsIGFjdGl2YXRlZCk7XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLmFjdGl2YXRlZCA9IGFjdGl2YXRlZDtcbiAgICB9XG4gICAgYWN0aXZhdGUoZGV0YWlsKSB7XG4gICAgICAgIGNvbnN0IGNsaWNrZWQgPSBkZXRhaWwuZXZlbnQudGFyZ2V0O1xuICAgICAgICBjb25zdCBidXR0b25zID0gdGhpcy5nZXRCdXR0b25zKCk7XG4gICAgICAgIGNvbnN0IGNoZWNrZWQgPSBidXR0b25zLmZpbmQoKGJ1dHRvbikgPT4gYnV0dG9uLnZhbHVlID09PSB0aGlzLnZhbHVlKTtcbiAgICAgICAgLy8gTWFrZSBzdXJlIHdlIGFyZSBvbmx5IGNoZWNraW5nIGZvciBhY3RpdmF0aW9uIG9uIGEgc2VnbWVudCBidXR0b25cbiAgICAgICAgLy8gc2luY2UgZGlzYWJsZWQgYnV0dG9ucyB3aWxsIGdldCB0aGUgY2xpY2sgb24gdGhlIHNlZ21lbnRcbiAgICAgICAgaWYgKGNsaWNrZWQudGFnTmFtZSAhPT0gJ0lPTi1TRUdNRU5ULUJVVFRPTicpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICAvLyBJZiB0aGVyZSBhcmUgbm8gY2hlY2tlZCBidXR0b25zLCBzZXQgdGhlIGN1cnJlbnQgYnV0dG9uIHRvIGNoZWNrZWRcbiAgICAgICAgaWYgKCFjaGVja2VkKSB7XG4gICAgICAgICAgICB0aGlzLnZhbHVlID0gY2xpY2tlZC52YWx1ZTtcbiAgICAgICAgICAgIHRoaXMuc2V0Q2hlY2tlZENsYXNzZXMoKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBJZiB0aGUgZ2VzdHVyZSBiZWdhbiBvbiB0aGUgY2xpY2tlZCBidXR0b24gd2l0aCB0aGUgaW5kaWNhdG9yXG4gICAgICAgIC8vIHRoZW4gd2Ugc2hvdWxkIGFjdGl2YXRlIHRoZSBpbmRpY2F0b3JcbiAgICAgICAgaWYgKHRoaXMudmFsdWUgPT09IGNsaWNrZWQudmFsdWUpIHtcbiAgICAgICAgICAgIHRoaXMuc2V0QWN0aXZhdGVkKHRydWUpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGdldEluZGljYXRvcihidXR0b24pIHtcbiAgICAgICAgY29uc3Qgcm9vdCA9IGJ1dHRvbi5zaGFkb3dSb290IHx8IGJ1dHRvbjtcbiAgICAgICAgcmV0dXJuIHJvb3QucXVlcnlTZWxlY3RvcignLnNlZ21lbnQtYnV0dG9uLWluZGljYXRvcicpO1xuICAgIH1cbiAgICBjaGVja0J1dHRvbihwcmV2aW91cywgY3VycmVudCkge1xuICAgICAgICBjb25zdCBwcmV2aW91c0luZGljYXRvciA9IHRoaXMuZ2V0SW5kaWNhdG9yKHByZXZpb3VzKTtcbiAgICAgICAgY29uc3QgY3VycmVudEluZGljYXRvciA9IHRoaXMuZ2V0SW5kaWNhdG9yKGN1cnJlbnQpO1xuICAgICAgICBpZiAocHJldmlvdXNJbmRpY2F0b3IgPT09IG51bGwgfHwgY3VycmVudEluZGljYXRvciA9PT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHByZXZpb3VzQ2xpZW50UmVjdCA9IHByZXZpb3VzSW5kaWNhdG9yLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgICAgICBjb25zdCBjdXJyZW50Q2xpZW50UmVjdCA9IGN1cnJlbnRJbmRpY2F0b3IuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgICAgIGNvbnN0IHdpZHRoRGVsdGEgPSBwcmV2aW91c0NsaWVudFJlY3Qud2lkdGggLyBjdXJyZW50Q2xpZW50UmVjdC53aWR0aDtcbiAgICAgICAgY29uc3QgeFBvc2l0aW9uID0gcHJldmlvdXNDbGllbnRSZWN0LmxlZnQgLSBjdXJyZW50Q2xpZW50UmVjdC5sZWZ0O1xuICAgICAgICAvLyBTY2FsZSB0aGUgaW5kaWNhdG9yIHdpZHRoIHRvIG1hdGNoIHRoZSBwcmV2aW91cyBpbmRpY2F0b3Igd2lkdGhcbiAgICAgICAgLy8gYW5kIHRyYW5zbGF0ZSBpdCBvbiB0b3Agb2YgdGhlIHByZXZpb3VzIGluZGljYXRvclxuICAgICAgICBjb25zdCB0cmFuc2Zvcm0gPSBgdHJhbnNsYXRlM2QoJHt4UG9zaXRpb259cHgsIDAsIDApIHNjYWxlWCgke3dpZHRoRGVsdGF9KWA7XG4gICAgICAgIHdyaXRlVGFzaygoKSA9PiB7XG4gICAgICAgICAgICAvLyBSZW1vdmUgdGhlIHRyYW5zaXRpb24gYmVmb3JlIHBvc2l0aW9uaW5nIG9uIHRvcCBvZiB0aGUgcHJldmlvdXMgaW5kaWNhdG9yXG4gICAgICAgICAgICBjdXJyZW50SW5kaWNhdG9yLmNsYXNzTGlzdC5yZW1vdmUoJ3NlZ21lbnQtYnV0dG9uLWluZGljYXRvci1hbmltYXRlZCcpO1xuICAgICAgICAgICAgY3VycmVudEluZGljYXRvci5zdHlsZS5zZXRQcm9wZXJ0eSgndHJhbnNmb3JtJywgdHJhbnNmb3JtKTtcbiAgICAgICAgICAgIC8vIEZvcmNlIGEgcmVwYWludCB0byBlbnN1cmUgdGhlIHRyYW5zZm9ybSBoYXBwZW5zXG4gICAgICAgICAgICBjdXJyZW50SW5kaWNhdG9yLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgICAgICAgICAgLy8gQWRkIHRoZSB0cmFuc2l0aW9uIHRvIG1vdmUgdGhlIGluZGljYXRvciBpbnRvIHBsYWNlXG4gICAgICAgICAgICBjdXJyZW50SW5kaWNhdG9yLmNsYXNzTGlzdC5hZGQoJ3NlZ21lbnQtYnV0dG9uLWluZGljYXRvci1hbmltYXRlZCcpO1xuICAgICAgICAgICAgLy8gUmVtb3ZlIHRoZSB0cmFuc2Zvcm0gdG8gc2xpZGUgdGhlIGluZGljYXRvciBiYWNrIHRvIHRoZSBidXR0b24gY2xpY2tlZFxuICAgICAgICAgICAgY3VycmVudEluZGljYXRvci5zdHlsZS5zZXRQcm9wZXJ0eSgndHJhbnNmb3JtJywgJycpO1xuICAgICAgICAgICAgdGhpcy5zY3JvbGxBY3RpdmVCdXR0b25JbnRvVmlldyh0cnVlKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMudmFsdWUgPSBjdXJyZW50LnZhbHVlO1xuICAgICAgICB0aGlzLnNldENoZWNrZWRDbGFzc2VzKCk7XG4gICAgfVxuICAgIHNldENoZWNrZWRDbGFzc2VzKCkge1xuICAgICAgICBjb25zdCBidXR0b25zID0gdGhpcy5nZXRCdXR0b25zKCk7XG4gICAgICAgIGNvbnN0IGluZGV4ID0gYnV0dG9ucy5maW5kSW5kZXgoKGJ1dHRvbikgPT4gYnV0dG9uLnZhbHVlID09PSB0aGlzLnZhbHVlKTtcbiAgICAgICAgY29uc3QgbmV4dCA9IGluZGV4ICsgMTtcbiAgICAgICAgZm9yIChjb25zdCBidXR0b24gb2YgYnV0dG9ucykge1xuICAgICAgICAgICAgYnV0dG9uLmNsYXNzTGlzdC5yZW1vdmUoJ3NlZ21lbnQtYnV0dG9uLWFmdGVyLWNoZWNrZWQnKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobmV4dCA8IGJ1dHRvbnMubGVuZ3RoKSB7XG4gICAgICAgICAgICBidXR0b25zW25leHRdLmNsYXNzTGlzdC5hZGQoJ3NlZ21lbnQtYnV0dG9uLWFmdGVyLWNoZWNrZWQnKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBnZXRTZWdtZW50VmlldygpIHtcbiAgICAgICAgY29uc3QgYnV0dG9ucyA9IHRoaXMuZ2V0QnV0dG9ucygpO1xuICAgICAgICAvLyBHZXQgdGhlIGZpcnN0IGJ1dHRvbiB3aXRoIGEgY29udGVudElkXG4gICAgICAgIGNvbnN0IGZpcnN0Q29udGVudElkID0gYnV0dG9ucy5maW5kKChidXR0b24pID0+IGJ1dHRvbi5jb250ZW50SWQpO1xuICAgICAgICAvLyBHZXQgdGhlIHNlZ21lbnQgY29udGVudCB3aXRoIGFuIGlkIG1hdGNoaW5nIHRoZSBidXR0b24ncyBjb250ZW50SWRcbiAgICAgICAgY29uc3Qgc2VnbWVudENvbnRlbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGBpb24tc2VnbWVudC1jb250ZW50W2lkPVwiJHtmaXJzdENvbnRlbnRJZCA9PT0gbnVsbCB8fCBmaXJzdENvbnRlbnRJZCA9PT0gdm9pZCAwID8gdm9pZCAwIDogZmlyc3RDb250ZW50SWQuY29udGVudElkfVwiXWApO1xuICAgICAgICAvLyBSZXR1cm4gdGhlIHNlZ21lbnQgdmlldyBmb3IgdGhhdCBtYXRjaGluZyBzZWdtZW50IGNvbnRlbnRcbiAgICAgICAgcmV0dXJuIHNlZ21lbnRDb250ZW50ID09PSBudWxsIHx8IHNlZ21lbnRDb250ZW50ID09PSB2b2lkIDAgPyB2b2lkIDAgOiBzZWdtZW50Q29udGVudC5jbG9zZXN0KCdpb24tc2VnbWVudC12aWV3Jyk7XG4gICAgfVxuICAgIGhhbmRsZVNlZ21lbnRWaWV3U2Nyb2xsKGV2KSB7XG4gICAgICAgIGNvbnN0IHsgc2Nyb2xsUmF0aW8sIGlzTWFudWFsU2Nyb2xsIH0gPSBldi5kZXRhaWw7XG4gICAgICAgIGlmICghaXNNYW51YWxTY3JvbGwpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBkaXNwYXRjaGVkRnJvbSA9IGV2LnRhcmdldDtcbiAgICAgICAgY29uc3Qgc2VnbWVudFZpZXdFbCA9IHRoaXMuc2VnbWVudFZpZXdFbDtcbiAgICAgICAgY29uc3Qgc2VnbWVudEVsID0gdGhpcy5lbDtcbiAgICAgICAgLy8gT25seSB1cGRhdGUgdGhlIGluZGljYXRvciBpZiB0aGUgZXZlbnQgd2FzIGRpc3BhdGNoZWQgZnJvbSB0aGUgY29ycmVjdCBzZWdtZW50IHZpZXdcbiAgICAgICAgaWYgKGV2LmNvbXBvc2VkUGF0aCgpLmluY2x1ZGVzKHNlZ21lbnRWaWV3RWwpIHx8IChkaXNwYXRjaGVkRnJvbSA9PT0gbnVsbCB8fCBkaXNwYXRjaGVkRnJvbSA9PT0gdm9pZCAwID8gdm9pZCAwIDogZGlzcGF0Y2hlZEZyb20uY29udGFpbnMoc2VnbWVudEVsKSkpIHtcbiAgICAgICAgICAgIGNvbnN0IGJ1dHRvbnMgPSB0aGlzLmdldEJ1dHRvbnMoKTtcbiAgICAgICAgICAgIC8vIElmIG5vIGJ1dHRvbnMgYXJlIGZvdW5kIG9yIHRoZXJlIGlzIG5vIHZhbHVlIHNldCB0aGVuIGRvIG5vdGhpbmdcbiAgICAgICAgICAgIGlmICghYnV0dG9ucy5sZW5ndGgpXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgY29uc3QgaW5kZXggPSBidXR0b25zLmZpbmRJbmRleCgoYnV0dG9uKSA9PiBidXR0b24udmFsdWUgPT09IHRoaXMudmFsdWUpO1xuICAgICAgICAgICAgY29uc3QgY3VycmVudCA9IGJ1dHRvbnNbaW5kZXhdO1xuICAgICAgICAgICAgY29uc3QgbmV4dEluZGV4ID0gTWF0aC5yb3VuZChzY3JvbGxSYXRpbyAqIChidXR0b25zLmxlbmd0aCAtIDEpKTtcbiAgICAgICAgICAgIGlmICh0aGlzLmxhc3ROZXh0SW5kZXggPT09IHVuZGVmaW5lZCB8fCB0aGlzLmxhc3ROZXh0SW5kZXggIT09IG5leHRJbmRleCkge1xuICAgICAgICAgICAgICAgIHRoaXMubGFzdE5leHRJbmRleCA9IG5leHRJbmRleDtcbiAgICAgICAgICAgICAgICB0aGlzLnRyaWdnZXJTY3JvbGxPblZhbHVlQ2hhbmdlID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgdGhpcy5jaGVja0J1dHRvbihjdXJyZW50LCBidXR0b25zW25leHRJbmRleF0pO1xuICAgICAgICAgICAgICAgIHRoaXMuZW1pdFZhbHVlQ2hhbmdlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogRmluZHMgdGhlIHJlbGF0ZWQgc2VnbWVudCB2aWV3IGFuZCBzZXRzIGl0cyBjdXJyZW50IGNvbnRlbnRcbiAgICAgKiBiYXNlZCBvbiB0aGUgc2VsZWN0ZWQgc2VnbWVudCBidXR0b24uIFRoaXMgbWV0aG9kXG4gICAgICogc2hvdWxkIGJlIGNhbGxlZCBvbiBpbml0aWFsIGxvYWQgb2YgdGhlIHNlZ21lbnQsXG4gICAgICogYWZ0ZXIgdGhlIGdlc3R1cmUgaXMgY29tcGxldGVkIChpZiBkcmFnZ2luZyBiZXR3ZWVuIHNlZ21lbnRzKVxuICAgICAqIGFuZCB3aGVuIGEgc2VnbWVudCBidXR0b24gaXMgY2xpY2tlZCBkaXJlY3RseS5cbiAgICAgKi9cbiAgICB1cGRhdGVTZWdtZW50VmlldyhzbW9vdGhTY3JvbGwgPSB0cnVlKSB7XG4gICAgICAgIGNvbnN0IGJ1dHRvbnMgPSB0aGlzLmdldEJ1dHRvbnMoKTtcbiAgICAgICAgY29uc3QgYnV0dG9uID0gYnV0dG9ucy5maW5kKChidG4pID0+IGJ0bi52YWx1ZSA9PT0gdGhpcy52YWx1ZSk7XG4gICAgICAgIC8vIElmIHRoZSBidXR0b24gZG9lcyBub3QgaGF2ZSBhIGNvbnRlbnRJZCB0aGVuIHRoZXJlIGlzXG4gICAgICAgIC8vIG5vIGFzc29jaWF0ZWQgc2VnbWVudCB2aWV3IHRvIHVwZGF0ZVxuICAgICAgICBpZiAoIShidXR0b24gPT09IG51bGwgfHwgYnV0dG9uID09PSB2b2lkIDAgPyB2b2lkIDAgOiBidXR0b24uY29udGVudElkKSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHNlZ21lbnRWaWV3ID0gdGhpcy5zZWdtZW50Vmlld0VsO1xuICAgICAgICBpZiAoc2VnbWVudFZpZXcpIHtcbiAgICAgICAgICAgIHNlZ21lbnRWaWV3LnNldENvbnRlbnQoYnV0dG9uLmNvbnRlbnRJZCwgc21vb3RoU2Nyb2xsKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBzY3JvbGxBY3RpdmVCdXR0b25JbnRvVmlldyhzbW9vdGhTY3JvbGwgPSB0cnVlKSB7XG4gICAgICAgIGNvbnN0IHsgc2Nyb2xsYWJsZSwgdmFsdWUsIGVsIH0gPSB0aGlzO1xuICAgICAgICBpZiAoc2Nyb2xsYWJsZSkge1xuICAgICAgICAgICAgY29uc3QgYnV0dG9ucyA9IHRoaXMuZ2V0QnV0dG9ucygpO1xuICAgICAgICAgICAgY29uc3QgYWN0aXZlQnV0dG9uID0gYnV0dG9ucy5maW5kKChidXR0b24pID0+IGJ1dHRvbi52YWx1ZSA9PT0gdmFsdWUpO1xuICAgICAgICAgICAgaWYgKGFjdGl2ZUJ1dHRvbiAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgY29uc3Qgc2Nyb2xsQ29udGFpbmVyQm94ID0gZWwuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgICAgICAgICAgICAgY29uc3QgYWN0aXZlQnV0dG9uQm94ID0gYWN0aXZlQnV0dG9uLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgICAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICAgICAqIFN1YnRyYWN0IHRoZSBhY3RpdmUgYnV0dG9uIHggcG9zaXRpb24gZnJvbSB0aGUgc2Nyb2xsXG4gICAgICAgICAgICAgICAgICogY29udGFpbmVyIHggcG9zaXRpb24uIFRoaXMgd2lsbCBnaXZlIHVzIHRoZSB4IHBvc2l0aW9uXG4gICAgICAgICAgICAgICAgICogb2YgdGhlIGFjdGl2ZSBidXR0b24gd2l0aGluIHRoZSBzY3JvbGwgY29udGFpbmVyLlxuICAgICAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgICAgIGNvbnN0IGFjdGl2ZUJ1dHRvbkxlZnQgPSBhY3RpdmVCdXR0b25Cb3gueCAtIHNjcm9sbENvbnRhaW5lckJveC54O1xuICAgICAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICAgICAqIElmIHdlIGp1c3QgdXNlZCBhY3RpdmVCdXR0b25MZWZ0LCB0aGVuIHRoZSBhY3RpdmUgYnV0dG9uXG4gICAgICAgICAgICAgICAgICogd291bGQgYmUgYWxpZ25lZCB3aXRoIHRoZSBsZWZ0IGVkZ2Ugb2YgdGhlIHNjcm9sbCBjb250YWluZXIuXG4gICAgICAgICAgICAgICAgICogSW5zdGVhZCwgd2Ugd2FudCB0aGUgc2VnbWVudCBidXR0b24gdG8gYmUgY2VudGVyZWQuIEFzIGEgcmVzdWx0LFxuICAgICAgICAgICAgICAgICAqIHdlIHN1YnRyYWN0IGhhbGYgb2YgdGhlIHNjcm9sbCBjb250YWluZXIgd2lkdGguIFRoaXMgd2lsbCBwb3NpdGlvblxuICAgICAgICAgICAgICAgICAqIHRoZSBsZWZ0IGVkZ2Ugb2YgdGhlIGFjdGl2ZSBidXR0b24gYXQgdGhlIG1pZHBvaW50IG9mIHRoZSBzY3JvbGwgY29udGFpbmVyLlxuICAgICAgICAgICAgICAgICAqIFdlIHRoZW4gYWRkIGhhbGYgb2YgdGhlIGFjdGl2ZSBidXR0b24gd2lkdGguIFRoaXMgd2lsbCBwb3NpdGlvbiB0aGUgYWN0aXZlXG4gICAgICAgICAgICAgICAgICogYnV0dG9uIHN1Y2ggdGhhdCB0aGUgbWlkcG9pbnQgb2YgdGhlIGFjdGl2ZSBidXR0b24gaXMgYXQgdGhlIG1pZHBvaW50IG9mIHRoZVxuICAgICAgICAgICAgICAgICAqIHNjcm9sbCBjb250YWluZXIuXG4gICAgICAgICAgICAgICAgICovXG4gICAgICAgICAgICAgICAgY29uc3QgY2VudGVyZWRYID0gYWN0aXZlQnV0dG9uTGVmdCAtIHNjcm9sbENvbnRhaW5lckJveC53aWR0aCAvIDIgKyBhY3RpdmVCdXR0b25Cb3gud2lkdGggLyAyO1xuICAgICAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICAgICAqIG5ld1Njcm9sbFBvc2l0aW9uIGlzIHRoZSBhYnNvbHV0ZSBzY3JvbGwgcG9zaXRpb24gdGhhdCB0aGVcbiAgICAgICAgICAgICAgICAgKiBjb250YWluZXIgbmVlZHMgdG8gbW92ZSB0byBpbiBvcmRlciB0byBjZW50ZXIgdGhlIGFjdGl2ZSBidXR0b24uXG4gICAgICAgICAgICAgICAgICogSXQgaXMgY2FsY3VsYXRlZCBieSBhZGRpbmcgdGhlIGN1cnJlbnQgc2Nyb2xsIHBvc2l0aW9uXG4gICAgICAgICAgICAgICAgICogKHNjcm9sbExlZnQpIHRvIHRoZSBvZmZzZXQgbmVlZGVkIHRvIGNlbnRlciB0aGUgYnV0dG9uXG4gICAgICAgICAgICAgICAgICogKGNlbnRlcmVkWCkuXG4gICAgICAgICAgICAgICAgICovXG4gICAgICAgICAgICAgICAgY29uc3QgbmV3U2Nyb2xsUG9zaXRpb24gPSBlbC5zY3JvbGxMZWZ0ICsgY2VudGVyZWRYO1xuICAgICAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICAgICAqIFdlIGludGVudGlvbmFsbHkgdXNlIHNjcm9sbFRvIGhlcmUgaW5zdGVhZCBvZiBzY3JvbGxJbnRvVmlld1xuICAgICAgICAgICAgICAgICAqIHRvIGF2b2lkIGEgV2ViS2l0IGJ1ZyB3aGVyZSBhY2NlbGVyYXRlZCBhbmltYXRpb25zIGJyZWFrXG4gICAgICAgICAgICAgICAgICogd2hlbiB1c2luZyBzY3JvbGxJbnRvVmlldy4gVXNpbmcgc2Nyb2xsSW50b1ZpZXcgd2lsbCBjYXVzZSB0aGVcbiAgICAgICAgICAgICAgICAgKiBzZWdtZW50IGNvbnRhaW5lciB0byBqdW1wIGR1cmluZyB0aGUgdHJhbnNpdGlvbiBhbmQgdGhlbiBzbmFwIGludG8gcGxhY2UuXG4gICAgICAgICAgICAgICAgICogVGhpcyBpcyBiZWNhdXNlIHNjcm9sbEludG9WaWV3IGNhbiBwb3RlbnRpYWxseSBjYXVzZSBwYXJlbnQgZWxlbWVudFxuICAgICAgICAgICAgICAgICAqIGNvbnRhaW5lcnMgdG8gYWxzbyBzY3JvbGwuIHNjcm9sbFRvIGRvZXMgbm90IGhhdmUgdGhpcyBzYW1lIGJlaGF2aW9yLCBzb1xuICAgICAgICAgICAgICAgICAqIHdlIHVzZSB0aGlzIEFQSSBpbnN0ZWFkLlxuICAgICAgICAgICAgICAgICAqXG4gICAgICAgICAgICAgICAgICogc2Nyb2xsVG8gaXMgdXNlZCBpbnN0ZWFkIG9mIHNjcm9sbEJ5IGJlY2F1c2UgdGhlcmUgaXMgYVxuICAgICAgICAgICAgICAgICAqIFdlYmtpdCBidWcgdGhhdCBjYXVzZXMgc2Nyb2xsQnkgdG8gbm90IHdvcmsgc21vb3RobHkgd2hlblxuICAgICAgICAgICAgICAgICAqIHRoZSBhY3RpdmUgYnV0dG9uIGlzIG5lYXIgdGhlIGVkZ2Ugb2YgdGhlIHNjcm9sbCBjb250YWluZXIuXG4gICAgICAgICAgICAgICAgICogVGhpcyBsZWFkcyB0byB0aGUgYnV0dG9ucyB0byBqdW1wIGFyb3VuZCBkdXJpbmcgdGhlIHRyYW5zaXRpb24uXG4gICAgICAgICAgICAgICAgICpcbiAgICAgICAgICAgICAgICAgKiBOb3RlIHRoYXQgaWYgdGhlcmUgaXMgbm90IGVub3VnaCBzY3JvbGxpbmcgc3BhY2UgdG8gY2VudGVyIHRoZSBlbGVtZW50XG4gICAgICAgICAgICAgICAgICogd2l0aGluIHRoZSBzY3JvbGwgY29udGFpbmVyLCB0aGUgYnJvd3NlciB3aWxsIGF0dGVtcHRcbiAgICAgICAgICAgICAgICAgKiB0byBjZW50ZXIgYnkgYXMgbXVjaCBhcyBpdCBjYW4uXG4gICAgICAgICAgICAgICAgICovXG4gICAgICAgICAgICAgICAgZWwuc2Nyb2xsVG8oe1xuICAgICAgICAgICAgICAgICAgICB0b3A6IDAsXG4gICAgICAgICAgICAgICAgICAgIGxlZnQ6IG5ld1Njcm9sbFBvc2l0aW9uLFxuICAgICAgICAgICAgICAgICAgICBiZWhhdmlvcjogc21vb3RoU2Nyb2xsID8gJ3Ntb290aCcgOiAnaW5zdGFudCcsXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgc2V0TmV4dEluZGV4KGRldGFpbCwgaXNFbmQgPSBmYWxzZSkge1xuICAgICAgICBjb25zdCBydGwgPSBpc1JUTCh0aGlzLmVsKTtcbiAgICAgICAgY29uc3QgYWN0aXZhdGVkID0gdGhpcy5hY3RpdmF0ZWQ7XG4gICAgICAgIGNvbnN0IGJ1dHRvbnMgPSB0aGlzLmdldEJ1dHRvbnMoKTtcbiAgICAgICAgY29uc3QgaW5kZXggPSBidXR0b25zLmZpbmRJbmRleCgoYnV0dG9uKSA9PiBidXR0b24udmFsdWUgPT09IHRoaXMudmFsdWUpO1xuICAgICAgICBjb25zdCBwcmV2aW91cyA9IGJ1dHRvbnNbaW5kZXhdO1xuICAgICAgICBsZXQgY3VycmVudDtcbiAgICAgICAgbGV0IG5leHRJbmRleDtcbiAgICAgICAgaWYgKGluZGV4ID09PSAtMSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIC8vIEdldCB0aGUgZWxlbWVudCB0aGF0IHRoZSB0b3VjaCBldmVudCBzdGFydGVkIG9uIGluIGNhc2VcbiAgICAgICAgLy8gaXQgd2FzIHRoZSBjaGVja2VkIGJ1dHRvbiwgdGhlbiB3ZSB3aWxsIG1vdmUgdGhlIGluZGljYXRvclxuICAgICAgICBjb25zdCByZWN0ID0gcHJldmlvdXMuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgICAgIGNvbnN0IGxlZnQgPSByZWN0LmxlZnQ7XG4gICAgICAgIGNvbnN0IHdpZHRoID0gcmVjdC53aWR0aDtcbiAgICAgICAgLy8gR2V0IHRoZSBlbGVtZW50IHRoYXQgdGhlIGdlc3R1cmUgaXMgb24gdG9wIG9mIGJhc2VkIG9uIHRoZSBjdXJyZW50WCBvZiB0aGVcbiAgICAgICAgLy8gZ2VzdHVyZSBldmVudCBhbmQgdGhlIFkgY29vcmRpbmF0ZSBvZiB0aGUgc3RhcnRpbmcgZWxlbWVudCwgc2luY2UgdGhlIGdlc3R1cmVcbiAgICAgICAgLy8gY2FuIG1vdmUgdXAgYW5kIGRvd24gb2ZmIG9mIHRoZSBzZWdtZW50XG4gICAgICAgIGNvbnN0IGN1cnJlbnRYID0gZGV0YWlsLmN1cnJlbnRYO1xuICAgICAgICBjb25zdCBwcmV2aW91c1kgPSByZWN0LnRvcCArIHJlY3QuaGVpZ2h0IC8gMjtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFNlZ21lbnQgY2FuIGJlIHVzZWQgaW5zaWRlIHRoZSBzaGFkb3cgZG9tXG4gICAgICAgICAqIHNvIGRvaW5nIGRvY3VtZW50LmVsZW1lbnRGcm9tUG9pbnQgd291bGQgbmV2ZXJcbiAgICAgICAgICogcmV0dXJuIGEgc2VnbWVudCBidXR0b24gaW4gdGhhdCBpbnN0YW5jZS5cbiAgICAgICAgICogV2UgdXNlIGdldFJvb3ROb2RlIHRvIHdoaWNoIHdpbGwgcmV0dXJuIHRoZSBwYXJlbnRcbiAgICAgICAgICogc2hhZG93IHJvb3QgaWYgdXNlZCBpbnNpZGUgYSBzaGFkb3cgY29tcG9uZW50IGFuZFxuICAgICAgICAgKiByZXR1cm5zIGRvY3VtZW50IG90aGVyd2lzZS5cbiAgICAgICAgICovXG4gICAgICAgIGNvbnN0IHJvb3QgPSB0aGlzLmVsLmdldFJvb3ROb2RlKCk7XG4gICAgICAgIGNvbnN0IG5leHRFbCA9IHJvb3QuZWxlbWVudEZyb21Qb2ludChjdXJyZW50WCwgcHJldmlvdXNZKTtcbiAgICAgICAgY29uc3QgZGVjcmVhc2VJbmRleCA9IHJ0bCA/IGN1cnJlbnRYID4gbGVmdCArIHdpZHRoIDogY3VycmVudFggPCBsZWZ0O1xuICAgICAgICBjb25zdCBpbmNyZWFzZUluZGV4ID0gcnRsID8gY3VycmVudFggPCBsZWZ0IDogY3VycmVudFggPiBsZWZ0ICsgd2lkdGg7XG4gICAgICAgIC8vIElmIHRoZSBpbmRpY2F0b3IgaXMgY3VycmVudGx5IGFjdGl2YXRlZCB0aGVuIHdlIGhhdmUgc3RhcnRlZCB0aGUgZ2VzdHVyZVxuICAgICAgICAvLyBvbiB0b3Agb2YgdGhlIGNoZWNrZWQgYnV0dG9uIHNvIHdlIG5lZWQgdG8gc2xpZGUgdGhlIGluZGljYXRvclxuICAgICAgICAvLyBieSBjaGVja2luZyB0aGUgYnV0dG9uIG5leHQgdG8gaXQgYXMgd2UgbW92ZVxuICAgICAgICBpZiAoYWN0aXZhdGVkICYmICFpc0VuZCkge1xuICAgICAgICAgICAgLy8gRGVjcmVhc2UgaW5kZXgsIG1vdmUgbGVmdCBpbiBMVFIgJiByaWdodCBpbiBSVExcbiAgICAgICAgICAgIGlmIChkZWNyZWFzZUluZGV4KSB7XG4gICAgICAgICAgICAgICAgY29uc3QgbmV3SW5kZXggPSBpbmRleCAtIDE7XG4gICAgICAgICAgICAgICAgaWYgKG5ld0luZGV4ID49IDApIHtcbiAgICAgICAgICAgICAgICAgICAgbmV4dEluZGV4ID0gbmV3SW5kZXg7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC8vIEluY3JlYXNlIGluZGV4LCBtb3ZlcyByaWdodCBpbiBMVFIgJiBsZWZ0IGluIFJUTFxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoaW5jcmVhc2VJbmRleCkge1xuICAgICAgICAgICAgICAgIGlmIChhY3RpdmF0ZWQgJiYgIWlzRW5kKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IG5ld0luZGV4ID0gaW5kZXggKyAxO1xuICAgICAgICAgICAgICAgICAgICBpZiAobmV3SW5kZXggPCBidXR0b25zLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgbmV4dEluZGV4ID0gbmV3SW5kZXg7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAobmV4dEluZGV4ICE9PSB1bmRlZmluZWQgJiYgIWJ1dHRvbnNbbmV4dEluZGV4XS5kaXNhYmxlZCkge1xuICAgICAgICAgICAgICAgIGN1cnJlbnQgPSBidXR0b25zW25leHRJbmRleF07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgLy8gSWYgdGhlIGluZGljYXRvciBpcyBub3QgYWN0aXZhdGVkIHRoZW4gd2Ugd2lsbCBqdXN0IHNldCB0aGUgaW5kaWNhdG9yXG4gICAgICAgIC8vIHRvIHRoZSBlbGVtZW50IHdoZXJlIHRoZSBnZXN0dXJlIGVuZGVkXG4gICAgICAgIGlmICghYWN0aXZhdGVkICYmIGlzRW5kKSB7XG4gICAgICAgICAgICBjdXJyZW50ID0gbmV4dEVsO1xuICAgICAgICB9XG4gICAgICAgIGlmIChjdXJyZW50ICE9IG51bGwpIHtcbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogSWYgY3VycmVudCBlbGVtZW50IGlzIGlvbi1zZWdtZW50IHRoZW4gdGhhdCBtZWFuc1xuICAgICAgICAgICAgICogdXNlciB0cmllZCB0byBzZWxlY3QgYSBkaXNhYmxlZCBpb24tc2VnbWVudC1idXR0b24sXG4gICAgICAgICAgICAgKiBhbmQgd2Ugc2hvdWxkIG5vdCB1cGRhdGUgdGhlIHJpcHBsZS5cbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgaWYgKGN1cnJlbnQudGFnTmFtZSA9PT0gJ0lPTi1TRUdNRU5UJykge1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChwcmV2aW91cyAhPT0gY3VycmVudCkge1xuICAgICAgICAgICAgICAgIHRoaXMuY2hlY2tCdXR0b24ocHJldmlvdXMsIGN1cnJlbnQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICBlbWl0U3R5bGUoKSB7XG4gICAgICAgIHRoaXMuaW9uU3R5bGUuZW1pdCh7XG4gICAgICAgICAgICBzZWdtZW50OiB0cnVlLFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgb25LZXlEb3duKGV2KSB7XG4gICAgICAgIGNvbnN0IHJ0bCA9IGlzUlRMKHRoaXMuZWwpO1xuICAgICAgICBsZXQga2V5RG93blNlbGVjdHNCdXR0b24gPSB0aGlzLnNlbGVjdE9uRm9jdXM7XG4gICAgICAgIGxldCBjdXJyZW50O1xuICAgICAgICBzd2l0Y2ggKGV2LmtleSkge1xuICAgICAgICAgICAgY2FzZSAnQXJyb3dSaWdodCc6XG4gICAgICAgICAgICAgICAgZXYucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgICAgICBjdXJyZW50ID0gcnRsID8gdGhpcy5nZXRTZWdtZW50QnV0dG9uKCdwcmV2aW91cycpIDogdGhpcy5nZXRTZWdtZW50QnV0dG9uKCduZXh0Jyk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdBcnJvd0xlZnQnOlxuICAgICAgICAgICAgICAgIGV2LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICAgICAgY3VycmVudCA9IHJ0bCA/IHRoaXMuZ2V0U2VnbWVudEJ1dHRvbignbmV4dCcpIDogdGhpcy5nZXRTZWdtZW50QnV0dG9uKCdwcmV2aW91cycpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnSG9tZSc6XG4gICAgICAgICAgICAgICAgZXYucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgICAgICBjdXJyZW50ID0gdGhpcy5nZXRTZWdtZW50QnV0dG9uKCdmaXJzdCcpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnRW5kJzpcbiAgICAgICAgICAgICAgICBldi5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgICAgIGN1cnJlbnQgPSB0aGlzLmdldFNlZ21lbnRCdXR0b24oJ2xhc3QnKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJyAnOlxuICAgICAgICAgICAgY2FzZSAnRW50ZXInOlxuICAgICAgICAgICAgICAgIGV2LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICAgICAgY3VycmVudCA9IGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQ7XG4gICAgICAgICAgICAgICAga2V5RG93blNlbGVjdHNCdXR0b24gPSB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIGlmICghY3VycmVudCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmIChrZXlEb3duU2VsZWN0c0J1dHRvbikge1xuICAgICAgICAgICAgY29uc3QgcHJldmlvdXMgPSB0aGlzLmNoZWNrZWQ7XG4gICAgICAgICAgICB0aGlzLmNoZWNrQnV0dG9uKHByZXZpb3VzIHx8IGN1cnJlbnQsIGN1cnJlbnQpO1xuICAgICAgICAgICAgaWYgKGN1cnJlbnQgIT09IHByZXZpb3VzKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5lbWl0VmFsdWVDaGFuZ2UoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBjdXJyZW50LnNldEZvY3VzKCk7XG4gICAgfVxuICAgIHJlbmRlcigpIHtcbiAgICAgICAgY29uc3QgbW9kZSA9IGdldElvbk1vZGUodGhpcyk7XG4gICAgICAgIHJldHVybiAoaChIb3N0LCB7IGtleTogJ2E2NGUzOTM1MjA1MGI1MTZmN2RjODJjZTk1YTRiY2ZmODQzMWQxZDAnLCByb2xlOiBcInRhYmxpc3RcIiwgb25DbGljazogdGhpcy5vbkNsaWNrLCBjbGFzczogY3JlYXRlQ29sb3JDbGFzc2VzKHRoaXMuY29sb3IsIHtcbiAgICAgICAgICAgICAgICBbbW9kZV06IHRydWUsXG4gICAgICAgICAgICAgICAgJ2luLXRvb2xiYXInOiBob3N0Q29udGV4dCgnaW9uLXRvb2xiYXInLCB0aGlzLmVsKSxcbiAgICAgICAgICAgICAgICAnaW4tdG9vbGJhci1jb2xvcic6IGhvc3RDb250ZXh0KCdpb24tdG9vbGJhcltjb2xvcl0nLCB0aGlzLmVsKSxcbiAgICAgICAgICAgICAgICAnc2VnbWVudC1hY3RpdmF0ZWQnOiB0aGlzLmFjdGl2YXRlZCxcbiAgICAgICAgICAgICAgICAnc2VnbWVudC1kaXNhYmxlZCc6IHRoaXMuZGlzYWJsZWQsXG4gICAgICAgICAgICAgICAgJ3NlZ21lbnQtc2Nyb2xsYWJsZSc6IHRoaXMuc2Nyb2xsYWJsZSxcbiAgICAgICAgICAgIH0pIH0sIGgoXCJzbG90XCIsIHsga2V5OiAnYmIzZjNlYzMwZTU5ZTA0NjFmYTYyMGQ4OTYxYWI3MzBjYzgwMmE0ZScsIG9uU2xvdGNoYW5nZTogdGhpcy5vblNsb3R0ZWRJdGVtc0NoYW5nZSB9KSkpO1xuICAgIH1cbiAgICBnZXQgZWwoKSB7IHJldHVybiBnZXRFbGVtZW50KHRoaXMpOyB9XG4gICAgc3RhdGljIGdldCB3YXRjaGVycygpIHsgcmV0dXJuIHtcbiAgICAgICAgXCJjb2xvclwiOiBbXCJjb2xvckNoYW5nZWRcIl0sXG4gICAgICAgIFwic3dpcGVHZXN0dXJlXCI6IFtcInN3aXBlR2VzdHVyZUNoYW5nZWRcIl0sXG4gICAgICAgIFwidmFsdWVcIjogW1widmFsdWVDaGFuZ2VkXCJdLFxuICAgICAgICBcImRpc2FibGVkXCI6IFtcImRpc2FibGVkQ2hhbmdlZFwiXVxuICAgIH07IH1cbn07XG5TZWdtZW50LnN0eWxlID0ge1xuICAgIGlvczogSW9uU2VnbWVudElvc1N0eWxlMCxcbiAgICBtZDogSW9uU2VnbWVudE1kU3R5bGUwXG59O1xuXG5jb25zdCBzZWdtZW50QnV0dG9uSW9zQ3NzID0gXCI6aG9zdHstLWNvbG9yOmluaXRpYWw7LS1jb2xvci1ob3Zlcjp2YXIoLS1jb2xvcik7LS1jb2xvci1jaGVja2VkOnZhcigtLWNvbG9yKTstLWNvbG9yLWRpc2FibGVkOnZhcigtLWNvbG9yKTstLXBhZGRpbmctc3RhcnQ6MDstLXBhZGRpbmctZW5kOjA7LS1wYWRkaW5nLXRvcDowOy0tcGFkZGluZy1ib3R0b206MDtib3JkZXItcmFkaXVzOnZhcigtLWJvcmRlci1yYWRpdXMpO2Rpc3BsYXk6LW1zLWZsZXhib3g7ZGlzcGxheTpmbGV4O3Bvc2l0aW9uOnJlbGF0aXZlOy1tcy1mbGV4LWRpcmVjdGlvbjpjb2x1bW47ZmxleC1kaXJlY3Rpb246Y29sdW1uO2hlaWdodDphdXRvO2JhY2tncm91bmQ6dmFyKC0tYmFja2dyb3VuZCk7Y29sb3I6dmFyKC0tY29sb3IpO3RleHQtZGVjb3JhdGlvbjpub25lO3RleHQtb3ZlcmZsb3c6ZWxsaXBzaXM7d2hpdGUtc3BhY2U6bm93cmFwO2N1cnNvcjpwb2ludGVyO2dyaWQtcm93OjE7LXdlYmtpdC1mb250LWtlcm5pbmc6bm9uZTtmb250LWtlcm5pbmc6bm9uZX0uYnV0dG9uLW5hdGl2ZXtib3JkZXItcmFkaXVzOjA7Zm9udC1mYW1pbHk6aW5oZXJpdDtmb250LXNpemU6aW5oZXJpdDtmb250LXN0eWxlOmluaGVyaXQ7Zm9udC13ZWlnaHQ6aW5oZXJpdDtsZXR0ZXItc3BhY2luZzppbmhlcml0O3RleHQtZGVjb3JhdGlvbjppbmhlcml0O3RleHQtaW5kZW50OmluaGVyaXQ7dGV4dC1vdmVyZmxvdzppbmhlcml0O3RleHQtdHJhbnNmb3JtOmluaGVyaXQ7dGV4dC1hbGlnbjppbmhlcml0O3doaXRlLXNwYWNlOmluaGVyaXQ7Y29sb3I6aW5oZXJpdDstd2Via2l0LW1hcmdpbi1zdGFydDp2YXIoLS1tYXJnaW4tc3RhcnQpO21hcmdpbi1pbmxpbmUtc3RhcnQ6dmFyKC0tbWFyZ2luLXN0YXJ0KTstd2Via2l0LW1hcmdpbi1lbmQ6dmFyKC0tbWFyZ2luLWVuZCk7bWFyZ2luLWlubGluZS1lbmQ6dmFyKC0tbWFyZ2luLWVuZCk7bWFyZ2luLXRvcDp2YXIoLS1tYXJnaW4tdG9wKTttYXJnaW4tYm90dG9tOnZhcigtLW1hcmdpbi1ib3R0b20pOy13ZWJraXQtcGFkZGluZy1zdGFydDp2YXIoLS1wYWRkaW5nLXN0YXJ0KTtwYWRkaW5nLWlubGluZS1zdGFydDp2YXIoLS1wYWRkaW5nLXN0YXJ0KTstd2Via2l0LXBhZGRpbmctZW5kOnZhcigtLXBhZGRpbmctZW5kKTtwYWRkaW5nLWlubGluZS1lbmQ6dmFyKC0tcGFkZGluZy1lbmQpO3BhZGRpbmctdG9wOnZhcigtLXBhZGRpbmctdG9wKTtwYWRkaW5nLWJvdHRvbTp2YXIoLS1wYWRkaW5nLWJvdHRvbSk7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlM2QoMCwgIDAsICAwKTt0cmFuc2Zvcm06dHJhbnNsYXRlM2QoMCwgIDAsICAwKTtkaXNwbGF5Oi1tcy1mbGV4Ym94O2Rpc3BsYXk6ZmxleDtwb3NpdGlvbjpyZWxhdGl2ZTstbXMtZmxleC1kaXJlY3Rpb246aW5oZXJpdDtmbGV4LWRpcmVjdGlvbjppbmhlcml0Oy1tcy1mbGV4LXBvc2l0aXZlOjE7ZmxleC1ncm93OjE7LW1zLWZsZXgtYWxpZ246Y2VudGVyO2FsaWduLWl0ZW1zOmNlbnRlcjstbXMtZmxleC1wYWNrOmNlbnRlcjtqdXN0aWZ5LWNvbnRlbnQ6Y2VudGVyO3dpZHRoOjEwMCU7bWluLXdpZHRoOmluaGVyaXQ7bWF4LXdpZHRoOmluaGVyaXQ7aGVpZ2h0OmF1dG87bWluLWhlaWdodDppbmhlcml0O21heC1oZWlnaHQ6aW5oZXJpdDstd2Via2l0LXRyYW5zaXRpb246dmFyKC0tdHJhbnNpdGlvbik7dHJhbnNpdGlvbjp2YXIoLS10cmFuc2l0aW9uKTtib3JkZXI6bm9uZTtvdXRsaW5lOm5vbmU7YmFja2dyb3VuZDp0cmFuc3BhcmVudDtjb250YWluOmNvbnRlbnQ7cG9pbnRlci1ldmVudHM6bm9uZTtvdmVyZmxvdzpoaWRkZW47ei1pbmRleDoyfS5idXR0b24tbmF0aXZlOjphZnRlcntsZWZ0OjA7cmlnaHQ6MDt0b3A6MDtib3R0b206MDtwb3NpdGlvbjphYnNvbHV0ZTtjb250ZW50OlxcXCJcXFwiO29wYWNpdHk6MH0uYnV0dG9uLWlubmVye2Rpc3BsYXk6LW1zLWZsZXhib3g7ZGlzcGxheTpmbGV4O3Bvc2l0aW9uOnJlbGF0aXZlOy1tcy1mbGV4LWZsb3c6aW5oZXJpdDtmbGV4LWZsb3c6aW5oZXJpdDstbXMtZmxleC1hbGlnbjpjZW50ZXI7YWxpZ24taXRlbXM6Y2VudGVyOy1tcy1mbGV4LXBhY2s6Y2VudGVyO2p1c3RpZnktY29udGVudDpjZW50ZXI7d2lkdGg6MTAwJTtoZWlnaHQ6MTAwJTt6LWluZGV4OjF9Omhvc3QoLnNlZ21lbnQtYnV0dG9uLWNoZWNrZWQpe2JhY2tncm91bmQ6dmFyKC0tYmFja2dyb3VuZC1jaGVja2VkKTtjb2xvcjp2YXIoLS1jb2xvci1jaGVja2VkKX06aG9zdCguc2VnbWVudC1idXR0b24tZGlzYWJsZWQpe2N1cnNvcjpkZWZhdWx0O3BvaW50ZXItZXZlbnRzOm5vbmV9Omhvc3QoLmlvbi1mb2N1c2VkKSAuYnV0dG9uLW5hdGl2ZXtjb2xvcjp2YXIoLS1jb2xvci1mb2N1c2VkKX06aG9zdCguaW9uLWZvY3VzZWQpIC5idXR0b24tbmF0aXZlOjphZnRlcntiYWNrZ3JvdW5kOnZhcigtLWJhY2tncm91bmQtZm9jdXNlZCk7b3BhY2l0eTp2YXIoLS1iYWNrZ3JvdW5kLWZvY3VzZWQtb3BhY2l0eSl9Omhvc3QoOmZvY3VzKXtvdXRsaW5lOm5vbmV9QG1lZGlhIChhbnktaG92ZXI6IGhvdmVyKXs6aG9zdCg6aG92ZXIpIC5idXR0b24tbmF0aXZle2NvbG9yOnZhcigtLWNvbG9yLWhvdmVyKX06aG9zdCg6aG92ZXIpIC5idXR0b24tbmF0aXZlOjphZnRlcntiYWNrZ3JvdW5kOnZhcigtLWJhY2tncm91bmQtaG92ZXIpO29wYWNpdHk6dmFyKC0tYmFja2dyb3VuZC1ob3Zlci1vcGFjaXR5KX06aG9zdCguc2VnbWVudC1idXR0b24tY2hlY2tlZDpob3ZlcikgLmJ1dHRvbi1uYXRpdmV7Y29sb3I6dmFyKC0tY29sb3ItY2hlY2tlZCl9fTo6c2xvdHRlZChpb24taWNvbil7LW1zLWZsZXgtbmVnYXRpdmU6MDtmbGV4LXNocmluazowOy1tcy1mbGV4LW9yZGVyOi0xO29yZGVyOi0xO3BvaW50ZXItZXZlbnRzOm5vbmV9OjpzbG90dGVkKGlvbi1sYWJlbCl7ZGlzcGxheTpibG9jazstbXMtZmxleC1pdGVtLWFsaWduOmNlbnRlcjthbGlnbi1zZWxmOmNlbnRlcjttYXgtd2lkdGg6MTAwJTtsaW5lLWhlaWdodDoyMnB4O3RleHQtb3ZlcmZsb3c6ZWxsaXBzaXM7d2hpdGUtc3BhY2U6bm93cmFwO292ZXJmbG93OmhpZGRlbjstd2Via2l0LWJveC1zaXppbmc6Ym9yZGVyLWJveDtib3gtc2l6aW5nOmJvcmRlci1ib3g7cG9pbnRlci1ldmVudHM6bm9uZX06aG9zdCguc2VnbWVudC1idXR0b24tbGF5b3V0LWljb24tdG9wKSAuYnV0dG9uLW5hdGl2ZXstbXMtZmxleC1kaXJlY3Rpb246Y29sdW1uO2ZsZXgtZGlyZWN0aW9uOmNvbHVtbn06aG9zdCguc2VnbWVudC1idXR0b24tbGF5b3V0LWljb24tc3RhcnQpIC5idXR0b24tbmF0aXZley1tcy1mbGV4LWRpcmVjdGlvbjpyb3c7ZmxleC1kaXJlY3Rpb246cm93fTpob3N0KC5zZWdtZW50LWJ1dHRvbi1sYXlvdXQtaWNvbi1lbmQpIC5idXR0b24tbmF0aXZley1tcy1mbGV4LWRpcmVjdGlvbjpyb3ctcmV2ZXJzZTtmbGV4LWRpcmVjdGlvbjpyb3ctcmV2ZXJzZX06aG9zdCguc2VnbWVudC1idXR0b24tbGF5b3V0LWljb24tYm90dG9tKSAuYnV0dG9uLW5hdGl2ZXstbXMtZmxleC1kaXJlY3Rpb246Y29sdW1uLXJldmVyc2U7ZmxleC1kaXJlY3Rpb246Y29sdW1uLXJldmVyc2V9Omhvc3QoLnNlZ21lbnQtYnV0dG9uLWxheW91dC1pY29uLWhpZGUpIDo6c2xvdHRlZChpb24taWNvbil7ZGlzcGxheTpub25lfTpob3N0KC5zZWdtZW50LWJ1dHRvbi1sYXlvdXQtbGFiZWwtaGlkZSkgOjpzbG90dGVkKGlvbi1sYWJlbCl7ZGlzcGxheTpub25lfWlvbi1yaXBwbGUtZWZmZWN0e2NvbG9yOnZhcigtLXJpcHBsZS1jb2xvciwgdmFyKC0tY29sb3ItY2hlY2tlZCkpfS5zZWdtZW50LWJ1dHRvbi1pbmRpY2F0b3J7LXdlYmtpdC10cmFuc2Zvcm0tb3JpZ2luOmxlZnQ7dHJhbnNmb3JtLW9yaWdpbjpsZWZ0O3Bvc2l0aW9uOmFic29sdXRlO29wYWNpdHk6MDstd2Via2l0LWJveC1zaXppbmc6Ym9yZGVyLWJveDtib3gtc2l6aW5nOmJvcmRlci1ib3g7d2lsbC1jaGFuZ2U6dHJhbnNmb3JtLCBvcGFjaXR5O3BvaW50ZXItZXZlbnRzOm5vbmV9LnNlZ21lbnQtYnV0dG9uLWluZGljYXRvci1iYWNrZ3JvdW5ke3dpZHRoOjEwMCU7aGVpZ2h0OnZhcigtLWluZGljYXRvci1oZWlnaHQpOy13ZWJraXQtdHJhbnNmb3JtOnZhcigtLWluZGljYXRvci10cmFuc2Zvcm0pO3RyYW5zZm9ybTp2YXIoLS1pbmRpY2F0b3ItdHJhbnNmb3JtKTstd2Via2l0LWJveC1zaGFkb3c6dmFyKC0taW5kaWNhdG9yLWJveC1zaGFkb3cpO2JveC1zaGFkb3c6dmFyKC0taW5kaWNhdG9yLWJveC1zaGFkb3cpO3BvaW50ZXItZXZlbnRzOm5vbmV9LnNlZ21lbnQtYnV0dG9uLWluZGljYXRvci1hbmltYXRlZHstd2Via2l0LXRyYW5zaXRpb246dmFyKC0taW5kaWNhdG9yLXRyYW5zaXRpb24pO3RyYW5zaXRpb246dmFyKC0taW5kaWNhdG9yLXRyYW5zaXRpb24pfTpob3N0KC5zZWdtZW50LWJ1dHRvbi1jaGVja2VkKSAuc2VnbWVudC1idXR0b24taW5kaWNhdG9ye29wYWNpdHk6MX1AbWVkaWEgKHByZWZlcnMtcmVkdWNlZC1tb3Rpb246IHJlZHVjZSl7LnNlZ21lbnQtYnV0dG9uLWluZGljYXRvci1iYWNrZ3JvdW5key13ZWJraXQtdHJhbnNmb3JtOm5vbmU7dHJhbnNmb3JtOm5vbmV9LnNlZ21lbnQtYnV0dG9uLWluZGljYXRvci1hbmltYXRlZHstd2Via2l0LXRyYW5zaXRpb246bm9uZTt0cmFuc2l0aW9uOm5vbmV9fTpob3N0ey0tYmFja2dyb3VuZDpub25lOy0tYmFja2dyb3VuZC1jaGVja2VkOm5vbmU7LS1iYWNrZ3JvdW5kLWhvdmVyOm5vbmU7LS1iYWNrZ3JvdW5kLWhvdmVyLW9wYWNpdHk6MDstLWJhY2tncm91bmQtZm9jdXNlZDpub25lOy0tYmFja2dyb3VuZC1mb2N1c2VkLW9wYWNpdHk6MDstLWJvcmRlci1yYWRpdXM6N3B4Oy0tYm9yZGVyLXdpZHRoOjFweDstLWJvcmRlci1jb2xvcjpyZ2JhKHZhcigtLWlvbi10ZXh0LWNvbG9yLXJnYiwgMCwgMCwgMCksIDAuMTIpOy0tYm9yZGVyLXN0eWxlOnNvbGlkOy0taW5kaWNhdG9yLWJveC1zaGFkb3c6MCAwIDVweCByZ2JhKDAsIDAsIDAsIDAuMTYpOy0taW5kaWNhdG9yLWNvbG9yOnZhcigtLWlvbi1jb2xvci1zdGVwLTM1MCwgdmFyKC0taW9uLWJhY2tncm91bmQtY29sb3Itc3RlcC0zNTAsIHZhcigtLWlvbi1iYWNrZ3JvdW5kLWNvbG9yLCAjZmZmKSkpOy0taW5kaWNhdG9yLWhlaWdodDoxMDAlOy0taW5kaWNhdG9yLXRyYW5zaXRpb246dHJhbnNmb3JtIDI2MG1zIGN1YmljLWJlemllcigwLjQsIDAsIDAuMiwgMSk7LS1pbmRpY2F0b3ItdHJhbnNmb3JtOm5vbmU7LS10cmFuc2l0aW9uOjEwMG1zIGFsbCBsaW5lYXI7LS1wYWRkaW5nLXRvcDowOy0tcGFkZGluZy1lbmQ6MTNweDstLXBhZGRpbmctYm90dG9tOjA7LS1wYWRkaW5nLXN0YXJ0OjEzcHg7bWFyZ2luLXRvcDoycHg7bWFyZ2luLWJvdHRvbToycHg7cG9zaXRpb246cmVsYXRpdmU7LW1zLWZsZXgtZGlyZWN0aW9uOnJvdztmbGV4LWRpcmVjdGlvbjpyb3c7bWluLXdpZHRoOjcwcHg7bWluLWhlaWdodDoyOHB4Oy13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZTNkKDAsIDAsIDApO3RyYW5zZm9ybTp0cmFuc2xhdGUzZCgwLCAwLCAwKTtmb250LXNpemU6MTNweDtmb250LXdlaWdodDo0NTA7bGluZS1oZWlnaHQ6MzdweH06aG9zdDo6YmVmb3Jle21hcmdpbi1sZWZ0OjA7bWFyZ2luLXJpZ2h0OjA7bWFyZ2luLXRvcDo1cHg7bWFyZ2luLWJvdHRvbTo1cHg7LXdlYmtpdC10cmFuc2l0aW9uOjE2MG1zIG9wYWNpdHkgZWFzZS1pbi1vdXQ7dHJhbnNpdGlvbjoxNjBtcyBvcGFjaXR5IGVhc2UtaW4tb3V0Oy13ZWJraXQtdHJhbnNpdGlvbi1kZWxheToxMDBtczt0cmFuc2l0aW9uLWRlbGF5OjEwMG1zO2JvcmRlci1sZWZ0OnZhcigtLWJvcmRlci13aWR0aCkgdmFyKC0tYm9yZGVyLXN0eWxlKSB2YXIoLS1ib3JkZXItY29sb3IpO2NvbnRlbnQ6XFxcIlxcXCI7b3BhY2l0eToxO3dpbGwtY2hhbmdlOm9wYWNpdHl9Omhvc3QoOmZpcnN0LW9mLXR5cGUpOjpiZWZvcmV7Ym9yZGVyLWxlZnQtY29sb3I6dHJhbnNwYXJlbnR9Omhvc3QoLnNlZ21lbnQtYnV0dG9uLWRpc2FibGVkKXtvcGFjaXR5OjAuM306OnNsb3R0ZWQoaW9uLWljb24pe2ZvbnQtc2l6ZToyNHB4fTpob3N0KC5zZWdtZW50LWJ1dHRvbi1sYXlvdXQtaWNvbi1zdGFydCkgOjpzbG90dGVkKGlvbi1sYWJlbCl7LXdlYmtpdC1tYXJnaW4tc3RhcnQ6MnB4O21hcmdpbi1pbmxpbmUtc3RhcnQ6MnB4Oy13ZWJraXQtbWFyZ2luLWVuZDowO21hcmdpbi1pbmxpbmUtZW5kOjB9Omhvc3QoLnNlZ21lbnQtYnV0dG9uLWxheW91dC1pY29uLWVuZCkgOjpzbG90dGVkKGlvbi1sYWJlbCl7LXdlYmtpdC1tYXJnaW4tc3RhcnQ6MDttYXJnaW4taW5saW5lLXN0YXJ0OjA7LXdlYmtpdC1tYXJnaW4tZW5kOjJweDttYXJnaW4taW5saW5lLWVuZDoycHh9LnNlZ21lbnQtYnV0dG9uLWluZGljYXRvcnstd2Via2l0LXBhZGRpbmctc3RhcnQ6MnB4O3BhZGRpbmctaW5saW5lLXN0YXJ0OjJweDstd2Via2l0LXBhZGRpbmctZW5kOjJweDtwYWRkaW5nLWlubGluZS1lbmQ6MnB4O2xlZnQ6MDtyaWdodDowO3RvcDowO2JvdHRvbTowfS5zZWdtZW50LWJ1dHRvbi1pbmRpY2F0b3ItYmFja2dyb3VuZHtib3JkZXItcmFkaXVzOnZhcigtLWJvcmRlci1yYWRpdXMpO2JhY2tncm91bmQ6dmFyKC0taW5kaWNhdG9yLWNvbG9yKX0uc2VnbWVudC1idXR0b24taW5kaWNhdG9yLWJhY2tncm91bmR7LXdlYmtpdC10cmFuc2l0aW9uOnZhcigtLWluZGljYXRvci10cmFuc2l0aW9uKTt0cmFuc2l0aW9uOnZhcigtLWluZGljYXRvci10cmFuc2l0aW9uKX06aG9zdCguc2VnbWVudC1idXR0b24tY2hlY2tlZCk6OmJlZm9yZSw6aG9zdCguc2VnbWVudC1idXR0b24tYWZ0ZXItY2hlY2tlZCk6OmJlZm9yZXtvcGFjaXR5OjB9Omhvc3QoLnNlZ21lbnQtYnV0dG9uLWNoZWNrZWQpe3otaW5kZXg6LTF9Omhvc3QoLnNlZ21lbnQtYnV0dG9uLWFjdGl2YXRlZCl7LS1pbmRpY2F0b3ItdHJhbnNmb3JtOnNjYWxlKDAuOTUpfTpob3N0KC5pb24tZm9jdXNlZCkgLmJ1dHRvbi1uYXRpdmV7b3BhY2l0eTowLjd9QG1lZGlhIChhbnktaG92ZXI6IGhvdmVyKXs6aG9zdCg6aG92ZXIpIC5idXR0b24tbmF0aXZle29wYWNpdHk6MC41fTpob3N0KC5zZWdtZW50LWJ1dHRvbi1jaGVja2VkOmhvdmVyKSAuYnV0dG9uLW5hdGl2ZXtvcGFjaXR5OjF9fTpob3N0KC5pbi1zZWdtZW50LWNvbG9yKXtiYWNrZ3JvdW5kOm5vbmU7Y29sb3I6dmFyKC0taW9uLXRleHQtY29sb3IsICMwMDApfTpob3N0KC5pbi1zZWdtZW50LWNvbG9yKSAuc2VnbWVudC1idXR0b24taW5kaWNhdG9yLWJhY2tncm91bmR7YmFja2dyb3VuZDp2YXIoLS1pb24tY29sb3Itc3RlcC0zNTAsIHZhcigtLWlvbi1iYWNrZ3JvdW5kLWNvbG9yLXN0ZXAtMzUwLCB2YXIoLS1pb24tYmFja2dyb3VuZC1jb2xvciwgI2ZmZikpKX1AbWVkaWEgKGFueS1ob3ZlcjogaG92ZXIpezpob3N0KC5pbi1zZWdtZW50LWNvbG9yOmhvdmVyKSAuYnV0dG9uLW5hdGl2ZSw6aG9zdCguaW4tc2VnbWVudC1jb2xvci5zZWdtZW50LWJ1dHRvbi1jaGVja2VkOmhvdmVyKSAuYnV0dG9uLW5hdGl2ZXtjb2xvcjp2YXIoLS1pb24tdGV4dC1jb2xvciwgIzAwMCl9fTpob3N0KC5pbi10b29sYmFyOm5vdCguaW4tc2VnbWVudC1jb2xvcikpey0tYmFja2dyb3VuZC1jaGVja2VkOnZhcigtLWlvbi10b29sYmFyLXNlZ21lbnQtYmFja2dyb3VuZC1jaGVja2VkLCBub25lKTstLWNvbG9yOnZhcigtLWlvbi10b29sYmFyLXNlZ21lbnQtY29sb3IsIHZhcigtLWlvbi10b29sYmFyLWNvbG9yKSwgaW5pdGlhbCk7LS1jb2xvci1jaGVja2VkOnZhcigtLWlvbi10b29sYmFyLXNlZ21lbnQtY29sb3ItY2hlY2tlZCwgdmFyKC0taW9uLXRvb2xiYXItY29sb3IpLCBpbml0aWFsKTstLWluZGljYXRvci1jb2xvcjp2YXIoLS1pb24tdG9vbGJhci1zZWdtZW50LWluZGljYXRvci1jb2xvciwgdmFyKC0taW9uLWNvbG9yLXN0ZXAtMzUwLCB2YXIoLS1pb24tYmFja2dyb3VuZC1jb2xvci1zdGVwLTM1MCwgdmFyKC0taW9uLWJhY2tncm91bmQtY29sb3IsICNmZmYpKSkpfTpob3N0KC5pbi10b29sYmFyLWNvbG9yKSAuc2VnbWVudC1idXR0b24taW5kaWNhdG9yLWJhY2tncm91bmR7YmFja2dyb3VuZDp2YXIoLS1pb24tY29sb3ItY29udHJhc3QpfTpob3N0KC5pbi10b29sYmFyLWNvbG9yOm5vdCguaW4tc2VnbWVudC1jb2xvcikpIC5idXR0b24tbmF0aXZle2NvbG9yOnZhcigtLWlvbi1jb2xvci1jb250cmFzdCl9Omhvc3QoLmluLXRvb2xiYXItY29sb3Iuc2VnbWVudC1idXR0b24tY2hlY2tlZDpub3QoLmluLXNlZ21lbnQtY29sb3IpKSAuYnV0dG9uLW5hdGl2ZXtjb2xvcjp2YXIoLS1pb24tY29sb3ItYmFzZSl9QG1lZGlhIChhbnktaG92ZXI6IGhvdmVyKXs6aG9zdCguaW4tdG9vbGJhci1jb2xvcjpub3QoLmluLXNlZ21lbnQtY29sb3IpOmhvdmVyKSAuYnV0dG9uLW5hdGl2ZXtjb2xvcjp2YXIoLS1pb24tY29sb3ItY29udHJhc3QpfTpob3N0KC5pbi10b29sYmFyLWNvbG9yLnNlZ21lbnQtYnV0dG9uLWNoZWNrZWQ6bm90KC5pbi1zZWdtZW50LWNvbG9yKTpob3ZlcikgLmJ1dHRvbi1uYXRpdmV7Y29sb3I6dmFyKC0taW9uLWNvbG9yLWJhc2UpfX1cIjtcbmNvbnN0IElvblNlZ21lbnRCdXR0b25Jb3NTdHlsZTAgPSBzZWdtZW50QnV0dG9uSW9zQ3NzO1xuXG5jb25zdCBzZWdtZW50QnV0dG9uTWRDc3MgPSBcIjpob3N0ey0tY29sb3I6aW5pdGlhbDstLWNvbG9yLWhvdmVyOnZhcigtLWNvbG9yKTstLWNvbG9yLWNoZWNrZWQ6dmFyKC0tY29sb3IpOy0tY29sb3ItZGlzYWJsZWQ6dmFyKC0tY29sb3IpOy0tcGFkZGluZy1zdGFydDowOy0tcGFkZGluZy1lbmQ6MDstLXBhZGRpbmctdG9wOjA7LS1wYWRkaW5nLWJvdHRvbTowO2JvcmRlci1yYWRpdXM6dmFyKC0tYm9yZGVyLXJhZGl1cyk7ZGlzcGxheTotbXMtZmxleGJveDtkaXNwbGF5OmZsZXg7cG9zaXRpb246cmVsYXRpdmU7LW1zLWZsZXgtZGlyZWN0aW9uOmNvbHVtbjtmbGV4LWRpcmVjdGlvbjpjb2x1bW47aGVpZ2h0OmF1dG87YmFja2dyb3VuZDp2YXIoLS1iYWNrZ3JvdW5kKTtjb2xvcjp2YXIoLS1jb2xvcik7dGV4dC1kZWNvcmF0aW9uOm5vbmU7dGV4dC1vdmVyZmxvdzplbGxpcHNpczt3aGl0ZS1zcGFjZTpub3dyYXA7Y3Vyc29yOnBvaW50ZXI7Z3JpZC1yb3c6MTstd2Via2l0LWZvbnQta2VybmluZzpub25lO2ZvbnQta2VybmluZzpub25lfS5idXR0b24tbmF0aXZle2JvcmRlci1yYWRpdXM6MDtmb250LWZhbWlseTppbmhlcml0O2ZvbnQtc2l6ZTppbmhlcml0O2ZvbnQtc3R5bGU6aW5oZXJpdDtmb250LXdlaWdodDppbmhlcml0O2xldHRlci1zcGFjaW5nOmluaGVyaXQ7dGV4dC1kZWNvcmF0aW9uOmluaGVyaXQ7dGV4dC1pbmRlbnQ6aW5oZXJpdDt0ZXh0LW92ZXJmbG93OmluaGVyaXQ7dGV4dC10cmFuc2Zvcm06aW5oZXJpdDt0ZXh0LWFsaWduOmluaGVyaXQ7d2hpdGUtc3BhY2U6aW5oZXJpdDtjb2xvcjppbmhlcml0Oy13ZWJraXQtbWFyZ2luLXN0YXJ0OnZhcigtLW1hcmdpbi1zdGFydCk7bWFyZ2luLWlubGluZS1zdGFydDp2YXIoLS1tYXJnaW4tc3RhcnQpOy13ZWJraXQtbWFyZ2luLWVuZDp2YXIoLS1tYXJnaW4tZW5kKTttYXJnaW4taW5saW5lLWVuZDp2YXIoLS1tYXJnaW4tZW5kKTttYXJnaW4tdG9wOnZhcigtLW1hcmdpbi10b3ApO21hcmdpbi1ib3R0b206dmFyKC0tbWFyZ2luLWJvdHRvbSk7LXdlYmtpdC1wYWRkaW5nLXN0YXJ0OnZhcigtLXBhZGRpbmctc3RhcnQpO3BhZGRpbmctaW5saW5lLXN0YXJ0OnZhcigtLXBhZGRpbmctc3RhcnQpOy13ZWJraXQtcGFkZGluZy1lbmQ6dmFyKC0tcGFkZGluZy1lbmQpO3BhZGRpbmctaW5saW5lLWVuZDp2YXIoLS1wYWRkaW5nLWVuZCk7cGFkZGluZy10b3A6dmFyKC0tcGFkZGluZy10b3ApO3BhZGRpbmctYm90dG9tOnZhcigtLXBhZGRpbmctYm90dG9tKTstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGUzZCgwLCAgMCwgIDApO3RyYW5zZm9ybTp0cmFuc2xhdGUzZCgwLCAgMCwgIDApO2Rpc3BsYXk6LW1zLWZsZXhib3g7ZGlzcGxheTpmbGV4O3Bvc2l0aW9uOnJlbGF0aXZlOy1tcy1mbGV4LWRpcmVjdGlvbjppbmhlcml0O2ZsZXgtZGlyZWN0aW9uOmluaGVyaXQ7LW1zLWZsZXgtcG9zaXRpdmU6MTtmbGV4LWdyb3c6MTstbXMtZmxleC1hbGlnbjpjZW50ZXI7YWxpZ24taXRlbXM6Y2VudGVyOy1tcy1mbGV4LXBhY2s6Y2VudGVyO2p1c3RpZnktY29udGVudDpjZW50ZXI7d2lkdGg6MTAwJTttaW4td2lkdGg6aW5oZXJpdDttYXgtd2lkdGg6aW5oZXJpdDtoZWlnaHQ6YXV0bzttaW4taGVpZ2h0OmluaGVyaXQ7bWF4LWhlaWdodDppbmhlcml0Oy13ZWJraXQtdHJhbnNpdGlvbjp2YXIoLS10cmFuc2l0aW9uKTt0cmFuc2l0aW9uOnZhcigtLXRyYW5zaXRpb24pO2JvcmRlcjpub25lO291dGxpbmU6bm9uZTtiYWNrZ3JvdW5kOnRyYW5zcGFyZW50O2NvbnRhaW46Y29udGVudDtwb2ludGVyLWV2ZW50czpub25lO292ZXJmbG93OmhpZGRlbjt6LWluZGV4OjJ9LmJ1dHRvbi1uYXRpdmU6OmFmdGVye2xlZnQ6MDtyaWdodDowO3RvcDowO2JvdHRvbTowO3Bvc2l0aW9uOmFic29sdXRlO2NvbnRlbnQ6XFxcIlxcXCI7b3BhY2l0eTowfS5idXR0b24taW5uZXJ7ZGlzcGxheTotbXMtZmxleGJveDtkaXNwbGF5OmZsZXg7cG9zaXRpb246cmVsYXRpdmU7LW1zLWZsZXgtZmxvdzppbmhlcml0O2ZsZXgtZmxvdzppbmhlcml0Oy1tcy1mbGV4LWFsaWduOmNlbnRlcjthbGlnbi1pdGVtczpjZW50ZXI7LW1zLWZsZXgtcGFjazpjZW50ZXI7anVzdGlmeS1jb250ZW50OmNlbnRlcjt3aWR0aDoxMDAlO2hlaWdodDoxMDAlO3otaW5kZXg6MX06aG9zdCguc2VnbWVudC1idXR0b24tY2hlY2tlZCl7YmFja2dyb3VuZDp2YXIoLS1iYWNrZ3JvdW5kLWNoZWNrZWQpO2NvbG9yOnZhcigtLWNvbG9yLWNoZWNrZWQpfTpob3N0KC5zZWdtZW50LWJ1dHRvbi1kaXNhYmxlZCl7Y3Vyc29yOmRlZmF1bHQ7cG9pbnRlci1ldmVudHM6bm9uZX06aG9zdCguaW9uLWZvY3VzZWQpIC5idXR0b24tbmF0aXZle2NvbG9yOnZhcigtLWNvbG9yLWZvY3VzZWQpfTpob3N0KC5pb24tZm9jdXNlZCkgLmJ1dHRvbi1uYXRpdmU6OmFmdGVye2JhY2tncm91bmQ6dmFyKC0tYmFja2dyb3VuZC1mb2N1c2VkKTtvcGFjaXR5OnZhcigtLWJhY2tncm91bmQtZm9jdXNlZC1vcGFjaXR5KX06aG9zdCg6Zm9jdXMpe291dGxpbmU6bm9uZX1AbWVkaWEgKGFueS1ob3ZlcjogaG92ZXIpezpob3N0KDpob3ZlcikgLmJ1dHRvbi1uYXRpdmV7Y29sb3I6dmFyKC0tY29sb3ItaG92ZXIpfTpob3N0KDpob3ZlcikgLmJ1dHRvbi1uYXRpdmU6OmFmdGVye2JhY2tncm91bmQ6dmFyKC0tYmFja2dyb3VuZC1ob3Zlcik7b3BhY2l0eTp2YXIoLS1iYWNrZ3JvdW5kLWhvdmVyLW9wYWNpdHkpfTpob3N0KC5zZWdtZW50LWJ1dHRvbi1jaGVja2VkOmhvdmVyKSAuYnV0dG9uLW5hdGl2ZXtjb2xvcjp2YXIoLS1jb2xvci1jaGVja2VkKX19OjpzbG90dGVkKGlvbi1pY29uKXstbXMtZmxleC1uZWdhdGl2ZTowO2ZsZXgtc2hyaW5rOjA7LW1zLWZsZXgtb3JkZXI6LTE7b3JkZXI6LTE7cG9pbnRlci1ldmVudHM6bm9uZX06OnNsb3R0ZWQoaW9uLWxhYmVsKXtkaXNwbGF5OmJsb2NrOy1tcy1mbGV4LWl0ZW0tYWxpZ246Y2VudGVyO2FsaWduLXNlbGY6Y2VudGVyO21heC13aWR0aDoxMDAlO2xpbmUtaGVpZ2h0OjIycHg7dGV4dC1vdmVyZmxvdzplbGxpcHNpczt3aGl0ZS1zcGFjZTpub3dyYXA7b3ZlcmZsb3c6aGlkZGVuOy13ZWJraXQtYm94LXNpemluZzpib3JkZXItYm94O2JveC1zaXppbmc6Ym9yZGVyLWJveDtwb2ludGVyLWV2ZW50czpub25lfTpob3N0KC5zZWdtZW50LWJ1dHRvbi1sYXlvdXQtaWNvbi10b3ApIC5idXR0b24tbmF0aXZley1tcy1mbGV4LWRpcmVjdGlvbjpjb2x1bW47ZmxleC1kaXJlY3Rpb246Y29sdW1ufTpob3N0KC5zZWdtZW50LWJ1dHRvbi1sYXlvdXQtaWNvbi1zdGFydCkgLmJ1dHRvbi1uYXRpdmV7LW1zLWZsZXgtZGlyZWN0aW9uOnJvdztmbGV4LWRpcmVjdGlvbjpyb3d9Omhvc3QoLnNlZ21lbnQtYnV0dG9uLWxheW91dC1pY29uLWVuZCkgLmJ1dHRvbi1uYXRpdmV7LW1zLWZsZXgtZGlyZWN0aW9uOnJvdy1yZXZlcnNlO2ZsZXgtZGlyZWN0aW9uOnJvdy1yZXZlcnNlfTpob3N0KC5zZWdtZW50LWJ1dHRvbi1sYXlvdXQtaWNvbi1ib3R0b20pIC5idXR0b24tbmF0aXZley1tcy1mbGV4LWRpcmVjdGlvbjpjb2x1bW4tcmV2ZXJzZTtmbGV4LWRpcmVjdGlvbjpjb2x1bW4tcmV2ZXJzZX06aG9zdCguc2VnbWVudC1idXR0b24tbGF5b3V0LWljb24taGlkZSkgOjpzbG90dGVkKGlvbi1pY29uKXtkaXNwbGF5Om5vbmV9Omhvc3QoLnNlZ21lbnQtYnV0dG9uLWxheW91dC1sYWJlbC1oaWRlKSA6OnNsb3R0ZWQoaW9uLWxhYmVsKXtkaXNwbGF5Om5vbmV9aW9uLXJpcHBsZS1lZmZlY3R7Y29sb3I6dmFyKC0tcmlwcGxlLWNvbG9yLCB2YXIoLS1jb2xvci1jaGVja2VkKSl9LnNlZ21lbnQtYnV0dG9uLWluZGljYXRvcnstd2Via2l0LXRyYW5zZm9ybS1vcmlnaW46bGVmdDt0cmFuc2Zvcm0tb3JpZ2luOmxlZnQ7cG9zaXRpb246YWJzb2x1dGU7b3BhY2l0eTowOy13ZWJraXQtYm94LXNpemluZzpib3JkZXItYm94O2JveC1zaXppbmc6Ym9yZGVyLWJveDt3aWxsLWNoYW5nZTp0cmFuc2Zvcm0sIG9wYWNpdHk7cG9pbnRlci1ldmVudHM6bm9uZX0uc2VnbWVudC1idXR0b24taW5kaWNhdG9yLWJhY2tncm91bmR7d2lkdGg6MTAwJTtoZWlnaHQ6dmFyKC0taW5kaWNhdG9yLWhlaWdodCk7LXdlYmtpdC10cmFuc2Zvcm06dmFyKC0taW5kaWNhdG9yLXRyYW5zZm9ybSk7dHJhbnNmb3JtOnZhcigtLWluZGljYXRvci10cmFuc2Zvcm0pOy13ZWJraXQtYm94LXNoYWRvdzp2YXIoLS1pbmRpY2F0b3ItYm94LXNoYWRvdyk7Ym94LXNoYWRvdzp2YXIoLS1pbmRpY2F0b3ItYm94LXNoYWRvdyk7cG9pbnRlci1ldmVudHM6bm9uZX0uc2VnbWVudC1idXR0b24taW5kaWNhdG9yLWFuaW1hdGVkey13ZWJraXQtdHJhbnNpdGlvbjp2YXIoLS1pbmRpY2F0b3ItdHJhbnNpdGlvbik7dHJhbnNpdGlvbjp2YXIoLS1pbmRpY2F0b3ItdHJhbnNpdGlvbil9Omhvc3QoLnNlZ21lbnQtYnV0dG9uLWNoZWNrZWQpIC5zZWdtZW50LWJ1dHRvbi1pbmRpY2F0b3J7b3BhY2l0eToxfUBtZWRpYSAocHJlZmVycy1yZWR1Y2VkLW1vdGlvbjogcmVkdWNlKXsuc2VnbWVudC1idXR0b24taW5kaWNhdG9yLWJhY2tncm91bmR7LXdlYmtpdC10cmFuc2Zvcm06bm9uZTt0cmFuc2Zvcm06bm9uZX0uc2VnbWVudC1idXR0b24taW5kaWNhdG9yLWFuaW1hdGVkey13ZWJraXQtdHJhbnNpdGlvbjpub25lO3RyYW5zaXRpb246bm9uZX19Omhvc3R7LS1iYWNrZ3JvdW5kOm5vbmU7LS1iYWNrZ3JvdW5kLWNoZWNrZWQ6bm9uZTstLWJhY2tncm91bmQtaG92ZXI6dmFyKC0tY29sb3ItY2hlY2tlZCk7LS1iYWNrZ3JvdW5kLWZvY3VzZWQ6dmFyKC0tY29sb3ItY2hlY2tlZCk7LS1iYWNrZ3JvdW5kLWFjdGl2YXRlZC1vcGFjaXR5OjA7LS1iYWNrZ3JvdW5kLWZvY3VzZWQtb3BhY2l0eTouMTI7LS1iYWNrZ3JvdW5kLWhvdmVyLW9wYWNpdHk6LjA0Oy0tY29sb3I6cmdiYSh2YXIoLS1pb24tdGV4dC1jb2xvci1yZ2IsIDAsIDAsIDApLCAwLjYpOy0tY29sb3ItY2hlY2tlZDp2YXIoLS1pb24tY29sb3ItcHJpbWFyeSwgIzAwNTRlOSk7LS1pbmRpY2F0b3ItYm94LXNoYWRvdzpub25lOy0taW5kaWNhdG9yLWNvbG9yOnZhcigtLWNvbG9yLWNoZWNrZWQpOy0taW5kaWNhdG9yLWhlaWdodDoycHg7LS1pbmRpY2F0b3ItdHJhbnNpdGlvbjp0cmFuc2Zvcm0gMjUwbXMgY3ViaWMtYmV6aWVyKDAuNCwgMCwgMC4yLCAxKTstLWluZGljYXRvci10cmFuc2Zvcm06bm9uZTstLXBhZGRpbmctdG9wOjA7LS1wYWRkaW5nLWVuZDoxNnB4Oy0tcGFkZGluZy1ib3R0b206MDstLXBhZGRpbmctc3RhcnQ6MTZweDstLXRyYW5zaXRpb246Y29sb3IgMC4xNXMgbGluZWFyIDBzLCBvcGFjaXR5IDAuMTVzIGxpbmVhciAwczttaW4td2lkdGg6OTBweDttaW4taGVpZ2h0OjQ4cHg7Ym9yZGVyLXdpZHRoOnZhcigtLWJvcmRlci13aWR0aCk7Ym9yZGVyLXN0eWxlOnZhcigtLWJvcmRlci1zdHlsZSk7Ym9yZGVyLWNvbG9yOnZhcigtLWJvcmRlci1jb2xvcik7Zm9udC1zaXplOjE0cHg7Zm9udC13ZWlnaHQ6NTAwO2xldHRlci1zcGFjaW5nOjAuMDZlbTtsaW5lLWhlaWdodDo0MHB4O3RleHQtdHJhbnNmb3JtOnVwcGVyY2FzZX06aG9zdCguc2VnbWVudC1idXR0b24tZGlzYWJsZWQpe29wYWNpdHk6MC4zfTpob3N0KC5pbi1zZWdtZW50LWNvbG9yKXtiYWNrZ3JvdW5kOm5vbmU7Y29sb3I6cmdiYSh2YXIoLS1pb24tdGV4dC1jb2xvci1yZ2IsIDAsIDAsIDApLCAwLjYpfTpob3N0KC5pbi1zZWdtZW50LWNvbG9yKSBpb24tcmlwcGxlLWVmZmVjdHtjb2xvcjp2YXIoLS1pb24tY29sb3ItYmFzZSl9Omhvc3QoLmluLXNlZ21lbnQtY29sb3IpIC5zZWdtZW50LWJ1dHRvbi1pbmRpY2F0b3ItYmFja2dyb3VuZHtiYWNrZ3JvdW5kOnZhcigtLWlvbi1jb2xvci1iYXNlKX06aG9zdCguaW4tc2VnbWVudC1jb2xvci5zZWdtZW50LWJ1dHRvbi1jaGVja2VkKSAuYnV0dG9uLW5hdGl2ZXtjb2xvcjp2YXIoLS1pb24tY29sb3ItYmFzZSl9Omhvc3QoLmluLXNlZ21lbnQtY29sb3IuaW9uLWZvY3VzZWQpIC5idXR0b24tbmF0aXZlOjphZnRlcntiYWNrZ3JvdW5kOnZhcigtLWlvbi1jb2xvci1iYXNlKX1AbWVkaWEgKGFueS1ob3ZlcjogaG92ZXIpezpob3N0KC5pbi1zZWdtZW50LWNvbG9yOmhvdmVyKSAuYnV0dG9uLW5hdGl2ZXtjb2xvcjpyZ2JhKHZhcigtLWlvbi10ZXh0LWNvbG9yLXJnYiwgMCwgMCwgMCksIDAuNil9Omhvc3QoLmluLXNlZ21lbnQtY29sb3I6aG92ZXIpIC5idXR0b24tbmF0aXZlOjphZnRlcntiYWNrZ3JvdW5kOnZhcigtLWlvbi1jb2xvci1iYXNlKX06aG9zdCguaW4tc2VnbWVudC1jb2xvci5zZWdtZW50LWJ1dHRvbi1jaGVja2VkOmhvdmVyKSAuYnV0dG9uLW5hdGl2ZXtjb2xvcjp2YXIoLS1pb24tY29sb3ItYmFzZSl9fTpob3N0KC5pbi10b29sYmFyOm5vdCguaW4tc2VnbWVudC1jb2xvcikpey0tYmFja2dyb3VuZDp2YXIoLS1pb24tdG9vbGJhci1zZWdtZW50LWJhY2tncm91bmQsIG5vbmUpOy0tYmFja2dyb3VuZC1jaGVja2VkOnZhcigtLWlvbi10b29sYmFyLXNlZ21lbnQtYmFja2dyb3VuZC1jaGVja2VkLCBub25lKTstLWNvbG9yOnZhcigtLWlvbi10b29sYmFyLXNlZ21lbnQtY29sb3IsIHJnYmEodmFyKC0taW9uLXRleHQtY29sb3ItcmdiLCAwLCAwLCAwKSwgMC42KSk7LS1jb2xvci1jaGVja2VkOnZhcigtLWlvbi10b29sYmFyLXNlZ21lbnQtY29sb3ItY2hlY2tlZCwgdmFyKC0taW9uLWNvbG9yLXByaW1hcnksICMwMDU0ZTkpKTstLWluZGljYXRvci1jb2xvcjp2YXIoLS1pb24tdG9vbGJhci1zZWdtZW50LWNvbG9yLWNoZWNrZWQsIHZhcigtLWNvbG9yLWNoZWNrZWQpKX06aG9zdCguaW4tdG9vbGJhci1jb2xvcjpub3QoLmluLXNlZ21lbnQtY29sb3IpKSAuYnV0dG9uLW5hdGl2ZXtjb2xvcjpyZ2JhKHZhcigtLWlvbi1jb2xvci1jb250cmFzdC1yZ2IpLCAwLjYpfTpob3N0KC5pbi10b29sYmFyLWNvbG9yLnNlZ21lbnQtYnV0dG9uLWNoZWNrZWQ6bm90KC5pbi1zZWdtZW50LWNvbG9yKSkgLmJ1dHRvbi1uYXRpdmV7Y29sb3I6dmFyKC0taW9uLWNvbG9yLWNvbnRyYXN0KX1AbWVkaWEgKGFueS1ob3ZlcjogaG92ZXIpezpob3N0KC5pbi10b29sYmFyLWNvbG9yOm5vdCguaW4tc2VnbWVudC1jb2xvcikpIC5idXR0b24tbmF0aXZlOjphZnRlcntiYWNrZ3JvdW5kOnZhcigtLWlvbi1jb2xvci1jb250cmFzdCl9fTo6c2xvdHRlZChpb24taWNvbil7bWFyZ2luLXRvcDoxMnB4O21hcmdpbi1ib3R0b206MTJweDtmb250LXNpemU6MjRweH06OnNsb3R0ZWQoaW9uLWxhYmVsKXttYXJnaW4tdG9wOjEycHg7bWFyZ2luLWJvdHRvbToxMnB4fTpob3N0KC5zZWdtZW50LWJ1dHRvbi1sYXlvdXQtaWNvbi10b3ApIDo6c2xvdHRlZChpb24tbGFiZWwpLDpob3N0KC5zZWdtZW50LWJ1dHRvbi1sYXlvdXQtaWNvbi1ib3R0b20pIDo6c2xvdHRlZChpb24taWNvbil7bWFyZ2luLXRvcDowfTpob3N0KC5zZWdtZW50LWJ1dHRvbi1sYXlvdXQtaWNvbi10b3ApIDo6c2xvdHRlZChpb24taWNvbiksOmhvc3QoLnNlZ21lbnQtYnV0dG9uLWxheW91dC1pY29uLWJvdHRvbSkgOjpzbG90dGVkKGlvbi1sYWJlbCl7bWFyZ2luLWJvdHRvbTowfTpob3N0KC5zZWdtZW50LWJ1dHRvbi1sYXlvdXQtaWNvbi1zdGFydCkgOjpzbG90dGVkKGlvbi1sYWJlbCl7LXdlYmtpdC1tYXJnaW4tc3RhcnQ6OHB4O21hcmdpbi1pbmxpbmUtc3RhcnQ6OHB4Oy13ZWJraXQtbWFyZ2luLWVuZDowO21hcmdpbi1pbmxpbmUtZW5kOjB9Omhvc3QoLnNlZ21lbnQtYnV0dG9uLWxheW91dC1pY29uLWVuZCkgOjpzbG90dGVkKGlvbi1sYWJlbCl7LXdlYmtpdC1tYXJnaW4tc3RhcnQ6MDttYXJnaW4taW5saW5lLXN0YXJ0OjA7LXdlYmtpdC1tYXJnaW4tZW5kOjhweDttYXJnaW4taW5saW5lLWVuZDo4cHh9Omhvc3QoLnNlZ21lbnQtYnV0dG9uLWhhcy1pY29uLW9ubHkpIDo6c2xvdHRlZChpb24taWNvbil7bWFyZ2luLXRvcDoxMnB4O21hcmdpbi1ib3R0b206MTJweH06aG9zdCguc2VnbWVudC1idXR0b24taGFzLWxhYmVsLW9ubHkpIDo6c2xvdHRlZChpb24tbGFiZWwpe21hcmdpbi10b3A6MTJweDttYXJnaW4tYm90dG9tOjEycHh9LnNlZ21lbnQtYnV0dG9uLWluZGljYXRvcntsZWZ0OjA7cmlnaHQ6MDtib3R0b206MH0uc2VnbWVudC1idXR0b24taW5kaWNhdG9yLWJhY2tncm91bmR7YmFja2dyb3VuZDp2YXIoLS1pbmRpY2F0b3ItY29sb3IpfTpob3N0KC5pbi10b29sYmFyOm5vdCguaW4tc2VnbWVudC1jb2xvcikpIC5zZWdtZW50LWJ1dHRvbi1pbmRpY2F0b3ItYmFja2dyb3VuZHtiYWNrZ3JvdW5kOnZhcigtLWlvbi10b29sYmFyLXNlZ21lbnQtaW5kaWNhdG9yLWNvbG9yLCB2YXIoLS1pbmRpY2F0b3ItY29sb3IpKX06aG9zdCguaW4tdG9vbGJhci1jb2xvcjpub3QoLmluLXNlZ21lbnQtY29sb3IpKSAuc2VnbWVudC1idXR0b24taW5kaWNhdG9yLWJhY2tncm91bmR7YmFja2dyb3VuZDp2YXIoLS1pb24tY29sb3ItY29udHJhc3QpfVwiO1xuY29uc3QgSW9uU2VnbWVudEJ1dHRvbk1kU3R5bGUwID0gc2VnbWVudEJ1dHRvbk1kQ3NzO1xuXG5sZXQgaWRzID0gMDtcbmNvbnN0IFNlZ21lbnRCdXR0b24gPSBjbGFzcyB7XG4gICAgY29uc3RydWN0b3IoaG9zdFJlZikge1xuICAgICAgICByZWdpc3Rlckluc3RhbmNlKHRoaXMsIGhvc3RSZWYpO1xuICAgICAgICB0aGlzLnNlZ21lbnRFbCA9IG51bGw7XG4gICAgICAgIHRoaXMuaW5oZXJpdGVkQXR0cmlidXRlcyA9IHt9O1xuICAgICAgICB0aGlzLnVwZGF0ZVN0eWxlID0gKCkgPT4ge1xuICAgICAgICAgICAgZm9yY2VVcGRhdGUodGhpcyk7XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMudXBkYXRlU3RhdGUgPSAoKSA9PiB7XG4gICAgICAgICAgICBjb25zdCB7IHNlZ21lbnRFbCB9ID0gdGhpcztcbiAgICAgICAgICAgIGlmIChzZWdtZW50RWwpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmNoZWNrZWQgPSBzZWdtZW50RWwudmFsdWUgPT09IHRoaXMudmFsdWU7XG4gICAgICAgICAgICAgICAgaWYgKHNlZ21lbnRFbC5kaXNhYmxlZCkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmRpc2FibGVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMuY2hlY2tlZCA9IGZhbHNlO1xuICAgICAgICB0aGlzLmNvbnRlbnRJZCA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5kaXNhYmxlZCA9IGZhbHNlO1xuICAgICAgICB0aGlzLmxheW91dCA9ICdpY29uLXRvcCc7XG4gICAgICAgIHRoaXMudHlwZSA9ICdidXR0b24nO1xuICAgICAgICB0aGlzLnZhbHVlID0gJ2lvbi1zYi0nICsgaWRzKys7XG4gICAgfVxuICAgIHZhbHVlQ2hhbmdlZCgpIHtcbiAgICAgICAgdGhpcy51cGRhdGVTdGF0ZSgpO1xuICAgIH1cbiAgICBjb25uZWN0ZWRDYWxsYmFjaygpIHtcbiAgICAgICAgY29uc3Qgc2VnbWVudEVsID0gKHRoaXMuc2VnbWVudEVsID0gdGhpcy5lbC5jbG9zZXN0KCdpb24tc2VnbWVudCcpKTtcbiAgICAgICAgaWYgKHNlZ21lbnRFbCkge1xuICAgICAgICAgICAgdGhpcy51cGRhdGVTdGF0ZSgpO1xuICAgICAgICAgICAgYWRkRXZlbnRMaXN0ZW5lcihzZWdtZW50RWwsICdpb25TZWxlY3QnLCB0aGlzLnVwZGF0ZVN0YXRlKTtcbiAgICAgICAgICAgIGFkZEV2ZW50TGlzdGVuZXIoc2VnbWVudEVsLCAnaW9uU3R5bGUnLCB0aGlzLnVwZGF0ZVN0eWxlKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBQcmV2ZW50IGJ1dHRvbnMgZnJvbSBiZWluZyBkaXNhYmxlZCB3aGVuIGFzc29jaWF0ZWQgd2l0aCBzZWdtZW50IGNvbnRlbnRcbiAgICAgICAgaWYgKHRoaXMuY29udGVudElkICYmIHRoaXMuZGlzYWJsZWQpIHtcbiAgICAgICAgICAgIGNvbnNvbGUud2FybihgU2VnbWVudCBCdXR0b246IFNlZ21lbnQgYnV0dG9ucyBjYW5ub3QgYmUgZGlzYWJsZWQgd2hlbiBhc3NvY2lhdGVkIHdpdGggYW4gPGlvbi1zZWdtZW50LWNvbnRlbnQ+LmApO1xuICAgICAgICAgICAgdGhpcy5kaXNhYmxlZCA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgfVxuICAgIGRpc2Nvbm5lY3RlZENhbGxiYWNrKCkge1xuICAgICAgICBjb25zdCBzZWdtZW50RWwgPSB0aGlzLnNlZ21lbnRFbDtcbiAgICAgICAgaWYgKHNlZ21lbnRFbCkge1xuICAgICAgICAgICAgcmVtb3ZlRXZlbnRMaXN0ZW5lcihzZWdtZW50RWwsICdpb25TZWxlY3QnLCB0aGlzLnVwZGF0ZVN0YXRlKTtcbiAgICAgICAgICAgIHJlbW92ZUV2ZW50TGlzdGVuZXIoc2VnbWVudEVsLCAnaW9uU3R5bGUnLCB0aGlzLnVwZGF0ZVN0eWxlKTtcbiAgICAgICAgICAgIHRoaXMuc2VnbWVudEVsID0gbnVsbDtcbiAgICAgICAgfVxuICAgIH1cbiAgICBjb21wb25lbnRXaWxsTG9hZCgpIHtcbiAgICAgICAgdGhpcy5pbmhlcml0ZWRBdHRyaWJ1dGVzID0gT2JqZWN0LmFzc2lnbih7fSwgaW5oZXJpdEF0dHJpYnV0ZXModGhpcy5lbCwgWydhcmlhLWxhYmVsJ10pKTtcbiAgICAgICAgLy8gUmV0dXJuIGlmIHRoZXJlIGlzIG5vIGNvbnRlbnRJZCBkZWZpbmVkXG4gICAgICAgIGlmICghdGhpcy5jb250ZW50SWQpXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIC8vIEF0dGVtcHQgdG8gZmluZCB0aGUgU2VnbWVudCBDb250ZW50IGJ5IGl0cyBjb250ZW50SWRcbiAgICAgICAgY29uc3Qgc2VnbWVudENvbnRlbnQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCh0aGlzLmNvbnRlbnRJZCk7XG4gICAgICAgIC8vIElmIG5vIGFzc29jaWF0ZWQgU2VnbWVudCBDb250ZW50IGV4aXN0cywgbG9nIGFuIGVycm9yIGFuZCByZXR1cm5cbiAgICAgICAgaWYgKCFzZWdtZW50Q29udGVudCkge1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcihgU2VnbWVudCBCdXR0b246IFVuYWJsZSB0byBmaW5kIFNlZ21lbnQgQ29udGVudCB3aXRoIGlkPVwiJHt0aGlzLmNvbnRlbnRJZH1cIi5gKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICAvLyBFbnN1cmUgdGhlIGZvdW5kIGVsZW1lbnQgaXMgYSB2YWxpZCBJT04tU0VHTUVOVC1DT05URU5UXG4gICAgICAgIGlmIChzZWdtZW50Q29udGVudC50YWdOYW1lICE9PSAnSU9OLVNFR01FTlQtQ09OVEVOVCcpIHtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoYFNlZ21lbnQgQnV0dG9uOiBFbGVtZW50IHdpdGggaWQ9XCIke3RoaXMuY29udGVudElkfVwiIGlzIG5vdCBhbiA8aW9uLXNlZ21lbnQtY29udGVudD4gZWxlbWVudC5gKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgIH1cbiAgICBnZXQgaGFzTGFiZWwoKSB7XG4gICAgICAgIHJldHVybiAhIXRoaXMuZWwucXVlcnlTZWxlY3RvcignaW9uLWxhYmVsJyk7XG4gICAgfVxuICAgIGdldCBoYXNJY29uKCkge1xuICAgICAgICByZXR1cm4gISF0aGlzLmVsLnF1ZXJ5U2VsZWN0b3IoJ2lvbi1pY29uJyk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEBpbnRlcm5hbFxuICAgICAqIEZvY3VzZXMgdGhlIG5hdGl2ZSA8YnV0dG9uPiBlbGVtZW50XG4gICAgICogaW5zaWRlIG9mIGlvbi1zZWdtZW50LWJ1dHRvbi5cbiAgICAgKi9cbiAgICBhc3luYyBzZXRGb2N1cygpIHtcbiAgICAgICAgY29uc3QgeyBuYXRpdmVFbCB9ID0gdGhpcztcbiAgICAgICAgaWYgKG5hdGl2ZUVsICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIG5hdGl2ZUVsLmZvY3VzKCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmVuZGVyKCkge1xuICAgICAgICBjb25zdCB7IGNoZWNrZWQsIHR5cGUsIGRpc2FibGVkLCBoYXNJY29uLCBoYXNMYWJlbCwgbGF5b3V0LCBzZWdtZW50RWwgfSA9IHRoaXM7XG4gICAgICAgIGNvbnN0IG1vZGUgPSBnZXRJb25Nb2RlKHRoaXMpO1xuICAgICAgICBjb25zdCBoYXNTZWdtZW50Q29sb3IgPSAoKSA9PiAoc2VnbWVudEVsID09PSBudWxsIHx8IHNlZ21lbnRFbCA9PT0gdm9pZCAwID8gdm9pZCAwIDogc2VnbWVudEVsLmNvbG9yKSAhPT0gdW5kZWZpbmVkO1xuICAgICAgICByZXR1cm4gKGgoSG9zdCwgeyBrZXk6ICdmMmY2NzlhMDhiMTMxY2QzNWQ2M2Y2NDliOWQxZjE5MDdkZjMwYTg5JywgY2xhc3M6IHtcbiAgICAgICAgICAgICAgICBbbW9kZV06IHRydWUsXG4gICAgICAgICAgICAgICAgJ2luLXRvb2xiYXInOiBob3N0Q29udGV4dCgnaW9uLXRvb2xiYXInLCB0aGlzLmVsKSxcbiAgICAgICAgICAgICAgICAnaW4tdG9vbGJhci1jb2xvcic6IGhvc3RDb250ZXh0KCdpb24tdG9vbGJhcltjb2xvcl0nLCB0aGlzLmVsKSxcbiAgICAgICAgICAgICAgICAnaW4tc2VnbWVudCc6IGhvc3RDb250ZXh0KCdpb24tc2VnbWVudCcsIHRoaXMuZWwpLFxuICAgICAgICAgICAgICAgICdpbi1zZWdtZW50LWNvbG9yJzogaGFzU2VnbWVudENvbG9yKCksXG4gICAgICAgICAgICAgICAgJ3NlZ21lbnQtYnV0dG9uLWhhcy1sYWJlbCc6IGhhc0xhYmVsLFxuICAgICAgICAgICAgICAgICdzZWdtZW50LWJ1dHRvbi1oYXMtaWNvbic6IGhhc0ljb24sXG4gICAgICAgICAgICAgICAgJ3NlZ21lbnQtYnV0dG9uLWhhcy1sYWJlbC1vbmx5JzogaGFzTGFiZWwgJiYgIWhhc0ljb24sXG4gICAgICAgICAgICAgICAgJ3NlZ21lbnQtYnV0dG9uLWhhcy1pY29uLW9ubHknOiBoYXNJY29uICYmICFoYXNMYWJlbCxcbiAgICAgICAgICAgICAgICAnc2VnbWVudC1idXR0b24tZGlzYWJsZWQnOiBkaXNhYmxlZCxcbiAgICAgICAgICAgICAgICAnc2VnbWVudC1idXR0b24tY2hlY2tlZCc6IGNoZWNrZWQsXG4gICAgICAgICAgICAgICAgW2BzZWdtZW50LWJ1dHRvbi1sYXlvdXQtJHtsYXlvdXR9YF06IHRydWUsXG4gICAgICAgICAgICAgICAgJ2lvbi1hY3RpdmF0YWJsZSc6IHRydWUsXG4gICAgICAgICAgICAgICAgJ2lvbi1hY3RpdmF0YWJsZS1pbnN0YW50JzogdHJ1ZSxcbiAgICAgICAgICAgICAgICAnaW9uLWZvY3VzYWJsZSc6IHRydWUsXG4gICAgICAgICAgICB9IH0sIGgoXCJidXR0b25cIiwgT2JqZWN0LmFzc2lnbih7IGtleTogJzhlODg3YjUwMzFkYTcwNWEzNjk1YzA4NzBiZTA4Njk2ZDY2MTg4ZGUnLCBcImFyaWEtc2VsZWN0ZWRcIjogY2hlY2tlZCA/ICd0cnVlJyA6ICdmYWxzZScsIHJvbGU6IFwidGFiXCIsIHJlZjogKGVsKSA9PiAodGhpcy5uYXRpdmVFbCA9IGVsKSwgdHlwZTogdHlwZSwgY2xhc3M6IFwiYnV0dG9uLW5hdGl2ZVwiLCBwYXJ0OiBcIm5hdGl2ZVwiLCBkaXNhYmxlZDogZGlzYWJsZWQgfSwgdGhpcy5pbmhlcml0ZWRBdHRyaWJ1dGVzKSwgaChcInNwYW5cIiwgeyBrZXk6ICc3M2I3OTVjMzljYjA5NDM4ZTUwOTIyYWJmNmIzYTAxMGUzMWZhMmI2JywgY2xhc3M6IFwiYnV0dG9uLWlubmVyXCIgfSwgaChcInNsb3RcIiwgeyBrZXk6ICc5NzY5ZGRjOTE3ZDdlNDU5YmQ4MGRjZDgxYzEwYzM3OWU3M2QxYjNlJyB9KSksIG1vZGUgPT09ICdtZCcgJiYgaChcImlvbi1yaXBwbGUtZWZmZWN0XCIsIHsga2V5OiAnOGU0YzA2ZDZiYWUxMDM0YWY4Y2M1ZGI4NmZjY2EwYWU3MmQwNDJiMScgfSkpLCBoKFwiZGl2XCIsIHsga2V5OiAnYWU3M2VlMGU0MjllNTRhNDMyNjlmOTliNmQzZDdlMWM2ZThmNjBjYycsIHBhcnQ6IFwiaW5kaWNhdG9yXCIsIGNsYXNzOiBcInNlZ21lbnQtYnV0dG9uLWluZGljYXRvciBzZWdtZW50LWJ1dHRvbi1pbmRpY2F0b3ItYW5pbWF0ZWRcIiB9LCBoKFwiZGl2XCIsIHsga2V5OiAnZDM4ZWFiZTgxNjE0MDM3OTljZmJhZDczZGQ2YmY5MTJkOTY1NDQyYycsIHBhcnQ6IFwiaW5kaWNhdG9yLWJhY2tncm91bmRcIiwgY2xhc3M6IFwic2VnbWVudC1idXR0b24taW5kaWNhdG9yLWJhY2tncm91bmRcIiB9KSkpKTtcbiAgICB9XG4gICAgZ2V0IGVsKCkgeyByZXR1cm4gZ2V0RWxlbWVudCh0aGlzKTsgfVxuICAgIHN0YXRpYyBnZXQgd2F0Y2hlcnMoKSB7IHJldHVybiB7XG4gICAgICAgIFwidmFsdWVcIjogW1widmFsdWVDaGFuZ2VkXCJdXG4gICAgfTsgfVxufTtcblNlZ21lbnRCdXR0b24uc3R5bGUgPSB7XG4gICAgaW9zOiBJb25TZWdtZW50QnV0dG9uSW9zU3R5bGUwLFxuICAgIG1kOiBJb25TZWdtZW50QnV0dG9uTWRTdHlsZTBcbn07XG5cbmV4cG9ydCB7IFNlZ21lbnQgYXMgaW9uX3NlZ21lbnQsIFNlZ21lbnRCdXR0b24gYXMgaW9uX3NlZ21lbnRfYnV0dG9uIH07XG4iXSwibmFtZXMiOlsiciIsInJlZ2lzdGVySW5zdGFuY2UiLCJjIiwiY3JlYXRlRXZlbnQiLCJ3Iiwid3JpdGVUYXNrIiwiaCIsImUiLCJIb3N0IiwiZiIsImdldEVsZW1lbnQiLCJpIiwiZm9yY2VVcGRhdGUiLCJyYWYiLCJhIiwiYWRkRXZlbnRMaXN0ZW5lciIsImIiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwiaW5oZXJpdEF0dHJpYnV0ZXMiLCJpc1JUTCIsImNyZWF0ZUNvbG9yQ2xhc3NlcyIsImhvc3RDb250ZXh0IiwiZ2V0SW9uTW9kZSIsInNlZ21lbnRJb3NDc3MiLCJJb25TZWdtZW50SW9zU3R5bGUwIiwic2VnbWVudE1kQ3NzIiwiSW9uU2VnbWVudE1kU3R5bGUwIiwiU2VnbWVudCIsImNvbnN0cnVjdG9yIiwiaG9zdFJlZiIsImlvbkNoYW5nZSIsImlvblNlbGVjdCIsImlvblN0eWxlIiwic2VnbWVudFZpZXdFbCIsIm9uQ2xpY2siLCJldiIsImN1cnJlbnQiLCJ0YXJnZXQiLCJwcmV2aW91cyIsImNoZWNrZWQiLCJ0YWdOYW1lIiwidmFsdWUiLCJlbWl0VmFsdWVDaGFuZ2UiLCJ1cGRhdGVTZWdtZW50VmlldyIsInNjcm9sbGFibGUiLCJjaGVja0J1dHRvbiIsInN3aXBlR2VzdHVyZSIsInNldENoZWNrZWRDbGFzc2VzIiwib25TbG90dGVkSXRlbXNDaGFuZ2UiLCJ2YWx1ZUNoYW5nZWQiLCJnZXRTZWdtZW50QnV0dG9uIiwic2VsZWN0b3IiLCJfYSIsIl9iIiwiYnV0dG9ucyIsImdldEJ1dHRvbnMiLCJmaWx0ZXIiLCJidXR0b24iLCJkaXNhYmxlZCIsImN1cnJJbmRleCIsImZpbmRJbmRleCIsImRvY3VtZW50IiwiYWN0aXZlRWxlbWVudCIsImxlbmd0aCIsImFjdGl2YXRlZCIsImNvbG9yIiwidW5kZWZpbmVkIiwic2VsZWN0T25Gb2N1cyIsImNvbG9yQ2hhbmdlZCIsIm9sZFZhbHVlIiwiZW1pdFN0eWxlIiwic3dpcGVHZXN0dXJlQ2hhbmdlZCIsImdlc3R1cmVDaGFuZ2VkIiwiZmluZCIsInRyaWdnZXJTY3JvbGxPblZhbHVlQ2hhbmdlIiwiZW1pdCIsInNjcm9sbEFjdGl2ZUJ1dHRvbkludG9WaWV3IiwiZGlzYWJsZWRDaGFuZ2VkIiwiZ2VzdHVyZSIsImVuYWJsZSIsImNvbm5lY3RlZENhbGxiYWNrIiwiZ2V0U2VnbWVudFZpZXciLCJkaXNjb25uZWN0ZWRDYWxsYmFjayIsImNvbXBvbmVudFdpbGxMb2FkIiwiY29tcG9uZW50RGlkTG9hZCIsIl90aGlzIiwiX2FzeW5jVG9HZW5lcmF0b3IiLCJjcmVhdGVHZXN0dXJlIiwiZWwiLCJnZXN0dXJlTmFtZSIsImdlc3R1cmVQcmlvcml0eSIsInRocmVzaG9sZCIsInBhc3NpdmUiLCJvblN0YXJ0Iiwib25Nb3ZlIiwib25FbmQiLCJkZXRhaWwiLCJ2YWx1ZUJlZm9yZUdlc3R1cmUiLCJhY3RpdmF0ZSIsInNldE5leHRJbmRleCIsInNldEFjdGl2YXRlZCIsImV2ZW50Iiwic3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uIiwiQXJyYXkiLCJmcm9tIiwicXVlcnlTZWxlY3RvckFsbCIsImZvckVhY2giLCJjbGFzc0xpc3QiLCJ0b2dnbGUiLCJjbGlja2VkIiwiZ2V0SW5kaWNhdG9yIiwicm9vdCIsInNoYWRvd1Jvb3QiLCJxdWVyeVNlbGVjdG9yIiwicHJldmlvdXNJbmRpY2F0b3IiLCJjdXJyZW50SW5kaWNhdG9yIiwicHJldmlvdXNDbGllbnRSZWN0IiwiZ2V0Qm91bmRpbmdDbGllbnRSZWN0IiwiY3VycmVudENsaWVudFJlY3QiLCJ3aWR0aERlbHRhIiwid2lkdGgiLCJ4UG9zaXRpb24iLCJsZWZ0IiwidHJhbnNmb3JtIiwicmVtb3ZlIiwic3R5bGUiLCJzZXRQcm9wZXJ0eSIsImFkZCIsImluZGV4IiwibmV4dCIsImZpcnN0Q29udGVudElkIiwiY29udGVudElkIiwic2VnbWVudENvbnRlbnQiLCJjbG9zZXN0IiwiaGFuZGxlU2VnbWVudFZpZXdTY3JvbGwiLCJzY3JvbGxSYXRpbyIsImlzTWFudWFsU2Nyb2xsIiwiZGlzcGF0Y2hlZEZyb20iLCJzZWdtZW50RWwiLCJjb21wb3NlZFBhdGgiLCJpbmNsdWRlcyIsImNvbnRhaW5zIiwibmV4dEluZGV4IiwiTWF0aCIsInJvdW5kIiwibGFzdE5leHRJbmRleCIsInNtb290aFNjcm9sbCIsImJ0biIsInNlZ21lbnRWaWV3Iiwic2V0Q29udGVudCIsImFjdGl2ZUJ1dHRvbiIsInNjcm9sbENvbnRhaW5lckJveCIsImFjdGl2ZUJ1dHRvbkJveCIsImFjdGl2ZUJ1dHRvbkxlZnQiLCJ4IiwiY2VudGVyZWRYIiwibmV3U2Nyb2xsUG9zaXRpb24iLCJzY3JvbGxMZWZ0Iiwic2Nyb2xsVG8iLCJ0b3AiLCJiZWhhdmlvciIsImlzRW5kIiwicnRsIiwicmVjdCIsImN1cnJlbnRYIiwicHJldmlvdXNZIiwiaGVpZ2h0IiwiZ2V0Um9vdE5vZGUiLCJuZXh0RWwiLCJlbGVtZW50RnJvbVBvaW50IiwiZGVjcmVhc2VJbmRleCIsImluY3JlYXNlSW5kZXgiLCJuZXdJbmRleCIsInNlZ21lbnQiLCJvbktleURvd24iLCJrZXlEb3duU2VsZWN0c0J1dHRvbiIsImtleSIsInByZXZlbnREZWZhdWx0Iiwic2V0Rm9jdXMiLCJyZW5kZXIiLCJtb2RlIiwicm9sZSIsImNsYXNzIiwib25TbG90Y2hhbmdlIiwid2F0Y2hlcnMiLCJpb3MiLCJtZCIsInNlZ21lbnRCdXR0b25Jb3NDc3MiLCJJb25TZWdtZW50QnV0dG9uSW9zU3R5bGUwIiwic2VnbWVudEJ1dHRvbk1kQ3NzIiwiSW9uU2VnbWVudEJ1dHRvbk1kU3R5bGUwIiwiaWRzIiwiU2VnbWVudEJ1dHRvbiIsImluaGVyaXRlZEF0dHJpYnV0ZXMiLCJ1cGRhdGVTdHlsZSIsInVwZGF0ZVN0YXRlIiwibGF5b3V0IiwidHlwZSIsImNvbnNvbGUiLCJ3YXJuIiwiT2JqZWN0IiwiYXNzaWduIiwiZ2V0RWxlbWVudEJ5SWQiLCJlcnJvciIsImhhc0xhYmVsIiwiaGFzSWNvbiIsIl90aGlzMiIsIm5hdGl2ZUVsIiwiZm9jdXMiLCJoYXNTZWdtZW50Q29sb3IiLCJyZWYiLCJwYXJ0IiwiaW9uX3NlZ21lbnQiLCJpb25fc2VnbWVudF9idXR0b24iXSwic291cmNlUm9vdCI6IndlYnBhY2s6Ly8vIiwieF9nb29nbGVfaWdub3JlTGlzdCI6WzBdfQ==